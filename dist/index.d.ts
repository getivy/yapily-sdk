/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    '/account-auth-requests': {
        /**
         * Update Account Pre-authorisation
         * @description Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to access account data. <br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow. <br><br>Features: <ul><li>`INITIATE_ACCOUNT_REQUEST`</li><li>`INITIATE_PRE_AUTHORISATION`</li></ul>
         */
        put: operations['updatePreAuthoriseAccountConsent'];
        /**
         * Create Account Authorisation
         * @description Used to initiate the authorisation process and direct users to the login screen of their financial institution in order to give consent to access account data.<br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_ACCOUNT_REQUEST`
         */
        post: operations['initiateAccountRequest'];
        /**
         * Re-authorise Account Consent
         * @description Used to prompt the account holder for continued access to their financial data. This endpoint should be used when a `Consent` that was previously `AUTHORIZED` can no longer be used to retrieve data.<br><br>See [Re-Authorisation](https://docs.yapily.com/pages/key-concepts/account-data/account-consents/#re-authorisation) for more information.
         */
        patch: operations['reAuthoriseAccount'];
    };
    '/accounts': {
        /**
         * Get Accounts
         * @description Returns all accounts and balances for the end user associated with the presented consent token.<br><br>Feature: `ACCOUNTS`
         */
        get: operations['getAccounts'];
    };
    '/accounts/{accountId}': {
        /**
         * Get Account
         * @description Returns the account and balance information for a user's specified account.<br><br>Feature: `ACCOUNT`
         */
        get: operations['getAccount'];
    };
    '/accounts/{accountId}/balances': {
        /**
         * Get Account Balances
         * @description Returns the balance for the end user associated with the presented consent token.<br><br>Feature: `ACCOUNT_BALANCES`
         */
        get: operations['getAccountBalances'];
    };
    '/accounts/{accountId}/beneficiaries': {
        /**
         * Get Account Beneficiaries
         * @description Returns all the beneficiaries of a user's account.<br><br>Feature: `ACCOUNT_BENEFICIARIES`
         */
        get: operations['getBeneficiaries'];
    };
    '/accounts/{accountId}/direct-debits': {
        /**
         * Get Account Direct Debits
         * @description Returns the list of direct debits for an account.<br><br>Feature: `ACCOUNT_DIRECT_DEBITS`
         */
        get: operations['getAccountDirectDebits'];
    };
    '/accounts/{accountId}/periodic-payments': {
        /**
         * Get Account Periodic Payments
         * @description Returns the list of periodic payments (standing orders in the UK) for an account.<br><br>Feature: `ACCOUNT_PERIODIC_PAYMENTS`
         */
        get: operations['getAccountPeriodicPayments'];
    };
    '/accounts/{accountId}/scheduled-payments': {
        /**
         * Get Account Scheduled Payments
         * @description Returns the list of scheduled payments for an account.<br><br>Feature: `ACCOUNT_SCHEDULED_PAYMENTS`
         */
        get: operations['getAccountScheduledPayments'];
    };
    '/accounts/{accountId}/statements': {
        /**
         * Get Account Statements
         * @description Returns the list of statements for an account.<br><br>Feature: `ACCOUNT_STATEMENTS`
         */
        get: operations['getStatements'];
    };
    '/accounts/{accountId}/statements/{statementId}': {
        /**
         * Get Account Statement
         * @description Returns a statement for an account.<br><br>Feature: `ACCOUNT_STATEMENT`
         */
        get: operations['getStatement'];
    };
    '/accounts/{accountId}/statements/{statementId}/file': {
        /**
         * Get Account Statement File
         * @description Returns a PDF file of a statement for an account.<br><br>Feature: `ACCOUNT_STATEMENT_FILE`
         */
        get: operations['getStatementFile'];
    };
    '/accounts/{accountId}/transactions': {
        /**
         * Get Account Transactions
         * @description Returns the account transactions for an account.<br><br>Feature: `ACCOUNT_TRANSACTIONS`
         */
        get: operations['getTransactions'];
    };
    '/bulk-payment-auth-requests': {
        /**
         * Create Bulk Payment Authorisation
         * @description Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_BULK_PAYMENT`
         */
        post: operations['createBulkPaymentAuthorisation'];
    };
    '/bulk-payments': {
        /**
         * Create Bulk Payment
         * @description Creates a bulk payment after obtaining the user's authorisation. <br><br>Feature: `CREATE_BULK_PAYMENT`
         */
        post: operations['createBulkPayment'];
    };
    '/categories/{country}': {
        /**
         * Get Categories
         * @description Used to retrieve the list of categories returned by the Yapily Categorisation engine for a given locale. <br><br>See [Data Enrichment](https://docs.yapily.com/pages/key-concepts/account-data/data-enrichment/intro-to-data-enrichment/) for more information.
         */
        get: operations['getCategories'];
    };
    '/consent-auth-code': {
        /**
         * Exchange OAuth2 Code
         * @description Used to obtain a Yapily Consent object containing the `consentToken` once the user has authenticated and you have an OAuth2 authorisation code `auth-code` and state `auth-state`.
         */
        post: operations['createConsentWithCode'];
    };
    '/consent-one-time-token': {
        /**
         * Exchange One Time Token
         * @description Exchange a One-time-token for the consent token
         */
        post: operations['getConsentBySingleAccessConsent'];
    };
    '/consents': {
        /**
         * Get Consents
         * @description Used to retrieve all the consents created for each user within an application
         */
        get: operations['getConsents'];
    };
    '/consents/{consentId}': {
        /**
         * Get Consent
         * @description Get consent using the consent Id
         */
        get: operations['getConsentById'];
        /**
         * Delete Consent
         * @description Delete a consent using the consent Id
         */
        delete: operations['delete'];
    };
    '/consents/{consentId}/extend': {
        /**
         * Extend Consent
         * @description Used to indicate to Yapily that reconfirmation has occurred for a given Consent, and to update lastUpdatedAt and reconfirmBy for that Consent. Returns the Consent.
         */
        post: operations['extendConsent'];
    };
    '/embedded-account-auth-requests': {
        /**
         * Create Embedded Account Authorisation
         * @description Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_ACCOUNT_REQUEST` feature in order to obtain the the user's authorisation to access their account information. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`
         */
        post: operations['initiateEmbeddedAccountRequest'];
    };
    '/embedded-account-auth-requests/{consentId}': {
        /**
         * Update Embedded Account Authorisation
         * @description Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to access the user's financial data. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`
         */
        put: operations['updateEmbeddedAccountRequest'];
    };
    '/embedded-bulk-payment-auth-requests': {
        /**
         * Create Embedded Bulk Payment Authorisation
         * @description Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_BULK_PAYMENT` feature in order to obtain the the user's authorisation for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`
         */
        post: operations['createEmbeddedBulkPaymentAuthorisation'];
    };
    '/embedded-bulk-payment-auth-requests/{consentId}': {
        /**
         * Update Embedded Bulk Payment Authorisation
         * @description Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`
         */
        put: operations['updateEmbeddedBulkPaymentAuthorisation'];
    };
    '/embedded-payment-auth-requests': {
        /**
         * Create Embedded Payment Authorisation
         * @description Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT` feature in order to obtain the the user's authorisation for a payment.<br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`
         */
        post: operations['createEmbeddedPaymentAuthorisation'];
    };
    '/embedded-payment-auth-requests/{consentId}': {
        /**
         * Update Embedded Payment Authorisation
         * @description Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a payment. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`
         */
        put: operations['updateEmbeddedPaymentAuthorisation'];
    };
    '/features': {
        /**
         * Get Features
         * @description Used to retrieve all features available from Yapily. Each `Institution` supports a one, many or all of these features and can be seen in the features field of the `Institution` object.<br><br>Note: Every `Institution` does not necessarily support every feature. To see which features are available for a particular Institution, use either the [Get Institutions](https://docs.yapily.com/api/reference/#operation/getInstitutions) or [Get Institution](https://docs.yapily.com/api/reference/#operation/getInstitution) endpoint and check the features array within the `Institution` payload.
         */
        get: operations['getFeatureDetails'];
    };
    '/identity': {
        /**
         * Get Identity
         * @description Returns the identity information for an account.<br><br>Feature: `IDENTITY`
         */
        get: operations['getIdentity'];
    };
    '/institutions': {
        /**
         * Get Institutions
         * @description Used to retrieve all `Institutions` within an application
         */
        get: operations['getInstitutions'];
    };
    '/institutions/{institutionId}': {
        /**
         * Get Institution
         * @description Used to retrieves details of a specific `Institution` within an application
         */
        get: operations['getInstitution'];
    };
    '/me': {
        /**
         * Get Application Self
         * @description Get the information about the institutions configured in your application
         */
        get: operations['getApplicationMe'];
    };
    '/payment-auth-requests': {
        /**
         * Update Payment Pre-authorisation
         * @description Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to initiate a payment. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`
         */
        put: operations['updatePaymentAuthorisation'];
        /**
         * Create Payment Authorisation
         * @description Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a payment. This endpoint is used to initiate all the different payment listed below. Based on the type of payment you wish to make, you may be required to provide specific properties in [PaymentRequest](https://docs.yapily.com/api/reference/#operation/createPaymentAuthorisation!path=paymentRequest&t=request). First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/reference/#operation/getInstitution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`INITIATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>
         */
        post: operations['createPaymentAuthorisation'];
    };
    '/payments': {
        /**
         * Create Payment
         * @description Creates a payment after obtaining the user's authorisation. <br><br>Features:<ul><li>`CREATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`CREATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`CREATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`CREATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`CREATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`CREATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`CREATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>
         */
        post: operations['createPayment'];
    };
    '/payments/{paymentId}/details': {
        /**
         * Get Payment Details
         * @description Returns the details of a payment. <br><br>Most commonly used to check for payment status updates. <br><br>Feature: `EXISTING_PAYMENTS_DETAILS`
         */
        get: operations['getPayments'];
    };
    '/pre-auth-requests': {
        /**
         * Create Pre-authorisation
         * @description Used to initiate the pre-authorisation process for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature to authenticate the user. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`
         */
        post: operations['createPreAuthorisationRequest'];
    };
    '/payment-pre-auth-requests': {
        /**
         * Create Payment Pre-authorisation
         * @description Used to initiate the pre-authorisation process for payments for CBI Globe institutions that contain the `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS` feature to authenticate the user. <br><br>Feature: `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS`
         */
        post: operations['createPaymentPreAuthorisationRequest'];
    };
    '/users': {
        /**
         * Get Users
         * @description Get all the users configured in your application
         */
        get: operations['getUsers'];
        /**
         * Create User
         * @description Create a new user in your application
         */
        post: operations['addUser'];
    };
    '/users/{userUuid}': {
        /**
         * Get User
         * @description Get a specific user using the user UUID
         */
        get: operations['getUser'];
        /**
         * Delete User
         * @description Delete a user from your application along with any sub-resources (including consent resources on institution APIs if they exist)
         */
        delete: operations['deleteUser'];
    };
    '/users/{userUuid}/profile/consents': {
        /**
         * Create Profile Consent
         * @description Used to add a consent to a `Financial Profile` for a `User`.  The response is asynchronous, returned with pending status, while retrieval of financial data is commenced.  There is a limit of 10,000 transactions for enrichment.
         */
        post: operations['createProfileConsent'];
    };
    '/users/{userUuid}/profile/consents/{profileConsentId}': {
        /**
         * Get Profile Consent
         * @description Used to retrieve a specific ProfileConsent for a User.
         */
        get: operations['getProfileConsent'];
        /**
         * Delete Profile Consent
         * @description Used to delete a `ProfileConsent` for a `User`. This will remove the consent and all associated financial data from the 'Financial Profile'.
         */
        delete: operations['deleteProfileConsent'];
    };
    '/users/{userUuid}/profile/transaction-groups': {
        /**
         * Get Transaction Groups
         * @description Used to retrieve a `TransactionGroups` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.
         */
        get: operations['getUserProfile'];
    };
    '/users/{userUuid}/profile/predicted-balances': {
        /**
         * Get Predicted Balances
         * @description Used to retrieve a `Balance Prediction Profile` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.
         */
        get: operations['getBalancePrediction'];
    };
    '/notifications/event-subscriptions': {
        /**
         * Get Event Subscriptions
         * @description Get all event subscriptions that your application is subscribed to
         */
        get: operations['getEventSubscriptions'];
        /**
         * Create Event Subscription
         * @description Used to subscribe to notifications relating to a specified event type.
         */
        post: operations['createEventSubscription'];
    };
    '/notifications/event-subscriptions/{eventTypeId}': {
        /**
         * Get Event Subscription
         * @description Used to get details of your subscription to a specified event type.
         */
        get: operations['getEventSubscriptionById'];
        /**
         * Delete Event Subscription
         * @description Used to unsubscribe to notifications relating to a specified event type.
         */
        delete: operations['deleteEventSubscriptionById'];
    };
    '/virtual-accounts/beneficiaries': {
        /**
         * Get List Of Beneficiaries
         * @description Gets the list of beneficiaries (individual or business account) to which a Pay Out can be made.
         */
        get: operations['getVirtualAccountBeneficiaries'];
        /**
         * Create Beneficiary
         * @description Create a new beneficiary (individual or business account) to which a Pay Out can be made. The beneficiary can be used from any virtual account that is held
         */
        post: operations['createVirtualAccountBeneficiary'];
    };
    '/virtual-accounts/beneficiaries/{beneficiaryId}': {
        /**
         * Get Beneficiary
         * @description Get the details of a specific beneficiary (individual or business account) to which a Pay Out can be made from its id.
         */
        get: operations['getVirtualAccountBeneficiary'];
        /**
         * Delete Beneficiary
         * @description Delete a specific beneficiary (individual or business account)
         */
        delete: operations['deleteVirtualAccountBeneficiary'];
    };
    '/virtual-accounts/accounts': {
        /**
         * Get Accounts
         * @description Retrieve a list of all virtual accounts held
         */
        get: operations['getVirtualAccounts'];
        /**
         * Create Account
         * @description Create a new virtual account
         */
        post: operations['createVirtualAccount'];
    };
    '/virtual-accounts/payments/pay-outs': {
        /**
         * Create Pay Out
         * @description Initiate a payment from a specified virtual account to a previously added beneficiary using any of the schemes that it supports <br> When subscribed to virtualAccount.payOut.status notifications, further updates on payment processing status will be delivered asynchronously
         */
        post: operations['createVirtualAccountPayOut'];
    };
    '/virtual-accounts/accounts/{accountId}': {
        /**
         * Get Account
         * @description Get the details of a specific account using its Id
         */
        get: operations['getVirtualAccountById'];
        /**
         * Update Account
         * @description Update the details of a specific account using its Id
         */
        patch: operations['updateVirtualAccountById'];
    };
    '/virtual-accounts/payments': {
        /**
         * Get Payments
         * @description Retrieve a list of virtual account payments
         */
        get: operations['getVirtualAccountPayments'];
    };
    '/virtual-accounts/payments/{id}': {
        /**
         * Get Payment
         * @description Get the details of a specific payment using its Id
         */
        get: operations['getPaymentsById'];
    };
    '/virtual-accounts/payments/transfers': {
        /**
         * Create Virtual Account Transfer
         * @description Create a transfer between two virtual accounts
         */
        post: operations['createVirtualAccountTransfer'];
    };
    '/virtual-accounts/payments/{paymentId}/pay-in-details': {
        /**
         * Get Pay-In Details
         * @description Get the details of a pay-in transaction
         */
        get: operations['getPayInDetails'];
    };
    '/virtual-accounts/clients': {
        /**
         * Get List of Virtual Account Clients
         * @description Get Virtual Account Clients (individual or business client).
         */
        get: operations['getVirtualAccountClients'];
        /**
         * Create Virtual Account Client
         * @description Create a new virtual account client (individual or business client). Available for clients who have direct onboarding permissions only. Please contact your CSM to enquire about access
         */
        post: operations['createVirtualAccountClient'];
    };
    '/virtual-accounts/refunds': {
        /**
         * Get list of refunds
         * @description Retrieve a list of refunds
         */
        get: operations['getVirtualAccountRefunds'];
        /**
         * Create Refund
         * @description Create a refund for a payment received into a virtual account. Funds are returned to the source account. When subscribed to `virtualAccount.refund.status` notifications, updates on the refund status are delivered asynchronously.
         */
        post: operations['createVirtualAccountRefund'];
    };
    '/virtual-accounts/refunds/{id}': {
        /**
         * Get Refund By Id
         * @description Get the details of a refund by its ID
         */
        get: operations['getVirtualAccountRefundById'];
    };
    '/virtual-accounts/clients/{clientId}': {
        /**
         * Get a Virtual Account Client by ID
         * @description Get a Virtual Account Client using its ID. Restricted to applications with direct onboarding permissions only
         */
        get: operations['getVirtualAccountClientById'];
    };
    '/variable-recurring-payments/sweeping/consents': {
        /**
         * Create Sweeping Variable Recurring Payment Authorisation
         * @description Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for Sweeping Variable Recurring Payments. The request would return an Authorization URL and an Identifier for the consent created at the Institution. First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/#get-institution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_SWEEPING`</li></ul>
         */
        post: operations['createSweepingAuthorisation'];
    };
    '/variable-recurring-payments/non-sweeping/consents': {
        /**
         * Create Non-Sweeping Variable Recurring Payment Authorisation
         * @description Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for Non-Sweeping Variable Recurring Payments. The request would return an Authorization URL and an Identifier for the consent created at the Institution. First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/#get-institution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_NONSWEEPING`</li></ul>
         */
        post: operations['createNonSweepingAuthorisation'];
    };
    '/variable-recurring-payments/payments': {
        /**
         * Create Variable Recurring Payment
         * @description Creates a Variable Recurring Payment transaction after obtaining the user's authorisation.<br><br>Features:<ul><li>`CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_SWEEPING`</li><li>`CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_NONSWEEPING`</li></ul>
         */
        post: operations['createVrpPayment'];
    };
    '/variable-recurring-payments/sweeping/consents/{consentId}': {
        /**
         * Get Sweeping Variable Recurring Payment Consent Details
         * @description Get Sweeping Variable Recurring Payments consent details using the consent Id
         */
        get: operations['getSweepingVrpConsentById'];
    };
    '/variable-recurring-payments/non-sweeping/consents/{consentId}': {
        /**
         * Get Non-Sweeping Variable Recurring Payment Consent Details
         * @description Get Non-Sweeping Variable Recurring Payments consent details using the consent Id
         */
        get: operations['getNonSweepingVrpConsentById'];
    };
    '/variable-recurring-payments/funds-confirmation': {
        /**
         * Confirm Funds for Variable Recurring Payment
         * @description Confirms whether there are available funds on the Payer account to execute a Variable Recurring Payment after obtaining the user's authorisation. <br><br>Features:<ul><li>`VARIABLE_RECURRING_PAYMENT_FUNDS_CONFIRMATION`</li></ul>
         */
        post: operations['createVrpFundsConfirmation'];
    };
    '/variable-recurring-payments/payments/{paymentId}/details': {
        /**
         * Get Variable Recurring Payment Details
         * @description Get Variable Recurring Payment details using the Payment Id
         */
        get: operations['getVrpPaymentDetails'];
    };
    '/accounts/{accountId}/real-time/transactions': {
        /**
         * Get Real Time Account Transactions
         * @description Used to get the account transactions for an account in real time with cursor pagination<br><br>Feature: `ACCOUNT_TRANSACTIONS`
         */
        get: operations['getRealTimeTransactions'];
    };
    '/hosted/payment-requests': {
        /**
         * Create Hosted payment request
         * @description Used to initiate a payment request using Yapily Hosted Pages.
         */
        post: operations['createHostedPaymentRequest'];
    };
    '/hosted/payment-requests/links': {
        /**
         * Create Pay By Link
         * @description Used to created a long lived payment request for Pay By Link
         */
        post: operations['createHostedPaymentRequestLink'];
    };
    '/hosted/payment-requests/{paymentRequestId}': {
        /**
         * Get Hosted payment request
         * @description Used to get details of a payment request
         */
        get: operations['getHostedPaymentRequest'];
    };
    '/institutions/constraints/payments': {
        /**
         * Get Payment Constraints Rules
         * @description Retrieve institution specific constraints for payment authorisation and submission requests
         */
        get: operations['getPaymentConstraintsRulesByInstitution'];
    };
    '/institutions/constraints/data': {
        /**
         * Get Data Constraints Rules
         * @description Get Data Constraints Rules against an Institution for Account Authorisation requests
         */
        get: operations['getAccountConstraintsRulesByInstitution'];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Account: {
            /** @description Unique identifier of the account. */
            id?: string;
            /** @description Specifies the type of account e.g. (BUSINESS_CURRENT). */
            type?: string;
            /** @description Product name as defined by the financial institution for this account */
            description?: string;
            /** @description Main / headline balance for the account. <br><br> Use of this field is recommended as fallback only. Instead, use of the typed balances (accountBalances) is recommended. */
            balance?: number;
            /** @description Currency the bank account balance is denoted in. <br><br> Specified as a 3-letter ISO 4217 currency code */
            currency?: string;
            usageType?: components['schemas']['UsageType'];
            accountType?: components['schemas']['AccountType'];
            /** @description Nickname of the account that was provided by the account owner. <br><br> May be used to aid identification of the account. */
            nickname?: string;
            /** @description Supplementary specifications that might be provided by the Bank. These provide further characteristics about the account. */
            details?: string;
            accountNames?: components['schemas']['AccountName'][];
            accountIdentifications?: components['schemas']['AccountIdentification'][];
            accountBalances?: components['schemas']['AccountBalance'][];
            consolidatedAccountInformation?: components['schemas']['ConsolidatedAccountInformation'];
        };
        AccountApiListResponse: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['Account'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            paging?: components['schemas']['FilteredClientPayloadListAccount'];
            tracingId?: string;
        };
        ApiResponseOfAccount: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['Account'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        AccountAuthorisationRequest: {
            /**
             * Format: uuid
             * @description `User` for which the authorisation request was created.
             */
            userUuid?: string;
            /**
             * @description __Conditional__. User-friendly identifier of the `User` that provides authorisation. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.
             * @example user-234562290
             */
            applicationUserId?: string;
            /** @description Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect. */
            forwardParameters?: string[];
            /**
             * @description __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
             * @example yapily-mock
             */
            institutionId: string;
            /**
             * @description __Optional__. The server to redirect the user to after the user completes the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-optional) for more information.
             * @example https://display-parameters.com
             */
            callback?: string;
            redirect?: components['schemas']['RedirectRequest'];
            /**
             * @description __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-with-an-ott-optional) for more information.
             * @example false
             */
            oneTimeToken?: boolean;
            accountRequest?: components['schemas']['AccountRequest'];
        };
        AccountBalance: {
            type?: components['schemas']['AccountBalanceType'];
            /**
             * Format: date-time
             * @description Date and time of the reported balance.
             */
            dateTime?: string;
            balanceAmount?: components['schemas']['Amount'];
            /** @description _Optional_. Indicates whether any credit lines are included in the balance. */
            creditLineIncluded?: boolean;
            /** @description _Optional_. Specifies the type of balance. */
            creditLines?: components['schemas']['CreditLine'][];
        };
        ExtendConsentRequest: {
            /**
             * Format: date-time
             * @description __Mandatory__. The time that the user confirmed access to their account information
             * @example 2022-08-16T10:59:53.288Z
             */
            lastConfirmedAt: string;
        };
        EmbeddedAccountAuthorisationRequest: {
            /**
             * Format: uuid
             * @description `User` for which the authorisation request was created.
             */
            userUuid?: string;
            /**
             * @description __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.
             * @example user-234562290
             */
            applicationUserId?: string;
            /** @description Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect. */
            forwardParameters?: string[];
            /**
             * @description __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
             * @example yapily-mock
             */
            institutionId: string;
            /**
             * @description __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/) for more information.
             * @example https://display-parameters.com
             */
            callback?: string;
            redirect?: components['schemas']['RedirectRequest'];
            /**
             * @description __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-with-an-ott-optional) for more information.
             * @example false
             */
            oneTimeToken?: boolean;
            userCredentials?: components['schemas']['UserCredentials'];
            selectedScaMethod?: components['schemas']['ScaMethod'];
            /**
             * @description __Conditional__. Used to update the authorisation with the sca code received by the user from the `Institution` using the embedded account authorisation flow.<br><br>This is the penultimate step required in the embedded account authorisation flow to authorise the `Consent`. After sending the sca code, to obtain an authorised consent, the last step is to poll [Get Consent](https://docs.yapily.com/api/reference/#operation/getConsentById) until the `Institution` authorises the request and the `Consent` `status` transitions to `AUTHORIZED`.
             * @example 325614
             */
            scaCode?: string;
            accountRequest?: components['schemas']['AccountRequest'];
        };
        /** Account Identifications */
        AccountIdentification: {
            type: components['schemas']['AccountIdentificationType'];
            /**
             * Account Identification
             * @description __Mandatory__. The value associated with the account identification type.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on the format of the values.
             * @example 401016
             */
            identification: string;
        };
        /** Account Identifications */
        AccountIdentificationResponse: {
            type?: components['schemas']['AccountIdentificationTypeResponse'];
            /**
             * Account Identification
             * @description The value associated with the account identification type.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/payments/payments-resources/intro-to-payment-execution/#account-identifications-combinations) for more information on the format of the values.
             * @example 401016
             */
            identification?: string;
        };
        /** @description __Conditional__. Used to create a request for the balance of the account specified. Once the user authorises the request, only the balance can be obtained by executing [GET Account Balances](./#get-account-balances).<br><br> This can be specified in conjunction with `accountIdentifiersForTransaction` to generate a `Consent` that can both access the accounts balance and transactions. */
        AccountInfo: {
            /**
             * @description __Conditional__. Unique identifier of the account.
             * @example 500000000000000000000001
             */
            accountId?: string;
            accountIdentification: components['schemas']['AccountIdentification'];
        };
        AccountName: {
            /** @description The bank account holder's name given by the account owner. */
            name?: string;
        };
        /** @description __Conditional__. Used to further specify details of the `Consent` to request <br><br>Conditions:<ol><li>Mandatory to specify the individual scopes to request from the user at the `Institution` for an account authorisation</li><li>Mandatory to specify an expiry time on the created `Consent` at which time will render it unusable</li><li>Mandatory to specify the date range that the created `Consent` will be able to access transactions for (given the range is support for the `Institution`)</li></ol> */
        AccountRequest: {
            /**
             * Format: date-time
             * @description __Optional__. Specifies the earliest date of the transaction records to be returned.<br><br> You must supply this field to retrieve transactions older than 90 days for banks accessed via the the [CBI Globe Gateway](https://docs.yapily.com/pages/data/financial-data-resources/data-restrictions/#cbi-globe-gateway).
             * @example 2020-01-01T00:00:00Z
             */
            transactionFrom?: string;
            /**
             * Format: date-time
             * @description __Optional__. Specifies the latest date of the transaction records to be returned.
             * @example 2021-01-01T00:00:00Z
             */
            transactionTo?: string;
            /**
             * Format: date-time
             * @description __Optional__. Used to set a hard date for when the user's associated `Consent` will expire.<br><br>**Note**: If this supported by the bank, specifying this is property is opting out of having a long-lived consent that can be perpetually re-authorised by the user. This will add an `expiresAt` field on the `Consent` object which will render it unusable after this date.<br><br>**Note**: This is not supported by every `Institution`. In such case, the request will not fail but the property will be ignored and the created `Consent` will not have an expiry date.
             * @example 2025-01-01T00:00:00Z
             */
            expiresAt?: string;
            accountIdentifiers?: components['schemas']['AccountInfo'];
            /** @description __Conditional__. Used to create a request for the transactions of the account specified. Once the user authorises the request, only the transactions can be obtained by executing [GET Account Transactions](./#get-account-transactions). <br><br>This can be specified in conjunction with `accountIdentifiersForBalance` to generate a `Consent` that can both access the accounts balance and transactions. */
            accountIdentifiersForTransaction?: components['schemas']['AccountInfo'][];
            /** @description __Conditional__. Used to create a request for the balance of the account specified. Once the user authorises the request, only the balance can be obtained by executing [GET Account Balances](./#get-account-balances).<br><br> This can be specified in conjunction with `accountIdentifiersForTransaction` to generate a `Consent` that can both access the accounts balance and transactions. */
            accountIdentifiersForBalance?: components['schemas']['AccountInfo'][];
            /** @description __Optional__. Used to granularly specify the set of features that the user will give their consent for when requesting access to their account information. Depending on the `Institution`, this may also populate a consent screen which list these scopes before the user authorises.<br><br>This endpoint accepts allow all [Financial Data Features](/guides/financial-data/features/#feature-list) that the `Institution` supports.To find out which scopes an `Institution` supports, check [GET Institution](./#get-institution). */
            featureScope?: components['schemas']['FeatureEnum'][];
        };
        /** @description Statement information belonging to the account. */
        AccountStatement: {
            /** @description Unique identifier for the statement. */
            id?: string;
            /**
             * Format: date-time
             * @description Date and time of when the statement period starts.
             */
            startDateTime?: string;
            /**
             * Format: date-time
             * @description Date and time of when the statement period ends.
             */
            endDateTime?: string;
            /**
             * Format: date-time
             * @description Date and time of when the statement was created.
             */
            creationDateTime?: string;
        };
        /**
         * @description Specifies the type of the stated account balance.
         * @enum {string}
         */
        AccountBalanceType: 'CLOSING_AVAILABLE' | 'CLOSING_BOOKED' | 'CLOSING_CLEARED' | 'EXPECTED' | 'FORWARD_AVAILABLE' | 'INFORMATION' | 'INTERIM_AVAILABLE' | 'INTERIM_BOOKED' | 'INTERIM_CLEARED' | 'OPENING_AVAILABLE' | 'OPENING_BOOKED' | 'OPENING_CLEARED' | 'PREVIOUSLY_CLOSED_BOOKED' | 'AUTHORISED' | 'OTHER' | 'UNKNOWN';
        /**
         * Account Identification Type
         * @description __Mandatory__. Used to describe the format of the account.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on when to specify each type.
         * @example SORT_CODE
         * @enum {string}
         */
        AccountIdentificationType: 'SORT_CODE' | 'ACCOUNT_NUMBER' | 'IBAN' | 'BBAN' | 'BIC' | 'PAN' | 'MASKED_PAN' | 'MSISDN' | 'BSB' | 'NCC' | 'ABA' | 'ABA_WIRE' | 'ABA_ACH' | 'EMAIL' | 'ROLL_NUMBER' | 'BLZ' | 'IFS' | 'CLABE' | 'CTN' | 'BRANCH_CODE' | 'VIRTUAL_ACCOUNT_ID';
        /**
         * Account Identification Type
         * @description Used to describe the format of the account.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information.
         * @example SORT_CODE
         * @enum {string}
         */
        AccountIdentificationTypeResponse: 'SORT_CODE' | 'ACCOUNT_NUMBER' | 'IBAN' | 'BBAN' | 'BIC' | 'PAN' | 'MASKED_PAN' | 'MSISDN' | 'BSB' | 'NCC' | 'ABA' | 'ABA_WIRE' | 'ABA_ACH' | 'EMAIL' | 'ROLL_NUMBER' | 'BLZ' | 'IFS' | 'CLABE' | 'CTN' | 'BRANCH_CODE' | 'VIRTUAL_ACCOUNT_ID';
        ApiResponseOfAccountStatement: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['AccountStatement'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        ApiListResponseOfAccountStatement: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['AccountStatement'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            paging?: components['schemas']['FilteredClientPayloadListAccountStatement'];
            tracingId?: string;
        };
        /**
         * @description The type of account e.g. (Credit Card, Savings).
         * @enum {string}
         */
        AccountType: 'CASH_TRADING' | 'CASH_INCOME' | 'CASH_PAYMENT' | 'CHARGE_CARD' | 'CHARGES' | 'COMMISSION' | 'CREDIT_CARD' | 'CURRENT' | 'E_MONEY' | 'LIMITED_LIQUIDITY_SAVINGS_ACCOUNT' | 'LOAN' | 'MARGINAL_LENDING' | 'MONEY_MARKET' | 'MORTGAGE' | 'NON_RESIDENT_EXTERNAL' | 'OTHER' | 'OVERDRAFT' | 'OVERNIGHT_DEPOSIT' | 'PREPAID_CARD' | 'SALARY' | 'SAVINGS' | 'SETTLEMENT' | 'TAX' | 'UNKNOWN';
        /**
         * Address Details
         * @description __Conditional__. The address of the `Payee` or `Payer`.<ul><li>`payee.address` is mandatory when the `paymentType` is an `INTERNATIONAL` payment</li><li>An `Institution` may require you to specify the `country` when used in the context of the `Payee` to be able to make a payment.</li></ul>
         * @example {
         *   "country": "GB"
         * }
         */
        Address: {
            /**
             * Address Lines
             * @description __Optional__. The address line of the address
             * @example [
             *   "Ardenham Court"
             * ]
             */
            addressLines?: string[];
            /**
             * Street
             * @description __Optional__. The street name of the address
             * @example Oxford Road
             */
            streetName?: string;
            /**
             * Building Number
             * @description __Optional__. The building number of the address
             * @example 45
             */
            buildingNumber?: string;
            /**
             * Post Code
             * @description __Optional__. The post code of the address
             * @example HP19 3EQ
             */
            postCode?: string;
            /**
             * Town
             * @description __Optional__. The town name of the address
             * @example Aylesbury
             */
            townName?: string;
            /**
             * County
             * @description __Optional__. The list of counties for the address
             * @example [
             *   "Buckinghamshire"
             * ]
             */
            county?: string[];
            /**
             * Country
             * @description __Conditional__. The 2-letter country code for the address. <br><br>An `Institution` may require you to specify the `country` when used in the context of the `Payee` to be able to make a payment
             * @example GB
             */
            country?: string;
            /**
             * Department
             * @description __Optional__. The department for the address
             * @example Unit 2
             */
            department?: string;
            /**
             * Sub-Department
             * @description __Optional__. The sub-department for the address
             * @example Floor 3
             */
            subDepartment?: string;
            addressType?: components['schemas']['AddressTypeEnum'];
        };
        /**
         * Address Details
         * @description The address of the `Payee` or `Payer`.
         * @example {
         *   "country": "GB"
         * }
         */
        AddressResponse: {
            /**
             * Address Lines
             * @description The address line of the address
             * @example [
             *   "Ardenham Court"
             * ]
             */
            addressLines?: string[];
            /**
             * Street
             * @description The street name of the address
             * @example Oxford Road
             */
            streetName?: string;
            /**
             * Building Number
             * @description The building number of the address
             * @example 45
             */
            buildingNumber?: string;
            /**
             * Post Code
             * @description The post code of the address
             * @example HP19 3EQ
             */
            postCode?: string;
            /**
             * Town
             * @description The town name of the address
             * @example Aylesbury
             */
            townName?: string;
            /**
             * County
             * @description The list of counties for the address
             * @example [
             *   "Buckinghamshire"
             * ]
             */
            county?: string[];
            /**
             * Country
             * @description The 2-letter country code for the address.
             * @example GB
             */
            country?: string;
            /**
             * Department
             * @description The department for the address
             * @example Unit 2
             */
            department?: string;
            /**
             * Sub-Department
             * @description The sub-department for the address
             * @example Floor 3
             */
            subDepartment?: string;
            addressType?: components['schemas']['AddressTypeEnumResponse'];
        };
        AddressDetails: {
            /** @description Information, in free format text, that identifies a specific address. */
            addressLine?: string;
        };
        /**
         * Address Type
         * @description __Optional__. The type of address
         * @enum {string}
         */
        AddressTypeEnum: 'BUSINESS' | 'CORRESPONDENCE' | 'DELIVERY_TO' | 'MAIL_TO' | 'PO_BOX' | 'POSTAL' | 'RESIDENTIAL' | 'STATEMENT' | 'UNKNOWN';
        /**
         * Address Type
         * @description The type of address
         * @enum {string}
         */
        AddressTypeEnumResponse: 'BUSINESS' | 'CORRESPONDENCE' | 'DELIVERY_TO' | 'MAIL_TO' | 'PO_BOX' | 'POSTAL' | 'RESIDENTIAL' | 'STATEMENT' | 'UNKNOWN';
        /**
         * Amount Details
         * @description __Mandatory__. Monetary Amount.
         */
        Amount: {
            /**
             * Amount
             * @description __Mandatory__. The monetary value
             * @example 10
             */
            amount: number;
            /**
             * Currency
             * @description __Mandatory__. The [ISO 4217](https://www.xe.com/iso4217.php) currency code
             * @example GBP
             */
            currency: string;
        };
        /**
         * Amount Details
         * @description Monetary Amount.
         */
        AmountDetailsResponse: {
            /**
             * Amount
             * @description The monetary value
             * @example 10
             */
            amount?: number;
            /**
             * Currency
             * @description The [ISO 4217](https://www.xe.com/iso4217.php) currency code
             * @example GBP
             */
            currency?: string;
        };
        ApiCall: Record<string, never>;
        /** @description Provides details of the error that has occurred. */
        ApiError: {
            /**
             * Format: int32
             * @description _Mandatory_. Numeric `HTTP` status code associated with the error.
             */
            code?: number;
            institutionError?: components['schemas']['InstitutionError'];
            /** @description __Mandatory__. Description of the exact error that has been experienced. */
            message?: string;
            source?: string;
            /** @description __Mandatory__. Textual description of the `HTTP` error status type. */
            status?: string;
            /** @description _Optional_.  A unique identifier assigned by Yapily for the request that can be used for support purposes. */
            tracingId?: string;
        };
        /**
         * @description Used to return errors from the bank from each request<ul><li>`400` - Returned by any `POST` endpoint when the body does not conform to the contract</li><li>`401` - Returned by any endpoint when an invalid `authToken` is used for authentication</li><li>`403` - Returned by any [Financial Data](https://docs.yapily.com/api/reference/#tag/Financial-Data) and any [Payments](https://docs.yapily.com/api/reference/#tag/Payments) endpoint when the `Consent` is no longer authorised to access financial data or to make a payment</li><li>`404` - Returned by any endpoint where there are path parameters and the path parameters supplied are unable to find the desired resource</li><li>`409` - Returned by any `POST` endpoint when creating a resource that conflicts with any other existing resource e.g. [Create User](https://docs.yapily.com/api/reference/#operation/addUser)</li><li>`424` - Returned by any [Financial Data](https://docs.yapily.com/api/reference/#tag/Financial-Data) and any [Payments](https://docs.yapily.com/api/reference/#tag/Payments) endpoint when the feature to be accessed is not supported by the `Institution`.</li><li>`500` - Returned by any endpoint when Yapily is down. If you encounter any false positives, please <a href="mailto:support@yapily.com">notify us</a></li></ul>
         * @example {
         *   "error": {
         *     "tracingId": "74b13ce8ed51419f92c5d609e04532de",
         *     "code": 424,
         *     "institutionError": {
         *       "errorMessage": "{\"Code\":\"500 Internal Server Error\",\"Id\":\"5ff8d331-4282-41e0-b5ef-1ac9ac39f009\",\"Message\":\"Technical Error. Please try again later\",\"Errors\":[{\"ErrorCode\":\"UK.OBIE.UnexpectedError\",\"Message\":\"There was a problem processing your request. Please try again later\"}]}",
         *       "httpStatusCode": 500
         *     },
         *     "source": "INSTITUTION",
         *     "status": "FAILED_DEPENDENCY"
         *   },
         *   "monitoring": []
         * }
         */
        ApiResponseError: {
            error?: components['schemas']['ApiError'];
            monitoring?: components['schemas']['MonitoringEndpointStatus'][];
            raw?: components['schemas']['RawResponse'][];
        };
        /**
         * @description Used to return errors from the bank from each request<ul><li>`400` - Returned by any `POST` endpoint when the body does not conform to the contract</li><li>`401` - Returned by any endpoint when an invalid `authToken` is used for authentication</li><li>`403` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the `Consent` is no longer authorised to access financial data or to make a payment</li><li>`404` - Returned by any endpoint where there are path parameters and the path parameters supplied are unable to find the desired resource</li><li>`409` - Returned by any `POST` endpoint when creating a resource that conflicts with any other existing resource e.g. [Create User](https://docs.yapily.com/api/#create-user)</li><li>`424` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the feature to be accessed is not supported by the `Institution`.</li><li>`500` - Returned by any endpoint when Yapily is down. If you encounter any false positives, please <a href="mailto:support@yapily.com">notify us</a></li></ul>
         * @example {
         *   "error": {
         *     "tracingId": "0c2d0973bdd24224a65e5d0f7d1b6154",
         *     "code": 400,
         *     "status": "BAD_REQUEST",
         *     "supportUrl": "https://support.yapily.com/",
         *     "source": "YAPILY",
         *     "issues": [
         *       {
         *         "type": "INVALID_REQUEST",
         *         "code": "INVALID_PROPERTY_UNEXPECTED_VALUE",
         *         "parameter": "$.payer.accountidentifications.type",
         *         "message": "Type Should be one of [PAN, SORT_CODE, ACCOUNT_NUMBER]",
         *         "institutionError": {
         *           "errorMessage": "{\"Code\":\"400 BadRequest\",\"Id\":\"3517bfc2-c3ee-4f2f-b4f8-12f62478e0d1\",\"Message\":\"No Resource found\",\"Errors\":[{\"ErrorCode\":\"UK.OBIE.Resource.NotFound\",\"Message\":\"No resource found corresponding to the consent id\"}]}",
         *           "httpStatusCode": 400
         *         }
         *       }
         *     ]
         *   },
         *   "monitoring": []
         * }
         */
        ApiErrorResponse: {
            error?: components['schemas']['ErrorDetails'];
            monitoring?: components['schemas']['MonitoringEndpointStatus'][];
        };
        /**
         * @description Used to return errors from the bank from each request<ul><li>`400` - Returned by any `POST` endpoint when the body does not conform to the contract</li><li>`401` - Returned by any endpoint when an invalid `authToken` is used for authentication</li><li>`403` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the `Consent` is no longer authorised to access financial data or to make a payment</li><li>`404` - Returned by any endpoint where there are path parameters and the path parameters supplied are unable to find the desired resource</li><li>`409` - Returned by any `POST` endpoint when creating a resource that conflicts with any other existing resource e.g. [Create User](https://docs.yapily.com/api/#create-user)</li><li>`424` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the feature to be accessed is not supported by the `Institution`.</li><li>`500` - Returned by any endpoint when Yapily is down. If you encounter any false positives, please <a href="mailto:support@yapily.com">notify us</a></li></ul>
         * @example {
         *   "error": {
         *     "code": 401,
         *     "status": "UNAUTHORIZED"
         *   },
         *   "monitoring": []
         * }
         */
        '401VirtualAccountsApiErrorResponse': {
            error?: components['schemas']['ErrorDetails'];
            monitoring?: components['schemas']['MonitoringEndpointStatus'][];
        };
        /**
         * @description Used to return errors from the bank from each request<ul><li>`400` - Returned by any `POST` endpoint when the body does not conform to the contract</li><li>`401` - Returned by any endpoint when an invalid `authToken` is used for authentication</li><li>`403` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the `Consent` is no longer authorised to access financial data or to make a payment</li><li>`404` - Returned by any endpoint where there are path parameters and the path parameters supplied are unable to find the desired resource</li><li>`409` - Returned by any `POST` endpoint when creating a resource that conflicts with any other existing resource e.g. [Create User](https://docs.yapily.com/api/#create-user)</li><li>`424` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the feature to be accessed is not supported by the `Institution`.</li><li>`500` - Returned by any endpoint when Yapily is down. If you encounter any false positives, please <a href="mailto:support@yapily.com">notify us</a></li></ul>
         * @example {
         *   "error": {
         *     "code": 403,
         *     "status": "FORBIDDEN",
         *     "supportUrl": "https://support.yapily.com/",
         *     "source": "USER",
         *     "issues": [
         *       {
         *         "type": "INVALID_REQUEST",
         *         "code": "Yapily.gateway.api.scope.required",
         *         "message": "You don't have the right scope to access this resource"
         *       }
         *     ]
         *   },
         *   "monitoring": []
         * }
         */
        '403VirtualAccountsApiErrorResponse': {
            error?: components['schemas']['ErrorDetails'];
            monitoring?: components['schemas']['MonitoringEndpointStatus'][];
        };
        /**
         * @description Used to return errors from the bank from each request<ul><li>`400` - Returned by any `POST` endpoint when the body does not conform to the contract</li><li>`401` - Returned by any endpoint when an invalid `authToken` is used for authentication</li><li>`403` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the `Consent` is no longer authorised to access financial data or to make a payment</li><li>`404` - Returned by any endpoint where there are path parameters and the path parameters supplied are unable to find the desired resource</li><li>`409` - Returned by any `POST` endpoint when creating a resource that conflicts with any other existing resource e.g. [Create User](https://docs.yapily.com/api/#create-user)</li><li>`424` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the feature to be accessed is not supported by the `Institution`.</li><li>`500` - Returned by any endpoint when Yapily is down. If you encounter any false positives, please <a href="mailto:support@yapily.com">notify us</a></li></ul>
         * @example {
         *   "error": {
         *     "tracingId": "1e982b70f5f44a8383df1e1dc3f8ebf7",
         *     "code": 404,
         *     "status": "NOT_FOUND",
         *     "supportUrl": "https://support.yapily.com/",
         *     "source": "CLIENT",
         *     "issues": [
         *       {
         *         "type": "INVALID_REQUEST",
         *         "code": "yapily.generic.error",
         *         "message": "404 NOT_FOUND"
         *       }
         *     ]
         *   },
         *   "monitoring": []
         * }
         */
        '404VirtualAccountsApiErrorResponse': {
            error?: components['schemas']['ErrorDetails'];
            monitoring?: components['schemas']['MonitoringEndpointStatus'][];
        };
        /**
         * @description Used to return errors from the bank from each request<ul><li>`400` - Returned by any `POST` endpoint when the body does not conform to the contract</li><li>`401` - Returned by any endpoint when an invalid `authToken` is used for authentication</li><li>`403` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the `Consent` is no longer authorised to access financial data or to make a payment</li><li>`404` - Returned by any endpoint where there are path parameters and the path parameters supplied are unable to find the desired resource</li><li>`409` - Returned by any `POST` endpoint when creating a resource that conflicts with any other existing resource e.g. [Create User](https://docs.yapily.com/api/#create-user)</li><li>`424` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the feature to be accessed is not supported by the `Institution`.</li><li>`500` - Returned by any endpoint when Yapily is down. If you encounter any false positives, please <a href="mailto:support@yapily.com">notify us</a></li></ul>
         * @example {
         *   "error": {
         *     "tracingId": "553f33e10469443788cd366618b1ef78",
         *     "code": 424,
         *     "status": "FAILED_DEPENDENCY",
         *     "supportUrl": "https://support.yapily.com/",
         *     "source": "INSTITUTION",
         *     "issues": [
         *       {
         *         "type": "INVALID_REQUEST",
         *         "code": "FAILED_THIRD_PARTY_DEPENDENCY",
         *         "message": "A request to a third party provider failed. Error message: [null] Error code: [INVALID_BANK_BENEFICIARY]"
         *       }
         *     ]
         *   },
         *   "monitoring": []
         * }
         */
        '424VirtualAccountsApiErrorResponse': {
            error?: components['schemas']['ErrorDetails'];
            monitoring?: components['schemas']['MonitoringEndpointStatus'][];
        };
        /**
         * @description Used to return errors from the bank from each request<ul><li>`400` - Returned by any `POST` endpoint when the body does not conform to the contract</li><li>`401` - Returned by any endpoint when an invalid `authToken` is used for authentication</li><li>`403` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the `Consent` is no longer authorised to access financial data or to make a payment</li><li>`404` - Returned by any endpoint where there are path parameters and the path parameters supplied are unable to find the desired resource</li><li>`409` - Returned by any `POST` endpoint when creating a resource that conflicts with any other existing resource e.g. [Create User](https://docs.yapily.com/api/#create-user)</li><li>`424` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the feature to be accessed is not supported by the `Institution`.</li><li>`500` - Returned by any endpoint when Yapily is down. If you encounter any false positives, please <a href="mailto:support@yapily.com">notify us</a></li></ul>
         * @example {
         *   "error": {
         *     "tracingId": "55abe4b0cf2642fface78876d2547f91",
         *     "code": 500,
         *     "status": "INTERNAL_SERVER_ERROR",
         *     "supportUrl": "https://support.yapily.com/",
         *     "source": "YAPILY",
         *     "issues": []
         *   },
         *   "monitoring": []
         * }
         */
        '500VirtualAccountsApiErrorResponse': {
            error?: components['schemas']['ErrorDetails'];
            monitoring?: components['schemas']['MonitoringEndpointStatus'][];
        };
        /** @description Information about the application. */
        Application: {
            /**
             * Format: uuid
             * @description Unique identification for the `Application` as assigned by Yapily.
             */
            uuid?: string;
            /** @description The individual name of the `Application`. */
            name?: string;
            /** @description States whether an `Application` is active. */
            active?: boolean;
            authCallbacks?: string[];
            institutions?: components['schemas']['Institution'][];
            media?: components['schemas']['Media'][];
            /**
             * Format: date-time
             * @description Date and time of when the application was created.
             */
            created?: string;
            /**
             * Format: date-time
             * @description Date and time of when the application was last updated.
             */
            updated?: string;
        };
        /** @description Information about a user of an application. */
        ApplicationUser: {
            /**
             * Format: uuid
             * @description A unique identifier for the 'User' assigned by Yapily.
             */
            uuid?: string;
            /**
             * Format: uuid
             * @description Unique identifier of the application the user is associated with.
             */
            applicationUuid?: string;
            /** @description __Conditional__. The user-friendly reference to the `User`. */
            applicationUserId?: string;
            referenceId?: string;
            /**
             * Format: date-time
             * @description Date and time of when the user was created.
             */
            createdAt?: string;
            institutionConsents?: components['schemas']['InstitutionConsent'][];
        };
        EmbeddedAccountAuthorisationResponse: {
            /**
             * Format: uuid
             * @description Unique identifier for the embedded account authorisation request.
             */
            id?: string;
            /**
             * Format: uuid
             * @description The `User` that the authorisation request was created for.
             */
            userUuid?: string;
            /** @description The user-friendly reference to the `User` that the authorisation request was created for. */
            applicationUserId?: string;
            referenceId?: string;
            /** @description The `Institution` the authorisation request was sent to. */
            institutionId?: string;
            status?: components['schemas']['AuthorisationStatus'];
            /**
             * Format: date-time
             * @description Date and time the embedded authorisation was created by the application user.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the earliest date of transaction records that can be retrieved.
             */
            transactionFrom?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the latest date of transaction records that can be retrieved.
             */
            transactionTo?: string;
            /**
             * Format: date-time
             * @description Date and time the embedded authorisation expires. Re-authorisation is needed to retain access.
             */
            expiresAt?: string;
            /**
             * Format: int64
             * @deprecated
             */
            timeToExpireInMillis?: number;
            /** Format: iso8601 */
            timeToExpire?: string;
            /** @description The set of features the consent provides access to. */
            featureScope?: components['schemas']['FeatureEnum'][];
            /** @description Represents the authorisation to gain access to the requested features. Required to access account information. */
            consentToken?: string;
            /** @description Correlation ID used when handshaking with a new institution via OAuth2 registration. */
            state?: string;
            /**
             * Format: date-time
             * @description Date and time the request was authorised by the `Institution`.
             */
            authorizedAt?: string;
            /** @description Identification of the consent at the `Institution`. */
            institutionConsentId?: string;
            authorisationUrl?: string;
            /** @description The URL link for the QR code that may be scanned via a mobile device to make an authorisation redirect to the bank (authURL encoded). */
            qrCodeUrl?: string;
            /** @description List of `SCA methods` that the `Institution` supports and are available for selection. */
            scaMethods?: components['schemas']['ScaMethod'][];
            selectedScaMethod?: components['schemas']['ScaMethod'];
        };
        ApiResponseOfEmbeddedAccountAuthorisationResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['EmbeddedAccountAuthorisationResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        AccountAuthorisationResponse: {
            /**
             * Format: uuid
             * @description Unique identifier for the account authorisation request.<br><br>The `consentID` used to [retrieve a consent](/api/reference/#operation/getConsentById).
             */
            id?: string;
            /**
             * Format: uuid
             * @description The `User` that the authorisation request was created for.
             */
            userUuid?: string;
            /** @description The user-friendly reference to the `User` that the authorisation request was created for. */
            applicationUserId?: string;
            referenceId?: string;
            /** @description The `Institution` the authorisation request was sent to. */
            institutionId?: string;
            status?: components['schemas']['AuthorisationStatus'];
            /**
             * Format: date-time
             * @description Date and time the consent was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the earliest date of transaction records that can be retrieved.
             */
            transactionFrom?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the latest date of transaction records that can be retrieved.
             */
            transactionTo?: string;
            /**
             * Format: date-time
             * @description Date and time the authorisation expires. Re-authorisation is needed to retain access.
             */
            expiresAt?: string;
            /**
             * Format: int64
             * @deprecated
             */
            timeToExpireInMillis?: number;
            /** Format: iso8601 */
            timeToExpire?: string;
            /** @description The set of features the consent provides access to. */
            featureScope?: components['schemas']['FeatureEnum'][];
            /** @description Represents the authorisation to gain access to the requested features. Required to access account information. */
            consentToken?: string;
            /** @description Correlation ID used with the `Institution` during the authorisation process. */
            state?: string;
            /**
             * Format: date-time
             * @description Date and time the request was authorised by the `Institution`.
             */
            authorizedAt?: string;
            /**
             * Format: date-time
             * @description The time the PSU last confirmed access to their account information, either through full authentication with the institution, or through reconfirmation with the TPP.
             */
            lastConfirmedAt?: string;
            /**
             * Format: date-time
             * @description The date and time the consent must be reconfirmed by to ensure continued access to the account information.
             */
            reconfirmBy?: string;
            /** @description Unique identifier of the consent assigned by the `Institution`. */
            institutionConsentId?: string;
            authorisationUrl?: string;
            /** @description The URL link for the QR code that may be scanned via a mobile device to make an authorisation redirect to the bank (authURL encoded). */
            qrCodeUrl?: string;
        };
        /**
         * @description Current status of the embedded authorisation request in code form.
         * @enum {string}
         */
        AuthorisationStatus: 'AWAITING_AUTHORIZATION' | 'AWAITING_FURTHER_AUTHORIZATION' | 'AWAITING_RE_AUTHORIZATION' | 'AUTHORIZED' | 'CONSUMED' | 'REJECTED' | 'REVOKED' | 'FAILED' | 'EXPIRED' | 'UNKNOWN' | 'INVALID' | 'AWAITING_DECOUPLED_PRE_AUTHORIZATION' | 'AWAITING_PRE_AUTHORIZATION' | 'PRE_AUTHORIZED' | 'AWAITING_DECOUPLED_AUTHORIZATION' | 'AWAITING_SCA_METHOD' | 'AWAITING_SCA_CODE';
        ApiResponseOfAccountAuthorisationResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['AccountAuthorisationResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        TransactionBalance: {
            type?: components['schemas']['AccountBalanceType'];
            balanceAmount?: components['schemas']['Amount'];
        };
        Balances: {
            mainBalanceAmount?: components['schemas']['Amount'];
            balances?: components['schemas']['AccountBalance'][];
        };
        ApiResponseOfBalances: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['Balances'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        /** @description Account information belonging to the target beneficiary (person/ business). */
        Beneficiary: {
            /** @description Unique identifier of the `beneficiary`. */
            id?: string;
            /** @description A creditor reference that is requested to be used for all payment instructions to this beneficiary. */
            reference?: string;
            payee?: components['schemas']['BeneficiaryPayee'];
            /** @description Indicates whether the account owner has stated that this beneficiary should be trusted. This often results in reduced authentication and authorisation requirements on payments to the beneficiary. */
            trusted?: boolean;
        };
        /** @description __Mandatory__. Account details belonging to the `Beneficiary Payee` (person/ business). You must define this in your payment request along with all of the nested mandatory properties. */
        BeneficiaryPayee: {
            /**
             * @description The account holder name of the beneficiary.
             * @example Jane Doe
             */
            name?: string;
            /**
             * @description __Mandatory__. The account identifications that identify the `BeneficiaryPayee` bank account.
             * @example [
             *   {
             *     "identification": "401016",
             *     "type": "SORT_CODE"
             *   },
             *   {
             *     "identification": "71518920",
             *     "type": "ACCOUNT_NUMBER"
             *   }
             * ]
             */
            accountIdentifications: components['schemas']['AccountIdentification'][];
            address?: components['schemas']['Address'];
        };
        ApiListResponseOfBeneficiary: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['Beneficiary'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        BulkPaymentAuthorisationRequest: {
            /**
             * Format: uuid
             * @description __Conditional__. The reference to the `User` that will authorise the authorisation request using the Yapily generated UUID. Either the `userUuid` or `applicationUserId` must be provided.
             * @example e006a012-c306-4355-a6a1-99bf69ae5171
             */
            userUuid?: string;
            /**
             * @description __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.
             * @example user-234562290
             */
            applicationUserId?: string;
            /** @description Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect. */
            forwardParameters?: string[];
            /**
             * @description __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
             * @example yapily-mock
             */
            institutionId: string;
            /**
             * @description __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-optional) for more information.
             * @example https://display-parameters.com
             */
            callback?: string;
            redirect?: components['schemas']['RedirectRequest'];
            /**
             * @description __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-with-an-ott-optional) for more information.
             * @example false
             */
            oneTimeToken?: boolean;
            paymentRequest?: components['schemas']['BulkPaymentRequest'];
        };
        /** @description The request body containing a `BulkPaymentEmbeddedAuthorisationRequest` json payload */
        BulkPaymentEmbeddedAuthorisationRequest: {
            /**
             * Format: uuid
             * @description __Conditional__. The reference to the `User` that will authorise the authorisation request using the Yapily generated UUID. Either the `userUuid` or `applicationUserId` must be provided.
             * @example e006a012-c306-4355-a6a1-99bf69ae5171
             */
            userUuid?: string;
            /**
             * @description __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.
             * @example user-234562290
             */
            applicationUserId?: string;
            /**
             * @description __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
             * @example yapily-mock
             */
            institutionId: string;
            /**
             * @description __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-optional) for more information.
             * @example https://display-parameters.com
             */
            callback?: string;
            redirect?: components['schemas']['RedirectRequest'];
            /**
             * @description __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-with-an-ott-optional) for more information.
             * @example false
             */
            oneTimeToken?: boolean;
            paymentRequest?: components['schemas']['BulkPaymentRequest'];
            userCredentials?: components['schemas']['UserCredentials'];
            selectedScaMethod?: components['schemas']['ScaMethod'];
            /**
             * @description __Conditional__. Used to update the authorisation with the sca code received by the user from the `Institution` using the embedded payment authorisation flow.<br><br>This is the penultimate step required in the embedded payment authorisation flow to authorise the `Consent`. After sending the sca code, to obtain an authorised consent, the last step is to poll [Get Consent](https://docs.yapily.com/api/reference/#operation/getConsentById) until the `Institution` authorises the request and the `Consent` `status` transitions to `AUTHORIZED`.
             * @example 325614
             */
            scaCode?: string;
        };
        /** @description The payment request object defining the details of the bulk payment */
        BulkPaymentRequest: {
            /** @description __Mandatory__. The array of `PaymentRequest` objects to initiate in the bulk payment. */
            payments: components['schemas']['PaymentRequest'][];
            /** @description __Conditional__. The identification number of the originator.<ul><li>Mandatory for AIB bulk payments</li></ul> */
            originatorIdentificationNumber?: string;
            /**
             * Format: date-time
             * @description __Optional__. Used to schedule the bulk payment to be executed at a future date if supported by the `Institution`.
             */
            executionDateTime?: string;
        };
        /** @description Income and Expense categorisation that the Yapily categorisation engine has determined for the transaction. */
        Categorisation: {
            categories?: string[];
            source?: string;
        };
        /** @description Income and Expense `Category` in which the transaction resides. */
        Category: {
            /**
             * Format: uuid
             * @description Unique identifier of the category
             */
            id?: string;
            /** @description Descriptive identifier of the category. */
            label?: string;
            /** @description The country code of where the category transaction took place, denoted as a 3-digit character code - ISO 3166. */
            country?: string;
            subcategories?: components['schemas']['Subcategory'][];
        };
        ApiListResponseOfCategory: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['Category'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            paging?: components['schemas']['FilteredClientPayloadListCategory'];
            tracingId?: string;
        };
        /**
         * @description __Optional__. Specifies which party/parties will bear the charges associated with the processing of the payment transaction. Valid values are:<ul><li>`DEBT` - All transaction charges are to be borne by the debtor.</li><li>`CRED` - All transaction charges are to be borne by the creditor.</li><li>`SHAR` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor</li><li>`SLEV` - Charges are to be applied following the rules agreed in the service level and/or scheme.</li></ul>
         * @enum {string}
         */
        ChargeBearerType: 'DEBT' | 'CRED' | 'SHAR' | 'SLEV';
        /** @description Details the charges that will apply to the payment. */
        PaymentChargeDetails: {
            chargeAmount?: components['schemas']['Amount'];
            /** @description __Mandatory__. Specifies the nature of the transaction charge e.g. (Bank transfer fees). */
            chargeType?: string;
            /** @description __Mandatory__. States which party of the payment bears the charges. */
            chargeTo?: string;
        };
        /** @description Consent detailing the requested authorisation from a user to a specific `Institution`. */
        Consent: {
            /**
             * Format: uuid
             * @description Unique identifier of the consent.
             */
            id?: string;
            /** Format: uuid */
            userUuid?: string;
            /** @description __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided. */
            applicationUserId?: string;
            referenceId?: string;
            /** @description __Mandatory__. The `Institution` the authorisation request is sent to. */
            institutionId?: string;
            status?: components['schemas']['AuthorisationStatus'];
            /**
             * Format: date-time
             * @description Date and time of when the consent was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the earliest date of transaction records that can be retrieved.
             */
            transactionFrom?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the latest date of transaction records that can be retrieved.
             */
            transactionTo?: string;
            /**
             * Format: date-time
             * @description Date and time of when the authorisation will expire by. Reauthorisation will be needed to retain access.
             */
            expiresAt?: string;
            /**
             * Format: int64
             * @deprecated
             */
            timeToExpireInMillis?: number;
            /** Format: iso8601 */
            timeToExpire?: string;
            /** @description The set of features that the consent will provide access to. */
            featureScope?: components['schemas']['FeatureEnum'][];
            /** @description Represents the authorisation to gain access to the requested features. Required to access account information or make a payment request. */
            consentToken?: string;
            /** @description Correlation ID used with the `Institution` during the authorisation process. */
            state?: string;
            /**
             * Format: date-time
             * @description Date and time of when the request was authorised by the Institution.
             */
            authorizedAt?: string;
            /**
             * Format: date-time
             * @description The time that the PSU last confirmed access to their account information, either through full authentication with the institution, or through reconfirmation with the TPP.
             */
            lastConfirmedAt?: string;
            /**
             * Format: date-time
             * @description The time by which the consent should be reconfirmed to ensure continued access to the account information.
             */
            reconfirmBy?: string;
            /** @description Identification of the consent at the Institution. */
            institutionConsentId?: string;
        };
        ApiListResponseOfConsent: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['Consent'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            paging?: components['schemas']['FilteredClientPayloadListConsent'];
            tracingId?: string;
        };
        ApiResponseOfConsent: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['Consent'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        /** @description The request body containing the `ConsentAuthCodeRequest` json payload */
        ConsentAuthCodeRequest: {
            /**
             * @description __Mandatory__. The authorisation code
             * @example 6b965fbb-ff09-4afa-b897-90c34797cb8f
             */
            authCode: string;
            /**
             * @description __Mandatory__. The authorisation state
             * @example 1270cb2ffc4842b78953afa2228e0a87
             */
            authState: string;
        };
        ConsentDeleteResponse: {
            /**
             * Format: uuid
             * @description __Conditional__. User-friendly identifier of the `User` that provides authorisation. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.
             */
            id?: string;
            deleteStatus?: components['schemas']['DeleteStatusEnum'];
            /** @description __Mandatory__. The `Institution` the authorisation request is sent to. */
            institutionId?: string;
            /** @description Identification of the consent at the Institution. */
            institutionConsentId?: string;
            /**
             * Format: date-time
             * @description Date and time of when the consent was authorised.
             */
            creationDate?: string;
        };
        /** @description Summary information regarding account balances of the overall account provided by the bank */
        ConsolidatedAccountInformation: {
            /** @description Identifier of the consolidated account. When used in Get Account Transactions calls, the transactions between the sub-accounts will not be reported */
            id?: string;
            accountBalances?: components['schemas']['AccountBalance'][];
        };
        ApiResponseOfConsentDeleteResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['ConsentDeleteResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        /** @description An array of `Country` denoting which regions the `Institution` provides coverage for */
        Country: {
            /** @description Country name. */
            displayName?: string;
            /** @description Two character ISO 3166 country code. */
            countryCode2?: string;
        };
        /**
         * @description The type of credentials required to register the `Institution`
         * @enum {string}
         */
        CredentialsType: 'OAUTH1' | 'OAUTH2' | 'OAUTH2_NOSECRET' | 'OAUTH2_SIGNATURE' | 'OPEN_BANKING_UK_MANUAL' | 'OPEN_BANKING_UK_AUTO' | 'OPEN_BANKING_IBM' | 'OPEN_BANKING_AUTO' | 'OPEN_BANKING_AUTO_EMAIL' | 'OPEN_BANKING_MANUAL' | 'OPEN_BANKING_WITH_TPP_ID_AND_SECRET' | 'API_KEY' | 'OPEN_BANKING_NO_KEY' | 'OPEN_BANKING_NO_TRANSPORT' | 'TOKEN_IO';
        /** @description __Mandatory__. Details whether the account has access to a credit line from an `Institution`. */
        CreditLine: {
            type?: components['schemas']['CreditLineType'];
            creditLineAmount?: components['schemas']['Amount'];
        };
        /**
         * @description __Mandatory__. The type of credit that has been provided.
         * @enum {string}
         */
        CreditLineType: 'AVAILABLE' | 'CREDIT' | 'EMERGENCY' | 'PRE_AGREED' | 'TEMPORARY' | 'OTHER' | 'UNKNOWN';
        /** @description Provides details on the currrency exchange. */
        CurrencyExchange: {
            /** @description Currency from which an amount is to be converted. */
            sourceCurrency?: string;
            /** @description Currency to which an amount is to be converted. */
            targetCurrency?: string;
            /** @description The currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP. */
            unitCurrency?: string;
            /** @description The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency. */
            exchangeRate?: number;
        };
        /**
         * @description Indicates the outcome of the delete request.
         * @enum {string}
         */
        DeleteStatusEnum: 'SUCCESS' | 'FAILED';
        DirectDebitResponse: {
            id?: string;
            statusDetails?: components['schemas']['PaymentStatusDetails'];
            payeeDetails?: components['schemas']['DirectDebitPayee'];
            reference?: string;
            previousPaymentAmount?: components['schemas']['Amount'];
            /** Format: date-time */
            previousPaymentDateTime?: string;
        };
        DirectDebitPayee: {
            /**
             * @description __Mandatory__. The account holder name.
             * @example Tempus Risus Company
             */
            name?: string;
        };
        /** @description Details of the transaction, identified by Yapily data services. */
        EnrichedTransaction: {
            /**
             * @description Unique identifier of the transaction
             * @example c51e3bee-36fb-4c0a-8441-d6ba2056fe87
             */
            transactionId?: string;
            /**
             * @description Information for the transaction
             * @example Amazon Marketplace
             */
            transactionInformation?: string;
            /**
             * @description Monetary amount.
             * @example 21.99
             */
            amount?: number;
            /**
             * @description The `Institution` that the transaction is sent to.
             * @example starling
             */
            institution?: string;
            /**
             * Format: date-time
             * @description Date and time of when a transaction entry occured and was posted to the account servicer's books.
             * @example 2020-04-24T00:30:19.951Z
             */
            bookingDateTime?: string;
        };
        /** @description Details of income and expenditure streams, identified by Yapily data services. */
        EnrichedWrapper: {
            /** @description Lists all possible income streams identified for the `Application User`. */
            incomeStreams: components['schemas']['TransactionStream'][];
            /** @description Lists all possible expenditure streams identified for the `Application User`. */
            expenditureStreams: components['schemas']['TransactionStream'][];
            /** @description A list of terminated transaction income streams */
            recentlyTerminatedIncomeStreams: components['schemas']['TerminatedTransactionStream'][];
            /** @description A list of terminated transaction expenditure streams */
            recentlyTerminatedExpenditureStreams: components['schemas']['TerminatedTransactionStream'][];
        };
        /** @description Enriched data that has been derived by Yapily using it's data processing and machine learning techniques. */
        Enrichment: {
            categorisation?: components['schemas']['Categorisation'];
            transactionHash?: components['schemas']['TransactionHash'];
            /** @description Cleaned version of the `Transaction Description` that removes miscellaneous, generic and unhelpful text. */
            cleansedDescription?: string;
            merchant?: components['schemas']['EnrichmentMerchant'];
            /** @description The location of where the transaction took place. */
            location?: string;
            /** @description A payment provider that manages (credit/debit) transactions between the `Institution` and the merchant. */
            paymentProcessor?: string;
            /**
             * Format: date-time
             * @description The likely date and time on which the transaction took place. This is distinct from `Booking Date Time` which usually refers to the post-clearing value.
             */
            correctedDate?: string;
        };
        /** @description Details of the merchant, identified by Yapily data services. */
        EnrichmentMerchant: {
            /** @description The name of the indivdual merchant involved in the transaction e.g. (TESCO Petrol). */
            merchantName?: string;
            /** @description The parent organisation that the merchant belongs to e.g. (TESCO). */
            parentGroup?: string;
        };
        /**
         * @description The environment type. <br><br>See [Institution Configuration](https://docs.yapily.com/pages/key-concepts/institutions/#configuration) for more information
         * @enum {string}
         */
        EnvironmentType: 'SANDBOX' | 'MOCK' | 'LIVE';
        /** @description __Optional__. Used to provide details on the currency exchange rate and contract. */
        ExchangeRateInformation: {
            /** @description __Mandatory__. The currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is `GBP`. */
            unitCurrency: string;
            /** @description __Optional__. The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency. */
            rate?: number;
            rateType: components['schemas']['RateTypeEnum'];
            /** @description __Optional__. The unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent. */
            foreignExchangeContractReference?: string;
        };
        ExchangeRateInformationResponse: {
            /** @description __Mandatory__. The currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is `GBP`. */
            unitCurrency: string;
            /** @description __Optional__. The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency. */
            rate?: number;
            rateType: components['schemas']['RateTypeEnum'];
            /** @description __Optional__. The unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent. */
            foreignExchangeContractReference?: string;
            /** Format: date-time */
            exchangeRateExpiryDate?: string;
        };
        /** @description Features that an individual `Institution` may support. */
        FeatureDetails: {
            feature?: components['schemas']['FeatureEnum'];
            /** @description Endpoints that are associated with the feature e.g. (available for use if an Institution supports a feature). */
            endpoint?: string;
            /** @description The link to further documentation regarding the feature. */
            documentationUrl?: string;
        };
        ApiListResponseOfDirectDebitResponse: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['DirectDebitResponse'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            paging?: components['schemas']['FilteredClientPayloadListDirectDebitResponse'];
            tracingId?: string;
        };
        ApiListResponseOfFeatureDetails: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['FeatureDetails'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            paging?: components['schemas']['FilteredClientPayloadListFeatureDetails'];
            tracingId?: string;
        };
        /**
         * @description Used to describe what functions are supported by the associated `Institution`.        <br><br>For more information on each feature, see the following links:        <ul>          <li>[Financial Data Features](https://docs.yapily.com/pages/key-concepts/account-data/account-features/)</li>          <li>[Payments Features](https://docs.yapily.com/pages/key-concepts/payments/payment-features/)</li>        </ul>
         * @enum {string}
         */
        FeatureEnum: 'INITIATE_PRE_AUTHORISATION' | 'INITIATE_PRE_AUTHORISATION_ACCOUNTS' | 'INITIATE_PRE_AUTHORISATION_PAYMENTS' | 'INITIATE_ACCOUNT_REQUEST' | 'INITIATE_EMBEDDED_ACCOUNT_REQUEST' | 'ACCOUNT_REQUEST_DETAILS' | 'ACCOUNTS' | 'ACCOUNT' | 'ACCOUNT_TRANSACTIONS' | 'ACCOUNT_STATEMENTS' | 'ACCOUNT_STATEMENT' | 'ACCOUNT_STATEMENT_FILE' | 'ACCOUNT_SCHEDULED_PAYMENTS' | 'ACCOUNT_DIRECT_DEBITS' | 'ACCOUNT_PERIODIC_PAYMENTS' | 'ACCOUNT_TRANSACTIONS_WITH_MERCHANT' | 'IDENTITY' | 'ACCOUNTS_WITHOUT_BALANCE' | 'ACCOUNT_WITHOUT_BALANCE' | 'ACCOUNT_BALANCES' | 'INITIATE_SINGLE_PAYMENT_SORTCODE' | 'EXISTING_PAYMENT_INITIATION_DETAILS' | 'CREATE_SINGLE_PAYMENT_SORTCODE' | 'EXISTING_PAYMENTS_DETAILS' | 'INITIATE_DOMESTIC_SINGLE_PAYMENT' | 'INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT' | 'CREATE_DOMESTIC_SINGLE_PAYMENT' | 'INITIATE_EMBEDDED_BULK_PAYMENT' | 'INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT' | 'CREATE_DOMESTIC_SINGLE_INSTANT_PAYMENT' | 'INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT' | 'CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT' | 'INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_SWEEPING' | 'INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_NONSWEEPING' | 'CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_SWEEPING' | 'CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_NONSWEEPING' | 'INITIATE_DOMESTIC_SCHEDULED_PAYMENT' | 'CREATE_DOMESTIC_SCHEDULED_PAYMENT' | 'INITIATE_DOMESTIC_PERIODIC_PAYMENT' | 'CREATE_DOMESTIC_PERIODIC_PAYMENT' | 'PERIODIC_PAYMENT_FREQUENCY_EXTENDED' | 'INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT' | 'CREATE_INTERNATIONAL_SCHEDULED_PAYMENT' | 'INITIATE_INTERNATIONAL_PERIODIC_PAYMENT' | 'CREATE_INTERNATIONAL_PERIODIC_PAYMENT' | 'INITIATE_INTERNATIONAL_SINGLE_PAYMENT' | 'CREATE_INTERNATIONAL_SINGLE_PAYMENT' | 'INITIATE_BULK_PAYMENT' | 'CREATE_BULK_PAYMENT' | 'TRANSFER' | 'OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS' | 'OPEN_DATA_ATMS' | 'READ_DOMESTIC_SINGLE_REFUND' | 'READ_DOMESTIC_SCHEDULED_REFUND' | 'READ_DOMESTIC_PERIODIC_PAYMENT_REFUND' | 'READ_INTERNATIONAL_SINGLE_REFUND' | 'READ_INTERNATIONAL_SCHEDULED_REFUND' | 'ACCOUNT_BENEFICIARIES' | 'INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS' | 'INITIATE_ONETIME_PRE_AUTHORISATION_ACCOUNTS' | 'INITIATE_ONETIME_PRE_AUTHORISATION' | 'VARIABLE_RECURRING_PAYMENT_FUNDS_CONFIRMATION';
        FilterAndSort: {
            /**
             * Format: date-time
             * @description __Optional__. The earliest date and time of resources / records that should be returned.
             */
            from?: string;
            /**
             * Format: date-time
             * @description __Optional__. The latest date and time of resources / records that should be returned.
             */
            before?: string;
            /**
             * Format: int32
             * @description __Optional__. The maximum number of resources / records that should be returned.
             */
            limit?: number;
            sort?: components['schemas']['SortEnum'];
            /** Format: int32 */
            offset?: number;
            cursor?: string;
        };
        FilteredClientPayloadListAccount: {
            apiCall?: components['schemas']['ApiCall'];
            data?: components['schemas']['Account'][];
            nextCursorHash?: string;
            nextLink?: string;
            pagingMap?: {
                [key: string]: components['schemas']['FilterAndSort'] | undefined;
            };
            /** Format: int64 */
            totalCount?: number;
        };
        FilteredClientPayloadListAccountStatement: {
            apiCall?: components['schemas']['ApiCall'];
            data?: components['schemas']['AccountStatement'][];
            nextCursorHash?: string;
            nextLink?: string;
            pagingMap?: {
                [key: string]: components['schemas']['FilterAndSort'] | undefined;
            };
            /** Format: int64 */
            totalCount?: number;
        };
        FilteredClientPayloadListCategory: {
            apiCall?: components['schemas']['ApiCall'];
            data?: components['schemas']['Category'][];
            nextCursorHash?: string;
            nextLink?: string;
            pagingMap?: {
                [key: string]: components['schemas']['FilterAndSort'] | undefined;
            };
            /** Format: int64 */
            totalCount?: number;
        };
        FilteredClientPayloadListConsent: {
            apiCall?: components['schemas']['ApiCall'];
            data?: components['schemas']['Consent'][];
            nextCursorHash?: string;
            nextLink?: string;
            pagingMap?: {
                [key: string]: components['schemas']['FilterAndSort'] | undefined;
            };
            /** Format: int64 */
            totalCount?: number;
        };
        FilteredClientPayloadListDirectDebitResponse: {
            apiCall?: components['schemas']['ApiCall'];
            data?: components['schemas']['DirectDebitResponse'][];
            nextCursorHash?: string;
            nextLink?: string;
            pagingMap?: {
                [key: string]: components['schemas']['FilterAndSort'] | undefined;
            };
            /** Format: int64 */
            totalCount?: number;
        };
        FilteredClientPayloadListFeatureDetails: {
            apiCall?: components['schemas']['ApiCall'];
            data?: components['schemas']['FeatureDetails'][];
            nextCursorHash?: string;
            nextLink?: string;
            pagingMap?: {
                [key: string]: components['schemas']['FilterAndSort'] | undefined;
            };
            /** Format: int64 */
            totalCount?: number;
        };
        FilteredClientPayloadListInstitution: {
            apiCall?: components['schemas']['ApiCall'];
            data?: components['schemas']['Institution'][];
            nextCursorHash?: string;
            nextLink?: string;
            pagingMap?: {
                [key: string]: components['schemas']['FilterAndSort'] | undefined;
            };
            /** Format: int64 */
            totalCount?: number;
        };
        FilteredClientPayloadListPaymentResponse: {
            apiCall?: components['schemas']['ApiCall'];
            data?: components['schemas']['PaymentResponse'][];
            nextCursorHash?: string;
            nextLink?: string;
            pagingMap?: {
                [key: string]: components['schemas']['FilterAndSort'] | undefined;
            };
            /** Format: int64 */
            totalCount?: number;
        };
        FilteredClientPayloadListTransaction: {
            apiCall?: components['schemas']['ApiCall'];
            data?: components['schemas']['Transaction'][];
            nextCursorHash?: string;
            nextLink?: string;
            pagingMap?: {
                [key: string]: components['schemas']['FilterAndSort'] | undefined;
            };
            /** Format: int64 */
            totalCount?: number;
        };
        /** @description A financial profile for a User. */
        FinancialProfile: {
            /**
             * @description The status, can be EMPTY, PARTIAL, PENDING, COMPLETED or ERROR.
             * @example COMPLETED
             */
            status?: string;
            /** @description A list of ProfileConsent used in the financial profile. */
            profileConsents?: components['schemas']['ProfileConsent'][];
            enrichment?: components['schemas']['EnrichedWrapper'];
        };
        /**
         * @description __Mandatory__. See [payment frequency](/guides/payments/payment-execution/periodic-payments/#payment-frequency) for more information
         * @enum {string}
         */
        FrequencyEnumExtended: 'DAILY' | 'EVERY_WORKING_DAY' | 'CALENDAR_DAY' | 'WEEKLY' | 'EVERY_TWO_WEEKS' | 'MONTHLY' | 'EVERY_TWO_MONTHS' | 'QUARTERLY' | 'SEMIANNUAL' | 'ANNUAL';
        /** @description __Mandatory__. Defines the intervals at which payment should be made. */
        FrequencyRequest: {
            type: components['schemas']['FrequencyEnumExtended'];
            /**
             * Format: int32
             * @description __Conditional__. See [payment frequency](/guides/payments/payment-execution/periodic-payments/#payment-frequency) for more information
             * @example 1
             */
            intervalWeek?: number;
            /**
             * Format: int32
             * @description __Conditional__. See [payment frequency](/guides/payments/payment-execution/periodic-payments/#payment-frequency) for more information
             * @example 1
             */
            intervalMonth?: number;
            /**
             * Format: int32
             * @description __Conditional__. See [payment frequency](/guides/payments/payment-execution/periodic-payments/#payment-frequency) for more information
             * @example 1
             */
            executionDay?: number;
        };
        /** @description __Mandatory__. Defines the intervals at which payment should be made. */
        FrequencyResponse: {
            frequencyType?: components['schemas']['FrequencyEnumExtended'];
            /**
             * Format: int32
             * @description The weekly intervals at which a payment will be made. e.g. 1 = Every months, 2 = Every 2 months.
             */
            intervalWeek?: number;
            /**
             * Format: int32
             * @description The monthly intervals at which a payment will be made. e.g. 1 = Every month, 2 = Every 2 months
             */
            intervalMonth?: number;
            /**
             * Format: int32
             * @description The day on which a payment will be made, according to the weekly or monthly interval.
             */
            executionDay?: number;
        };
        /** @description Identification details of a party associated with an account e.g. (account owner or operator). */
        Identity: {
            id?: string;
            firstName?: string;
            lastName?: string;
            fullName?: string;
            gender?: string;
            birthdate?: string;
            email?: string;
            phone?: string;
            addresses?: components['schemas']['IdentityAddress'][];
        };
        IdentityAddress: {
            addressLines?: string[];
            city?: string;
            postalCode?: string;
            country?: string;
            streetName?: string;
            buildingNumber?: string;
            type?: components['schemas']['AddressTypeEnum'];
            county?: string;
        };
        ApiResponseOfIdentity: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['Identity'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        /** @description Typically, a bank or business unit within a bank e.g. (AIB Business, AIB Ireland, AIB UK). */
        Institution: {
            /** @description Unique identifier for the `Institution`. */
            id?: string;
            /** @description The friendly name of the `Institution`. */
            name?: string;
            /** @description The full name of the `Institution`. */
            fullName?: string;
            /** @description An array of `Country` denoting which regions the `Institution` provides coverage for */
            countries?: components['schemas']['Country'][];
            environmentType?: components['schemas']['EnvironmentType'];
            credentialsType?: components['schemas']['CredentialsType'];
            /** @description Contains links to the logo and the icons for the `Institution` */
            media?: components['schemas']['Media'][];
            features?: components['schemas']['FeatureEnum'][];
            monitoring?: {
                [key: string]: components['schemas']['MonitoringFeatureStatus'] | undefined;
            };
        };
        ApiListResponseOfInstitution: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['Institution'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            paging?: components['schemas']['FilteredClientPayloadListInstitution'];
            tracingId?: string;
        };
        /** @description `Institution` authorised consents which are currently in place for the `Application User`. */
        InstitutionConsent: {
            /** @description __Mandatory__. The `Institution` the authorisation request is sent to. */
            institutionId?: string;
        };
        /** @description Raw error details provided by the `Institution`, when it was the error source. */
        InstitutionError: {
            /** @description Textual description of the `Institution` error. */
            errorMessage?: string;
            /**
             * Format: int32
             * @description Numeric HTTP status code associated with the `Institution` error.
             */
            httpStatusCode?: number;
        };
        /** @description __Conditional__. Used to specify properties to define an international payment. <br><br>Must be specified when the payment `type` is one of the following:<ul>     <li><code>INTERNATIONAL_SINGLE_PAYMENT</code></li>     <li><code>INTERNATIONAL_SCHEDULED_PAYMENT</code></li>     <li><code>INTERNATIONAL_PERIODIC_PAYMENT</code></li></ul> */
        InternationalPaymentRequest: {
            /** @description __Mandatory__. The currency to be transferred to the payee. This may differ from the currency the payment is denoted in and the currency of the payer's account. Specified as a 3-letter code (ISO 4217). */
            currencyOfTransfer: string;
            exchangeRateInformation?: components['schemas']['ExchangeRateInformation'];
            /** @description __Optional__. Used to indicate the external purpose as a [ISO20022 purpose code](https://www.rba.hr/documents/20182/183267/External+purpose+codes+list/8a28f888-1f83-5e29-d6ed-fce05f428689?version=1.1) value. */
            purpose?: string;
            priority?: components['schemas']['PriorityCodeEnum'];
            chargeBearer?: components['schemas']['ChargeBearerType'];
        };
        /** @description Defines the underlying transaction type (e.g. Card or Debit Transactions, Loans or Mortages). <br><br> Conforms to `ISO` standards - ISO 20022. */
        IsoBankTransactionCode: {
            domainCode?: components['schemas']['IsoCodeDetails'];
            familyCode?: components['schemas']['IsoCodeDetails'];
            subFamilyCode?: components['schemas']['IsoCodeDetails'];
        };
        /** @description __Mandatory__. Details the identification of the ISO code. */
        IsoCodeDetails: {
            /**
             * @description __Mandatory__. Unique identifier of the ISO code.
             * @default UNKNOWN
             */
            code?: string;
            /**
             * @description __Mandatory__. Name of the ISO Code.
             * @default UNKNOWN
             */
            name?: string;
        };
        /** @description Details of the media held for the `Institution` */
        Media: {
            /** @description __Mandatory__. URL from where the media can be retrieved. */
            source?: string;
            /** @description __Mandatory__. The type of media e.g. (logo, icon). */
            type?: string;
        };
        /** @description Details of the merchant involved in the transaction. */
        Merchant: {
            /** @description The name of the merchant involved in the transaction. */
            merchantName?: string;
            /** @description Defines the underlying services and goods that the merchant provides. Specified as a 3-letter ISO 18245 code */
            merchantCategoryCode?: string;
        };
        MonitoringEndpointStatus: {
            /** Format: date-time */
            lastTested?: string;
            resourceEndpoint?: string;
            /** Format: iso8601 */
            span?: string;
            status?: components['schemas']['MonitoringStatusEnum'];
        };
        MonitoringFeatureStatus: {
            /** Format: date-time */
            lastTested?: string;
            /** Format: iso8601 */
            span?: string;
            status?: components['schemas']['MonitoringStatusEnum'];
        };
        /** @description Details the additional levels of authorisation which are required from, and being managed by, the `Institution`. */
        MultiAuthorisation: {
            /** @description _Mandatory_. Specifies the current status of the multi-authorisation flow. */
            status?: string;
            /**
             * Format: int32
             * @description __Mandatory__. Total number of authorisations required.
             */
            numberOfAuthorisationRequired?: number;
            /**
             * Format: int32
             * @description __Mandatory__. The total number of authorisations that have been recieved.
             */
            numberOfAuthorisationReceived?: number;
            /**
             * Format: date-time
             * @description __Mandatory__. Date and time of when the authorisation was last updated.
             */
            lastUpdatedDateTime?: string;
            /**
             * Format: date-time
             * @description __Mandatory__. Date and time by when the authorisation flow must be completed before it expires and the authorisation request is terminated.
             */
            expirationDateTime?: string;
        };
        /** @description Details of a new user to be created for the application. */
        NewApplicationUser: {
            /**
             * @description __Optional__. The unique identifier of the `Application User` assigned by the Application Owner.
             * @example user-234562290
             */
            applicationUserId?: string;
            /** @description __Deprecated__. A non-unique reference Id for the `Application User`. */
            referenceId?: string;
        };
        Next: {
            /** Format: date-time */
            from?: string;
            /** Format: date-time */
            before?: string;
            /** Format: int32 */
            limit?: number;
            cursor?: string;
        };
        /** @description The request body containing the `OneTimeTokenRequest` json payload */
        OneTimeTokenRequest: {
            /**
             * @description __Mandatory__. The one time token to exchange for a consent token.
             * @example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJJTlNUSVRVVElPTiI6ImJidmEtc2FuZGJveCIsIlVVSUQiOiJmMzNmNGU4ZC1jMDQ0LTQ2YTktOTlkMC0wYmRlMzIyYTJjOTIifQ.4Qv3NJI6av2nKi1U3aNmm71cIwJ3TvRsIlYDafQUVv_Khy_e-8oEpV_BoP4V1CII12oT-Yq4cPveHILz8BOwjg
             */
            oneTimeToken: string;
        };
        Pagination: {
            /** Format: int64 */
            totalCount?: number;
            self?: components['schemas']['FilterAndSort'];
            next?: components['schemas']['Next'];
        };
        /**
         * Payee Details
         * @description __Mandatory__. Details of the beneficiary [person or business].
         */
        Payee: {
            /**
             * Payee Name
             * @description __Mandatory__. The account holder name of the beneficiary.
             * @example Jane Doe
             */
            name: string;
            /**
             * @description __Mandatory__. The account identifications that identify the `Payee` bank account.
             * @example [
             *   {
             *     "identification": "401016",
             *     "type": "SORT_CODE"
             *   },
             *   {
             *     "identification": "71518920",
             *     "type": "ACCOUNT_NUMBER"
             *   }
             * ]
             */
            accountIdentifications: components['schemas']['AccountIdentification'][];
            address?: components['schemas']['Address'];
            /**
             * Merchant Id
             * @description __Optional__. The merchant ID is a unique code provided by the payment processor to the merchant.
             * @example 24589303
             */
            merchantId?: string;
            /**
             * Merchant Category
             * @description __Optional__. The category code of the merchant in case the `Payee` is a business. Specified as a 3-letter ISO 18245 code.
             * @example 5551
             */
            merchantCategoryCode?: string;
        };
        /**
         * Payee Details
         * @description  Details of the beneficiary [person or business].
         */
        PayeeDetailsResponse: {
            /**
             * Payee Name
             * @description The account holder name of the beneficiary.
             * @example Jane Doe
             */
            name?: string;
            /**
             * @description The account identifications that identify the `Payee` bank account.
             * @example [
             *   {
             *     "identification": "401016",
             *     "type": "SORT_CODE"
             *   },
             *   {
             *     "identification": "71518920",
             *     "type": "ACCOUNT_NUMBER"
             *   }
             * ]
             */
            accountIdentifications?: components['schemas']['AccountIdentificationResponse'][];
            address?: components['schemas']['AddressResponse'];
            /**
             * Merchant Id
             * @description The merchant ID is a unique code provided by the payment processor to the merchant.
             * @example 24589303
             */
            merchantId?: string;
            /**
             * Merchant Category
             * @description The category code of the merchant in case the `Payee` is a business. Specified as a 3-letter ISO 18245 code.
             * @example 5551
             */
            merchantCategoryCode?: string;
        };
        /** @description __Mandatory__. Details of the beneficiary [person or business]. */
        PayeeDetails: {
            /**
             * @description __Mandatory__. The account holder name of the beneficiary.
             * @example Jane Doe
             */
            name: string;
            /**
             * @description __Mandatory__. The account identifications that identify the `Payee` bank account.
             * @example [
             *   {
             *     "identification": "IBUK123456789",
             *     "type": "IBAN"
             *   }
             * ]
             */
            accountIdentifications: components['schemas']['AccountIdentification'][];
            /**
             * @description __Conditional__. The 2-letter ISO 3166 country code for the address. <br><br>An `Institution` may require you to specify the `country` when used in the context of the `Payee` to be able to make a payment
             * @example GB
             */
            country: string;
        };
        /**
         * Payer Details
         * @description __Conditional__. Details of the benefactor [person or business].
         */
        Payer: {
            /**
             * Payer Name
             * @description The account holder name of the Payer.
             * @example John Doe
             */
            name?: string;
            /** @description __Mandatory__. The account identifications that identify the `Payer` bank account. */
            accountIdentifications: components['schemas']['AccountIdentification'][];
            address?: components['schemas']['Address'];
        };
        /**
         * Payer Details
         * @description Details of the benefactor [person or business].
         */
        PayerDetailsResponse: {
            /**
             * Payer Name
             * @description The account holder name of the Payer.
             * @example John Doe
             */
            name?: string;
            /** @description The account identifications that identify the `Payer` bank account. */
            accountIdentifications?: components['schemas']['AccountIdentificationResponse'][];
            address?: components['schemas']['AddressResponse'];
        };
        /** @description __Conditional__. Details of the benefactor [person or business]. */
        PayerDetails: {
            /** @description __Mandatory__. The account identifications that identify the `Payer` bank account. */
            accountIdentifications: components['schemas']['AccountIdentification'][];
        };
        /** @description The request body containing an `PaymentAuthorisationRequest` json payload */
        PaymentAuthorisationRequest: {
            /** Format: uuid */
            userUuid?: string;
            /**
             * @description __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.
             * @example user-234562290
             */
            applicationUserId?: string;
            /** @description Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect. */
            forwardParameters?: string[];
            /**
             * @description __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
             * @example yapily-mock
             */
            institutionId: string;
            /**
             * @description __Optional__. The URL to redirect the user to after the user complete the authorisation at the `Institution`.
             * @example https://display-parameters.com
             */
            callback?: string;
            redirect?: components['schemas']['RedirectRequest'];
            /**
             * @description __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-with-an-ott-optional) for more information.
             * @example false
             */
            oneTimeToken?: boolean;
            paymentRequest: components['schemas']['PaymentRequest'];
        };
        PaymentAuthorisationRequestResponse: {
            /**
             * Format: uuid
             * @description Unique identifier for the payment authorisation request. <br><br>The `consentID` used to [retrieve a consent](/api/reference/#operation/getConsentById).
             */
            id?: string;
            /**
             * Format: uuid
             * @description The `User` that the authorisation request was created for.
             */
            userUuid?: string;
            /** @description The user-friendly reference to the `User` that the authorisation request was created for. */
            applicationUserId?: string;
            referenceId?: string;
            /** @description The `Institution` the authorisation request was sent to. */
            institutionId?: string;
            status?: components['schemas']['AuthorisationStatus'];
            /**
             * Format: date-time
             * @description Date and time the consent was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the earliest date of transaction records that can be retrieved.
             */
            transactionFrom?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the latest date of transaction records that can be retrieved.
             */
            transactionTo?: string;
            /**
             * Format: date-time
             * @description Date and time the authorisation expires. Re-authorisation is needed to retain access.
             */
            expiresAt?: string;
            /**
             * Format: int64
             * @deprecated
             */
            timeToExpireInMillis?: number;
            /** Format: iso8601 */
            timeToExpire?: string;
            /** @description The set of features the consent provides access to. */
            featureScope?: components['schemas']['FeatureEnum'][];
            /** @description Represents the authorisation to gain access to the requested features. Required to make a payment request. */
            consentToken?: string;
            /** @description Correlation ID used with the `Institution` during the authorisation process. */
            state?: string;
            /**
             * Format: date-time
             * @description Date and time the request was authorised by the `Institution`.
             */
            authorizedAt?: string;
            /** @description Unique identifier of the consent assigned by the `Institution`. */
            institutionConsentId?: string;
            charges?: components['schemas']['PaymentChargeDetails'][];
            exchangeRateInformation?: components['schemas']['ExchangeRateInformationResponse'];
            authorisationUrl?: string;
            /** @description The URL for a QR code that may be scanned via a mobile device to make a authorisation redirect to the bank (authURL encoded). */
            qrCodeUrl?: string;
            /** @description Message from the `Institution` received by Yapily, detailing the next action the user is required to take. This is used only for Decoupled flows. */
            explanation?: string;
        };
        ApiResponseOfPaymentAuthorisationRequestResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['PaymentAuthorisationRequestResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        /**
         * Payment Code
         * @description __Optional__. The payment context code. This defaults to `OTHER` if not specified.
         * @default OTHER
         * @enum {string}
         */
        PaymentContextType: 'BILL' | 'GOODS' | 'SERVICES' | 'OTHER' | 'PERSON_TO_PERSON';
        /**
         * Payment Code
         * @description The payment context code.
         * @enum {string}
         */
        PaymentContextTypeResponse: 'BILL' | 'GOODS' | 'SERVICES' | 'OTHER' | 'PERSON_TO_PERSON';
        /** @description The request body containing an `PaymentEmbeddedAuthorisationRequest` json payload */
        PaymentEmbeddedAuthorisationRequest: {
            /** Format: uuid */
            userUuid?: string;
            /**
             * @description __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.
             * @example user-234562290
             */
            applicationUserId?: string;
            /**
             * @description __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
             * @example yapily-mock
             */
            institutionId: string;
            /**
             * @description __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-optional) for more information.
             * @example https://display-parameters.com
             */
            callback?: string;
            redirect?: components['schemas']['RedirectRequest'];
            /**
             * @description __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-with-an-ott-optional) for more information.
             * @example false
             */
            oneTimeToken?: boolean;
            paymentRequest: components['schemas']['PaymentRequest'];
            userCredentials?: components['schemas']['UserCredentials'];
            selectedScaMethod?: components['schemas']['ScaMethod'];
            /**
             * @description __Conditional__. Used to update the authorisation with the sca code received by the user from the `Institution` using the embedded payment authorisation flow.<br><br>This is the penultimate step required in the embedded payment authorisation flow to authorise the `Consent`. After sending the sca code, to obtain an authorised consent, the last step is to poll [Get Consent](https://docs.yapily.com/api/reference/#operation/getConsentById) until the `Institution` authorises the request and the `Consent` `status` transitions to `AUTHORIZED`.
             * @example 325614
             */
            scaCode?: string;
        };
        PaymentEmbeddedAuthorisationRequestResponse: {
            /**
             * Format: uuid
             * @description Unique identifier for the embedded payment authorisation request.
             */
            id?: string;
            /**
             * Format: uuid
             * @description The `User` that the authorisation request was created for.
             */
            userUuid?: string;
            /** @description The user-friendly reference to the `User` that the authorisation request was created for. */
            applicationUserId?: string;
            referenceId?: string;
            /** @description The  `Institution` the authorisation request was sent to. */
            institutionId?: string;
            status?: components['schemas']['AuthorisationStatus'];
            /**
             * Format: date-time
             * @description Date and time the embedded payment authorisation was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the earliest date of transaction records that can be retrieved.
             */
            transactionFrom?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the latest date of transaction records that can be retrieved.
             */
            transactionTo?: string;
            /**
             * Format: date-time
             * @description Date and time the authorisation expires. Re-authorisation is needed to retain access.
             */
            expiresAt?: string;
            /**
             * Format: int64
             * @deprecated
             */
            timeToExpireInMillis?: number;
            /** Format: iso8601 */
            timeToExpire?: string;
            /** @description The set of features the consent provides access to. */
            featureScope?: components['schemas']['FeatureEnum'][];
            /** @description Represents the authorisation to gain access to the requested features. Required to make a payment request. */
            consentToken?: string;
            /** @description Correlation ID used with the `Institution` during the authorisation process. */
            state?: string;
            /**
             * Format: date-time
             * @description Date and time the request was authorised by the `Institution`.
             */
            authorizedAt?: string;
            /** @description Identification of the consent at the `Institution`. */
            institutionConsentId?: string;
            charges?: components['schemas']['PaymentChargeDetails'][];
            exchangeRateInformation?: components['schemas']['ExchangeRateInformationResponse'];
            authorisationUrl?: string;
            /** @description The URL link for the QR code that may be scanned via a mobile device to make an authorisation redirect to the bank (authURL encoded). */
            qrCodeUrl?: string;
            explanation?: string;
            scaMethods?: components['schemas']['ScaMethod'][];
            selectedScaMethod?: components['schemas']['ScaMethod'];
        };
        ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['PaymentEmbeddedAuthorisationRequestResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        /** @description The payment status code, as denoted by a 3-letter ISO 20022 code. */
        PaymentIsoStatus: {
            code?: components['schemas']['PaymentIsoStatusCodeEnum'];
            /**
             * @description The full name of the ISO 20022 `PaymentStatusCode`.
             * @example AcceptedCreditSettlementCompleted
             */
            name?: string;
        };
        /**
         * @description The ISO 20022 `PaymentStatusCode`.
         * @example ACCC
         * @enum {string}
         */
        PaymentIsoStatusCodeEnum: 'ACCC' | 'ACCP' | 'ACSC' | 'ACSP' | 'ACTC' | 'ACWC' | 'ACWP' | 'RCVD' | 'PDNG' | 'RJCT' | 'CANC' | 'ACFC' | 'PATC' | 'PART';
        /** @description __Mandatory__. The payment pre authorisation request object defining the details of the payment and pre auth. */
        PaymentPreAuthorisationRequest: {
            /** Format: uuid */
            userUuid?: string;
            /**
             * @description __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.
             * @example user-234562290
             */
            applicationUserId?: string;
            /** @description Extra parameters to be forwarded in the redirect back to the client after the user authorisation flow has been completed. */
            forwardParameters?: string[];
            /**
             * @description __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
             * @example yapily-mock
             */
            institutionId: string;
            /**
             * @description __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-optional) for more information.
             * @example https://display-parameters.com
             */
            callback?: string;
            redirect?: components['schemas']['RedirectRequest'];
            /**
             * @description __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-with-an-ott-optional) for more information.
             * @example false
             */
            oneTimeToken?: boolean;
            /**
             * @description __Mandatory__. Defines the scope of the pre-authorisation request.
             * @example AIS
             */
            scope: string;
            payee: components['schemas']['PayeeDetails'];
            payer: components['schemas']['PayerDetails'];
            amount: components['schemas']['Amount'];
            /**
             * @description __Mandatory__. The payment reference or description. Limited to a maximum of 18 characters long.
             * @example Bill payment
             */
            reference: string;
        };
        /** @description __Mandatory__. The payment request object defining the details of the payment. */
        PaymentRequest: {
            /**
             * Idempotency Id
             * @description __Mandatory__. A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.
             * @example 04ab4536gaerfc0e1f93c4f4
             */
            paymentIdempotencyId: string;
            payer?: components['schemas']['Payer'];
            /**
             * Payment Reference
             * @description __Optional__. The payment reference or description. Limited to a maximum of 18 characters long.
             * @example Bill payment
             */
            reference?: string;
            contextType?: components['schemas']['PaymentContextType'];
            type: components['schemas']['PaymentType'];
            payee: components['schemas']['Payee'];
            periodicPayment?: components['schemas']['PeriodicPaymentRequest'];
            internationalPayment?: components['schemas']['InternationalPaymentRequest'];
            amount: components['schemas']['Amount'];
            /**
             * Payment Date
             * Format: date-time
             * @description __Conditional__. Used to specify the date of the payment when the payment type is one of the following:<ul>    <li><code>DOMESTIC_SCHEDULED_PAYMENT</code></li>    <li><code>DOMESTIC_PERIODIC_PAYMENT</code></li>    <li><code>INTERNATIONAL_SCHEDULED_PAYMENT</code></li>    <li><code>INTERNATIONAL_PERIODIC_PAYMENT</code></li></ul>
             * @example 2021-07-21T17:32:28Z
             */
            paymentDateTime?: string;
            /**
             * Read Refund Account
             * @description __Optional__. Used to request the payer details in the payment response when the `Institution` provides the feature `READ_DOMESTIC_SINGLE_REFUND`.<br><br>See [Reverse Payments](https://docs.yapily.com/pages/knowledge/open-banking/reverse_payments/) for more information.
             * @example false
             */
            readRefundAccount?: boolean;
        };
        PaymentResponse: {
            /** @description Unique identifier of the payment. */
            id?: string;
            /** @description Identification of the consent at the Institution. */
            institutionConsentId?: string;
            /** @description __Mandatory__. A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters. */
            paymentIdempotencyId?: string;
            paymentLifecycleId?: string;
            status?: components['schemas']['PaymentStatus'];
            statusDetails?: components['schemas']['PaymentStatusDetails'];
            payer?: components['schemas']['Payer'];
            payeeDetails?: components['schemas']['Payee'];
            /** @description __Optional__. The payment reference or description. Limited to a maximum of 18 characters long. */
            reference?: string;
            /** @description Monetary amount. */
            amount?: number;
            /** @description Currency the payment amount is denoted in. Specified as a 3-letter ISO 4217 code. */
            currency?: string;
            amountDetails?: components['schemas']['Amount'];
            /**
             * Format: date-time
             * @description Date and time of when the payment request was created.
             */
            createdAt?: string;
            firstPaymentAmount?: components['schemas']['Amount'];
            /**
             * Format: date-time
             * @description Date and time of when the first payment request is to be made.
             */
            firstPaymentDateTime?: string;
            nextPaymentAmount?: components['schemas']['Amount'];
            /**
             * Format: date-time
             * @description __Conditional__. Defines when the recurring payment is to be made.
             */
            nextPaymentDateTime?: string;
            finalPaymentAmount?: components['schemas']['Amount'];
            /**
             * Format: date-time
             * @description Date and time of when the final payment is to be made.
             */
            finalPaymentDateTime?: string;
            /**
             * Format: int32
             * @description Number of recurring payment requests to be made as part of the instructed payment schedule.
             */
            numberOfPayments?: number;
            previousPaymentAmount?: components['schemas']['Amount'];
            /**
             * Format: date-time
             * @description Date and time of when the previous payment request was posted.
             */
            previousPaymentDateTime?: string;
            chargeDetails?: components['schemas']['PaymentChargeDetails'][];
            /** @description Details the execution type and the payment date between the payer and the payee. */
            scheduledPaymentType?: string;
            /**
             * Format: date-time
             * @description Date and time of when the scheduled payment request will be made.
             */
            scheduledPaymentDateTime?: string;
            frequency?: components['schemas']['FrequencyResponse'];
            /** @description __Mandatory__. The currency to be transferred to the payee. This may differ from the currency the payment is denoted in and the currency of the payer's account. Specified as a 3-letter code (ISO 4217). */
            currencyOfTransfer?: string;
            /** @description Specifies the external purpose code for the `Institution` - IS0 20022. */
            purpose?: string;
            priority?: components['schemas']['PriorityCodeEnum'];
            exchangeRate?: components['schemas']['ExchangeRateInformationResponse'];
            refundAccount?: components['schemas']['RefundAccount'];
            bulkAmountSum?: number;
        };
        ApiListResponseOfPaymentResponse: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['PaymentResponse'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            paging?: components['schemas']['FilteredClientPayloadListPaymentResponse'];
            tracingId?: string;
        };
        ApiResponseOfPaymentResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['PaymentResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        PaymentResponses: {
            payments?: components['schemas']['PaymentResponse'][];
        };
        ApiResponseOfPaymentResponses: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['PaymentResponses'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        /**
         * @description The status of the Payment. <br><br>For more information, see [Payment Status](/guides/payments/payment-status/)
         * @enum {string}
         */
        PaymentStatus: 'PENDING' | 'FAILED' | 'DECLINED' | 'COMPLETED' | 'COMPLETED_SETTLEMENT_IN_PROCESS' | 'EXPIRED' | 'UNKNOWN' | 'ACTIVE' | 'INACTIVE';
        PaymentStatusDetails: {
            status?: components['schemas']['PaymentStatus'];
            statusReason?: string;
            statusReasonDescription?: string;
            /** Format: date-time */
            statusUpdateDate?: string;
            multiAuthorisationStatus?: components['schemas']['MultiAuthorisation'];
            isoStatus?: components['schemas']['PaymentIsoStatus'];
        };
        /**
         * Payment Type
         * @description __Mandatory__. Used to specify which of the [payment types](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#payment-types) to execute.<br><br>See [European Payments](https://docs.yapily.com/pages/knowledge/open-banking/european_payments/) to verify whether the `type` should be `DOMESTIC` or `INTERNATIONAL`.
         * @enum {string}
         */
        PaymentType: 'DOMESTIC_PAYMENT' | 'DOMESTIC_INSTANT_PAYMENT' | 'DOMESTIC_VARIABLE_RECURRING_PAYMENT' | 'DOMESTIC_SCHEDULED_PAYMENT' | 'DOMESTIC_PERIODIC_PAYMENT' | 'INTERNATIONAL_PAYMENT' | 'INTERNATIONAL_SCHEDULED_PAYMENT' | 'INTERNATIONAL_PERIODIC_PAYMENT' | 'BULK_PAYMENT';
        /**
         * Payment Type
         * @description Specifies which of the [payment types](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#payment-types) to execute.<br>
         * @enum {string}
         */
        PaymentTypeResponse: 'DOMESTIC_PAYMENT' | 'DOMESTIC_INSTANT_PAYMENT' | 'DOMESTIC_VARIABLE_RECURRING_PAYMENT' | 'DOMESTIC_SCHEDULED_PAYMENT' | 'DOMESTIC_PERIODIC_PAYMENT' | 'INTERNATIONAL_PAYMENT' | 'INTERNATIONAL_SCHEDULED_PAYMENT' | 'INTERNATIONAL_PERIODIC_PAYMENT' | 'BULK_PAYMENT';
        /**
         * Payment Type
         * @description Payment type associated with constraints.
         * @enum {string}
         */
        PaymentTypeOfConstraints: 'DOMESTIC_PAYMENT' | 'DOMESTIC_INSTANT_PAYMENT' | 'DOMESTIC_VARIABLE_RECURRING_PAYMENT' | 'DOMESTIC_SCHEDULED_PAYMENT' | 'DOMESTIC_PERIODIC_PAYMENT' | 'INTERNATIONAL_PAYMENT' | 'INTERNATIONAL_SCHEDULED_PAYMENT' | 'INTERNATIONAL_PERIODIC_PAYMENT' | 'BULK_PAYMENT';
        /** @description __Conditional__. Used to specify properties to define a periodic payment. <br><br>Must be specified when the payment `type` is one of the following:<ul>     <li><code>DOMESTIC_PERIODIC_PAYMENT</code></li>     <li><code>INTERNATIONAL_PERIODIC_PAYMENT</code></li></ul> */
        PeriodicPaymentRequest: {
            frequency: components['schemas']['FrequencyRequest'];
            /**
             * Format: int32
             * @description __Conditional__. Defines the total number of payments to be made.<br><br>This is required if `finalPaymentDateTime` is not specified and it is intended for the periodic payment have a fixed amount of payments.
             * @example 5
             */
            numberOfPayments?: number;
            /**
             * Format: date-time
             * @description __Conditional__. Defines when to start the recurring payment date and time. Specify this if you want the first payment to start on a different day than what the frequency object defines.
             * @example 2018-01-10T00:00:00Z
             */
            nextPaymentDateTime?: string;
            nextPaymentAmount?: components['schemas']['Amount'];
            /**
             * Format: date-time
             * @description __Conditional__. Defines the final payment date and time. To create an open-ended periodic payment, do not specify this property.
             * @example 2030-01-10T00:00:00Z
             */
            finalPaymentDateTime?: string;
            finalPaymentAmount?: components['schemas']['Amount'];
        };
        PreAuthorisationRequest: {
            /** Format: uuid */
            userUuid?: string;
            /**
             * @description __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.
             * @example user-234562290
             */
            applicationUserId?: string;
            /** @description Extra parameters to be forwarded in the redirect back to the client after the user authorisation flow has been completed. */
            forwardParameters?: string[];
            /**
             * @description __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
             * @example yapily-mock
             */
            institutionId: string;
            /**
             * @description __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-optional) for more information.
             * @example https://display-parameters.com
             */
            callback?: string;
            redirect?: components['schemas']['RedirectRequest'];
            /**
             * @description __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-with-an-ott-optional) for more information.
             * @example false
             */
            oneTimeToken?: boolean;
            /**
             * @description __Mandatory__. Defines the scope of the pre-authorisation request.
             * @example AIS
             */
            scope: string;
        };
        PreAuthorisationResponse: {
            /**
             * Format: uuid
             * @description Unique identifier for the pre-authorisation request.
             */
            id?: string;
            /**
             * Format: uuid
             * @description The `User` that the authorisation request was created for.
             */
            userUuid?: string;
            /** @description The user-friendly reference to the `User` that the authorisation request was created for. */
            applicationUserId?: string;
            referenceId?: string;
            /** @description The `Institution` the authorisation request was sent to. */
            institutionId?: string;
            status?: components['schemas']['AuthorisationStatus'];
            /**
             * Format: date-time
             * @description Date and time the consent was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the earliest date of transaction records that can be retrieved.
             */
            transactionFrom?: string;
            /**
             * Format: date-time
             * @description When performing a transaction query using the consent, this is the latest date of transaction records that can be retrieved.
             */
            transactionTo?: string;
            /**
             * Format: date-time
             * @description Date and time the authorisation expires. Re-authorisation is needed to retain access.
             */
            expiresAt?: string;
            /**
             * Format: int64
             * @deprecated
             */
            timeToExpireInMillis?: number;
            /** Format: iso8601 */
            timeToExpire?: string;
            /** @description The set of features the consent provides access to. */
            featureScope?: components['schemas']['FeatureEnum'][];
            /** @description Represents the authorisation to gain access to the requested features. Required to access account information or make a payment request. */
            consentToken?: string;
            /** @description Corellation ID used with the `Institution` during the authorisation process. */
            state?: string;
            /**
             * Format: date-time
             * @description Date and time the request was authorised by the `Institution`.
             */
            authorizedAt?: string;
            /** @description Unique identifier of the consent assigned by the `Institution`. */
            institutionConsentId?: string;
            authorisationUrl?: string;
            /** @description The URL link for the QR code that may be scanned via a mobile device to make a authorisation redirect to the bank (authURL encoded). */
            qrCodeUrl?: string;
        };
        ApiResponseOfPreAuthorisationResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['PreAuthorisationResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        /** @enum {string} */
        PriorityCodeEnum: 'NORMAL' | 'URGENT';
        ApiResponseOfFinancialProfileAuthorisationResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['ProfileConsent'][];
            links?: {
                [key: string]: string | undefined;
            };
        };
        ApiResponseOfFinancialProfileConsent: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['ProfileConsent'];
            links?: {
                [key: string]: string | undefined;
            };
        };
        ApiResponseOfFinancialProfileConsentRemoveResponse: {
            meta?: components['schemas']['ResponseMeta'];
            links?: {
                [key: string]: string | undefined;
            };
        };
        ApiResponseOfFinancialProfile: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['FinancialProfile'];
            links?: {
                [key: string]: string | undefined;
            };
        };
        /** @description Details of a consent linked to a `User Profile`. */
        ProfileConsent: {
            /**
             * Format: uuid
             * @description Unique identifier of the `consent` in context of a user's profile.
             * @example eb2ad083-a111-4143-8756-a3a3cef4031c
             */
            id?: string;
            /**
             * @description The status, can be PENDING, COMPLETED or ERROR.
             * @example PENDING
             */
            status?: string;
            /**
             * Format: uuid
             * @description The userUuid.
             * @example 3ddf5dd0-aa48-4d0f-baa7-fa057e9e911d
             */
            userId?: string;
            /**
             * Format: uuid
             * @description Unique identifier of the consent.
             * @example 1e2e5167-8519-4c19-b016-8f2f0c6e38b6
             */
            referenceConsentId?: string;
            /**
             * @description __Mandatory__. The  `Institution` the authorisation request is sent to.
             * @example mock-sandbox
             */
            institutionId?: string;
            /**
             * Format: date-time
             * @description When a profile consent is created.
             * @example 28-07-2022 21:00:00
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description When a profile consent is expired after created + X.
             * @example 28-07-2022 21:05:00
             */
            expiresAt?: string;
            /**
             * Format: date-time
             * @description After data retrieval from aggregated profile consent is completed.
             * @example 28-07-2022 21:00:30
             */
            dataInsertedAt?: string;
        };
        /** @description A Balance Prediction profile for a User. */
        BalancePredictionProfile: {
            /**
             * @description The status, will be COMPLETED which represents successful retreival of profile.
             * @example COMPLETED
             */
            status?: string;
            /** @description A list of ProfileConsents used in the Balance Prediction profile. */
            profileConsents?: components['schemas']['ProfileConsent'][];
            /** @description A list of Balances returned by Balance Prediction profile. */
            enrichedBalances?: components['schemas']['EnrichedBalances'][];
        };
        ApiResponseOfFinancialProfileBalancePrediction: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['BalancePredictionProfile'];
            links?: {
                [key: string]: string | undefined;
            };
        };
        /** @description Enriched Balance information generated which include historic aggregated balances and predicted balances */
        EnrichedBalances: {
            /** @description A list of Account Ids used to generate Balance Prediction Profile. */
            accountIds?: string[];
            /** @description A list of Institution Ids associated with the accounts used to generate Balance Prediction Profile. */
            institutions?: string[];
            /** @description A list of historic balances. Each balance in the list is an aggregation (sum) of the reported balance for each account within the profile at a point in time. */
            historic?: components['schemas']['EnrichedHistoricBalance'][];
            /** @description A list of predicted balances. Each balance in the list is a projected balance of the profile at a future point in time. */
            predicted?: components['schemas']['EnrichedPredictedBalance'][];
        };
        /** @description A list of Aggregated Account Balances for historic date range. */
        EnrichedHistoricBalance: {
            /**
             * Format: date
             * @description The date for which Aggregated Balance amount across Bank accounts is calculated.
             * @example 2021-10-01
             */
            date?: string;
            /**
             * @description The Aggregated Balance amount for a specific date.
             * @example 20
             */
            balance?: number;
        };
        /** @description A list of Predicted Account Balances for future date range. */
        EnrichedPredictedBalance: {
            /**
             * Format: date
             * @description The date for which Balance amount is predicted.
             * @example 2021-11-01
             */
            date?: string;
            /**
             * @description The median Balance amount for a future date.
             * @example 49.26
             */
            medianBalance?: number;
            /**
             * @description The 90th percentile Balance amount for a future date.
             * @example 49.26
             */
            '90percentileBalance'?: number;
            /**
             * @description The 10th percentile Balance amount for a future date.
             * @example 5.96
             */
            '10percentileBalance'?: number;
        };
        /** @description Transaction code that is proprietary to the `Institution`. */
        ProprietaryBankTransactionCode: {
            /** @description __Mandatory__. Properietary code used to identify the underlying transaction. */
            code?: string;
            /** @description __Mandatory__. Issuer of the properitary code. */
            issuer?: string;
        };
        /**
         * @description __Mandatory__. The type used to complete the currency exchange.
         * @enum {string}
         */
        RateTypeEnum: 'ACTUAL' | 'AGREED' | 'INDICATIVE';
        RawRequest: {
            method?: string;
            url?: string;
            /** Format: date-time */
            requestInstant?: string;
            headers?: {
                [key: string]: string | undefined;
            };
            body?: Record<string, never>;
            bodyParameters?: {
                [key: string]: string | undefined;
            };
            /** Format: date-time */
            startTime?: string;
            /**
             * Format: date-time
             * @deprecated
             */
            startedAt?: string;
        };
        /** @description Interaction (raw request and response) that occured with the `Institution` in order to fulfil a request. */
        RawResponse: {
            request?: components['schemas']['RawRequest'];
            /** Format: iso8601 */
            duration?: string;
            headers?: {
                [key: string]: string | undefined;
            };
            /** Format: int32 */
            resultCode?: number;
            result?: Record<string, never>;
        };
        /** @description __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. */
        RedirectRequest: {
            /** @description __Mandatory__.Successful redirect after the user complete the authorisation at the `Institution`. */
            url: string;
        };
        /** @description The account to which funds should be returned if the payment is to be later refunded. */
        RefundAccount: {
            name?: string;
            accountIdentifications?: components['schemas']['AccountIdentification'][];
        };
        ResponseForwardedData: {
            headers?: {
                [key: string]: string | undefined;
            };
            url?: string;
        };
        ResponseListMeta: {
            tracingId?: string;
            /** Format: int32 */
            count?: number;
            pagination?: components['schemas']['Pagination'];
        };
        ResponseMeta: {
            tracingId?: string;
        };
        ResponseMetaWithCount: {
            tracingId?: string;
            /** Format: int32 */
            count?: number;
        };
        /**
         * @description __Conditional__. Used to update the authorisation with the sca method of the user's choice for the `Institution` that uses the embedded authorisation flow. If the user has multiple sca methods configured, the `Institution` will allow the user to select from each of these options. <br><br>When the user has multiple sca methods for the `Institution`, this is the second step required in the embedded authorisation flow to authorise the `Consent`.
         * @example {
         *   "id": "944",
         *   "type": "PUSH_OTP",
         *   "description": "SecureSIGN"
         * }
         */
        ScaMethod: {
            /**
             * @description __Mandatory__. The id of the sca method provided by the `Institution`
             * @example 258211#OPTICAL
             */
            id: string;
            type?: components['schemas']['Type'];
            /**
             * @description __Optional__. A description of the sca method if provided by the `Institution`
             * @example Testkarte Hr. Haubach_1, optisch
             */
            description?: string;
            /**
             * @description Additional information from the institution to provide to the PSU to help with the selected SCA method. The language is determined by the institution and may vary.
             * @example Bitte bestätigen Sie den Vorgang in Ihrer SecureGo plus App
             */
            information?: string;
            /**
             * @description Data from the institution to provide to the PSU to complete authorisation. The language is determined by the institution and may vary.
             * @example [
             *   "0488701109982928CY439040000100000010000520,00"
             * ]
             */
            data?: string[];
        };
        /**
         * @description The attribute on which resources / records returned should be sorted. Valid options for the sort parameter.
         * @enum {string}
         */
        SortEnum: 'date' | '-date';
        /**
         * @description The latest operational status.
         * @enum {string}
         */
        MonitoringStatusEnum: 'Up' | 'Down' | 'Warning' | 'Unknown' | 'Expired';
        /** @description Unique reference for a statement period. This may be optionally populated if available. */
        StatementReference: {
            value?: string;
        };
        Subcategory: {
            /** Format: uuid */
            id?: string;
            label?: string;
        };
        /** @description Details of a transaction (credit or debit) that has occurred on the account. */
        Transaction: {
            /** @description Unique identifier of the transaction. */
            id?: string;
            /** Format: date-time */
            date?: string;
            /**
             * Format: date-time
             * @description Date and time of when a transaction was booked.
             */
            bookingDateTime?: string;
            /**
             * Format: date-time
             * @description Date and time when the funds either cease to be available (for debit transactions) or become available (for credit transactions) to the account owner.
             */
            valueDateTime?: string;
            status?: components['schemas']['TransactionStatusEnum'];
            /** @description The transaction amount. */
            amount?: number;
            /** @description Currency the transaction amount is denoted in. Specified as a 3-letter ISO 4217 code. */
            currency?: string;
            transactionAmount?: components['schemas']['Amount'];
            grossAmount?: components['schemas']['Amount'];
            currencyExchange?: components['schemas']['CurrencyExchange'];
            chargeDetails?: components['schemas']['TransactionChargeDetails'];
            reference?: string;
            statementReferences?: components['schemas']['StatementReference'][];
            description?: string;
            /** @description Further details on the transaction. This is narrative data, caught as unstructured text. */
            transactionInformation?: string[];
            addressDetails?: components['schemas']['AddressDetails'];
            isoBankTransactionCode?: components['schemas']['IsoBankTransactionCode'];
            proprietaryBankTransactionCode?: components['schemas']['ProprietaryBankTransactionCode'];
            balance?: components['schemas']['TransactionBalance'];
            /** @description Details of the beneficiary [person or business]. */
            payeeDetails?: {
                /** @description The account holder name of the Payee. */
                name?: string;
                /** @description The account identifications that identify the Payee's bank account. */
                accountIdentifications?: {
                    /** @description Describes the format of the account. */
                    type?: components['schemas']['AccountIdentificationType'];
                    /** @description The value associated with the account identification type. */
                    identification?: string;
                }[];
            };
            /** @description Details of the benefactor [person or business]. */
            payerDetails?: {
                /** @description The account holder name of the Payer. */
                name?: string;
                /** @description The account identifications that identify the Payer's bank account. */
                accountIdentifications?: {
                    /** @description Describes the format of the account. */
                    type?: components['schemas']['AccountIdentificationType'];
                    /** @description The value associated with the account identification type. */
                    identification?: string;
                }[];
            };
            merchant?: components['schemas']['Merchant'];
            enrichment?: components['schemas']['Enrichment'];
            /** @description Additional information that cannot be captured in a structured field or block. */
            supplementaryData?: Record<string, never>;
            /**
             * @description __Optional__. Specifies the Mutability of the Transaction record.<ul><li>A transaction with a `Status` of `Pending` is mutable.</li><li>A transaction with a `Status` of `Booked` where the `TransactionMutability` flag is not specified is not guaranteed to be immutable (although in most instances it will be).</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Immutable` is immutable.</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Mutable` is mutable.</li></ul>
             * @example Mutable
             */
            transactionMutability?: string;
        };
        ApiListResponseOfTransaction: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['Transaction'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            paging?: components['schemas']['FilteredClientPayloadListTransaction'];
            tracingId?: string;
        };
        /** @description Details the charges that will apply to the transaction. */
        TransactionChargeDetails: {
            chargeAmount?: components['schemas']['Amount'];
        };
        /** @description An unique identifier for the transaction that was generated by Yapily. This is a hash of transaction attributes and may be useful an id is not present (and therefore hasn't been provided by an Institution). */
        TransactionHash: {
            hash?: string;
        };
        /** @description The frequency at which transactions occurred. */
        TransactionSchedule: {
            /**
             * @description How often the transaction happens.  Can be 'Monthly', 'Twice monthly', 'Every two weeks', 'Every four weeks', 'Daily', 'Weekly', 'Every weekday', 'Twice daily', 'Twice every weekday'
             * @example Daily
             */
            frequency?: string;
            /**
             * @description When in the cycle the transaction occurs.  Can be 'Daily', 'Twice daily', 'Twice every weekday', 'Every weekday', 'Weekly on day n', 'Every two weeks on day n', 'Monthly on working day before day n of month', 'Monthly on last working day of month', 'Twice a month on 15th and last working day of month', 'Every four weeks on day n'
             * @example Daily
             */
            detailedFrequency?: string;
            /**
             * @description The n in detailedFrequency where there is one - for week-based frequencies, an integer from 0 to 6 where 0 is Monday or for month-based frequencies, an integer from 0 to 27 where 0 is the first day of the month
             * @example 1
             */
            detailedFrequencyParameter?: number;
        };
        /** @enum {string} */
        TransactionStatusEnum: 'BOOKED' | 'PENDING';
        /** @description Lists all possible transaction streams identified for the `Application User`. */
        TransactionStream: {
            /**
             * @description The name of the Transaction Stream.
             * @example Amazon Marketplace
             */
            name?: string;
            /** @description A list of transaction details, identified by Yapily data services. */
            transactions?: components['schemas']['EnrichedTransaction'][];
            transactionSchedule?: components['schemas']['TransactionSchedule'];
            /**
             * @description The consistency of the transaction.  This is a number between 0 and 1 with 1 being the most consistent schedule.
             * @example 0.44
             */
            scheduleConsistencyScore?: number;
            /**
             * Format: date
             * @description When is the transaction expected to occur next.
             * @example 2019-10-04
             */
            nextExpectedTransactionDate?: string;
            /**
             * Format: date
             * @description When is the first recorded transaction date
             * @example 2020-04-24
             */
            earliestTransactionDate?: string;
            /**
             * Format: date
             * @description When is the most recent transaction date
             * @example 2019-10-03
             */
            mostRecentTransactionDate?: string;
            /**
             * @description The consistency of the amount of the transaction.  This is a number between 0 and 1 with 1 being the most consistent amount.
             * @example 0.74
             */
            amountConsistencyScore?: number;
            /**
             * @description The average amount of the transaction stream
             * @example 19.708
             */
            averageAmount?: number;
        };
        /** @description Terminated transaction stream generated as part of the financial profile for a User. */
        TerminatedTransactionStream: {
            /**
             * @description The name of the TransactionStream
             * @example Amazon Marketplace
             */
            name?: string;
            /** @description A list of Transactions from the transaction stream. */
            transactions?: components['schemas']['EnrichedTransaction'][];
            transactionSchedule?: components['schemas']['TransactionSchedule'];
            /**
             * @description The consistency of the transaction.  This is a number between 0 and 1 with 1 being the most consistent schedule.
             * @example 0.44
             */
            scheduleConsistencyScore?: number;
            /**
             * Format: date
             * @description When is the transaction expected to occur next.
             * @example 2019-10-04
             */
            nextExpectedTransactionDate?: string;
            /**
             * Format: date
             * @description When is the first recorded transaction date
             * @example 2020-04-24
             */
            earliestTransactionDate?: string;
            /**
             * Format: date
             * @description When is the most recent transaction date
             * @example 2019-10-03
             */
            mostRecentTransactionDate?: string;
            /**
             * @description The consistency of the amount of the transaction.  This is a number between 0 and 1 with 1 being the most consistent amount.
             * @example 0.74
             */
            amountConsistencyScore?: number;
            /**
             * @description The average amount of the transaction stream
             * @example 19.708
             */
            averageAmount?: number;
            /**
             * Format: int32
             * @description Missed transactions of transaction stream
             * @example 3
             */
            missedTransactions?: number;
        };
        /**
         * @description The `SCA` method type available for the user
         * @enum {string}
         */
        Type: 'SMS_OTP' | 'CHIP_OTP' | 'PHOTO_OTP' | 'PUSH_OTP';
        /**
         * @description The customer segment of the account.
         * @enum {string}
         */
        UsageType: 'PERSONAL' | 'BUSINESS' | 'OTHER' | 'UNKNOWN';
        /** @description __Conditional__. Used to capture the user's credentials to allow them to login to an `Institution` that uses the embedded account authorisation flow. <br><br>This is the first step required in the embedded account authorisation flow to authorise the `Consent`. */
        UserCredentials: {
            /**
             * @description __Mandatory__. The login id for the user for a particular `Institution`.
             * @example 6154057725
             */
            id: string;
            /**
             * @description __Conditional__. The corporate login for the user for a particular corporate `Institution`.
             * @example 6345898763
             */
            corporateId?: string;
            /**
             * @description __Mandatory__. The password of the user to login to a particular `Institution`.
             * @example PISPWD12
             */
            password: string;
        };
        /** @description Deletion of the user. Includes the user profile and all associate consents. */
        UserDeleteResponse: {
            /** @description Unique identifier of the user. */
            id?: string;
            deleteStatus?: components['schemas']['DeleteStatusEnum'];
            /**
             * Format: date-time
             * @description Date and time that the user was created.
             */
            creationDate?: string;
            userConsents?: components['schemas']['ConsentDeleteResponse'][];
        };
        ApiResponseOfUserDeleteResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['UserDeleteResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        /** Request to create a subscription for notifications */
        EventSubscriptionRequest: {
            /**
             * @description Unique identifier of the event type (for which notifications will be sent).<br><br>Allowed values: payment.status, payment.status.completed, payment.isoStatus, virtualAccount.payIn.status, virtualAccount.payOut.status, virtualAccount.createBeneficiary.status, virtualAccount.account.status, virtualAccount.client.status, virtualAccount.refund.status, virtualAccount.payOut.return
             * @example payment.status.completed
             */
            eventTypeId: string;
            notification: components['schemas']['Notification'];
        };
        /** Response on successful creation of event subscription */
        EventSubscriptionResponse: {
            /**
             * @description Unique identifier of the event type (for which notifications will be sent)
             * @example payment.status.completed
             */
            eventTypeId: string;
            /**
             * Format: uuid
             * @description Application related to event subscription.
             * @example 2698db90-6635-4f76-b673-5ce8e2aeda0e
             */
            applicationId: string;
            /**
             * @description Creation date of event subscription.
             * @example 28-07-2021 15:47:03
             */
            created: string;
            notification: components['schemas']['Notification'];
        };
        /** Response upon successful unsubscribe on subscription */
        EventSubscriptionDeleteResponse: {
            /**
             * @description Unique identifier of the event type (for which notifications will be sent)
             * @example payment.status.completed
             */
            eventTypeId: string;
            /**
             * Format: uuid
             * @description Application related to event subscription.
             * @example 2698db90-6635-4f76-b673-5ce8e2aeda0e
             */
            applicationId: string;
            /**
             * Format: date-time
             * @description Creation datetime of event subscription.
             * @example 28-07-2021 15:47:03
             */
            created: string;
            deleteStatus: components['schemas']['DeleteStatusEnum'];
        };
        /** @description Subscription details for how and where to receive notifications. */
        Notification: {
            /**
             * @description How the notification will be delivered. This is currently only via WEBHOOK.
             * @example WEBHOOK
             */
            type: string;
            /**
             * @description URL to which the notification will be sent.
             * @example https://httpbin.com/new_endpoint
             */
            url: string;
        };
        ApiResponseOfEventSubscriptionResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['EventSubscriptionResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        ApiListResponseOfEventSubscriptionResponse: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['EventSubscriptionResponse'][];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            paging?: components['schemas']['FilteredClientPayloadListTransaction'];
            tracingId?: string;
        };
        ApiResponseOfEventSubscriptionDeleteResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['EventSubscriptionDeleteResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        VirtualAccount: {
            /**
             * @description Unique id of the account
             * @example eb2ad083-a111-4143-8756-a3a3cef4031c
             */
            id?: string;
            /**
             * Format: date-time
             * @description Date and time that the account was created
             * @example 2020-04-24T00:30:19.951Z
             */
            createdDateTime?: string;
            /**
             * @description The current state of the Account <br> PENDING - Creation of the account is in progress <br> ACTIVE - The account is active and in use <br> FAILED - An issue occured during account creation <br> SUSPENDED - The account has been temporarily suspended by the account provider. It cannot currently be used <br> CLOSED - The account has been permanently closed and cannot be used
             * @example ACTIVE
             */
            status?: string;
            /**
             * @description Reference that can be provided in order to help with identification of the account
             * @example MyAccount123
             */
            nickname?: string;
            /**
             * @description Three-letter ISO 4217 currency code
             * @example GBP
             */
            currency?: string;
            balances?: components['schemas']['VirtualAccountBalance'][];
            bankAccount?: components['schemas']['VirtualAccountBankAccount'];
        };
        VirtualAccountBalance: {
            type?: components['schemas']['VirtualAccountBalanceType'];
            balanceAmount?: components['schemas']['Amount'];
        };
        /** @enum {string} */
        VirtualAccountBalanceType: 'INTERIM_AVAILABLE' | 'INTERIM_BOOKED';
        VirtualAccountBankAccount: {
            /**
             * @description Three-letter ISO 4217 currency code
             * @example GBP
             */
            currency?: string;
            /** @example Lloyds Bank */
            bankName?: string;
            /** @example WE12 ABC */
            bankAddress?: string;
            /**
             * @description Two-letter ISO 3166 country code
             * @example GB
             */
            bankCountry?: string;
            /**
             * @description The account identifications that identify the Beneficiary bank account.
             * @example [
             *   {
             *     "identification": "401016",
             *     "type": "SORT_CODE"
             *   },
             *   {
             *     "identification": "71518920",
             *     "type": "ACCOUNT_NUMBER"
             *   }
             * ]
             */
            accountIdentifications?: components['schemas']['AccountIdentification'][];
            /**
             * @description Reference required for paying into the account. When no reference is provided, then one is not required to pay into the acount.
             * @example Ref1249944
             */
            payInReference?: string;
        };
        VirtualAccountBeneficiaryRequest: {
            /**
             * @description Reference that can be provided in order to help with identification of the Beneficiary
             * @example MyBeneficiary123
             */
            nickname: string;
            /**
             * @description Indicates the type of Beneficiary as either an INDIVIDUAL or BUSINESS
             * @example INDIVIDUAL
             */
            type: string;
            /** @example Mr Jack Williams */
            name: string;
            /**
             * Format: date
             * @example 2019-10-04
             */
            birthDate?: string;
            /** @description Beneficiary payment schemes */
            paymentSchemes: string[];
            address: components['schemas']['VirtualAccountBeneficiaryAddress'];
            account: components['schemas']['VirtualAccountBeneficiaryAccount'];
        };
        VirtualAccountRequest: {
            /**
             * @description Reference that can be provided in order to help with identification of the account
             * @example MyAccount123
             */
            nickname: string;
            /**
             * @description Three-letter ISO 4217 currency code
             * @example GBP
             */
            currency: string;
        };
        UpdateVirtualAccountRequest: {
            /**
             * @description New reference that can be provided in order to help with identification of the account
             * @example MyAccount123
             */
            nickname?: string;
            /**
             * @description New state of the Account: CLOSED - The account has been permanently closed and cannot be used
             * @example CLOSED
             */
            status?: string;
        };
        VirtualAccountPayment: {
            /**
             * @description Unique id of the payment
             * @example za2ad0234-a333-5435-8787-a3a3cef4031c
             */
            id?: string;
            /**
             * Format: date-time
             * @description Date and time that the payment was created
             * @example 2022-04-24T00:30:19.951Z
             */
            createdDateTime?: string;
            /**
             * Format: date
             * @description Date on which the payment instruction will be executed, that may be in the future
             * @example 2022-10-04
             */
            paymentDate?: string;
            /**
             * @description Type of payment. One of PAY_IN, PAY_OUT, RETURN_IN or RETURN_OUT
             * @example PAY_IN
             */
            type?: string;
            /**
             * @description Method of settlement to complete the payment. One of: <br> FASTER_PAYMENTS <br> SEPA_CREDIT <br> SEPA_INSTANT <br> SWIFT <br> SWIFT_EXPRESS <br> CHAPS <br> IAT <br> WIRE <br> TRANSFER
             * @example FASTER_PAYMENTS
             */
            paymentScheme?: string;
            amount?: components['schemas']['Amount'] & Record<string, never>;
            /**
             * @description Reference to be associated with the payment. This will be appear on the beneficiary's bank statement
             * @example Invoice 1267765
             */
            reference?: string;
            /**
             * @description The current state of the transaction <br> INITIATED - The transaction request is acknowledged and will not undergo validation checks <br> PENDING - Initial checks were successful and the payment is pending processing. This is primarily used for future dated payments that have not yet reached their payment date <br> PROCESSING - Initial checks succeeded and the transaction request is now being processed <br> COMPLETED - The transaction has been successfully processed (terminal status) <br> FAILED - An failure occured during transaction processing (terminal status)
             * @example INITIATED
             */
            status?: string;
            source?: components['schemas']['VirtualAccountPaymentSource'];
            destination?: components['schemas']['VirtualAccountPaymentDestination'];
            /**
             * @description Unique id of the original payment that was refunded
             * @example za2ad0234-a333-5435-8787-a3a3cef4031c
             */
            originalPaymentId?: string;
        };
        VirtualAccountPayInDetails: {
            /**
             * @description Unique id of the payment
             * @example za2ad0234-a333-5435-8787-a3a3cef4031c
             */
            id?: string;
            /**
             * @description Method of settlement to complete the payment. One of: <br> FASTER_PAYMENTS <br> SEPA_CREDIT <br> SEPA_INSTANT <br> SWIFT <br> SWIFT_EXPRESS <br> CHAPS <br> IAT <br> WIRE <br> TRANSFER
             * @example FASTER_PAYMENTS
             */
            paymentScheme?: string;
            amount?: components['schemas']['Amount'] & Record<string, never>;
            /**
             * @description Reference associated with the payment and which appears on the beneficiary's bank statement
             * @example Invoice 1267765
             */
            reference?: string;
            source?: components['schemas']['VirtualAccountPaymentSource'];
            /**
             * @description Account source name
             * @example Sam Sender
             */
            name?: string;
            /**
             * @description The address of the source bank account
             * @example 123 Baker Street
             */
            address?: string;
        };
        VirtualAccountPayOutRequest: {
            /**
             * @description Unique id of the source / payer account
             * @example eb2ad083-a111-4143-8756-a3a3cef4031c
             */
            accountId: string;
            amount: components['schemas']['Amount'] & Record<string, never>;
            /**
             * @description Reference to be associated with the payment. This will be appear on the beneficiary's bank statement
             * @example Invoice 1267765
             */
            reference: string;
            /**
             * @description Unique id of the beneficiary to whom the payment will be made
             * @example sd6ad034-a111-4143-8756-a3a3cef4045v
             */
            beneficiaryId: string;
            /**
             * @description Method of settlement to complete the payment. One of: <br> FASTER_PAYMENTS <br> SEPA_CREDIT <br> SEPA_INSTANT <br> SWIFT <br> SWIFT_EXPRESS <br> CHAPS <br> IAT <br> WIRE
             * @example FASTER_PAYMENTS
             */
            paymentScheme: string;
            /**
             * Format: date
             * @description Date on which a payment instruction will be executed, that must be in the future
             * @example 2022-10-04
             */
            paymentDate?: string;
        };
        VirtualAccountBeneficiary: {
            /**
             * @description Unique id of the Beneficiary
             * @example eb2ad083-a111-4143-8756-a3a3cef4031c
             */
            id?: string;
            /** @description Beneficiary payment schemes */
            paymentSchemes?: string[];
            /**
             * @description Reference that can be provided in order to help with identification of the Beneficiary
             * @example MyBeneficiary123
             */
            nickname?: string;
            /**
             * @description Indicates the type of Beneficiary as either a INDIVIDUAL or BUSINESS
             * @example INDIVIDUAL
             */
            type?: string;
            /** @example Mr Jack Williams */
            name?: string;
            /**
             * Format: date
             * @example 2019-10-04
             */
            birthDate?: string;
            address?: components['schemas']['VirtualAccountBeneficiaryAddress'];
            account?: components['schemas']['VirtualAccountBeneficiaryAccount'];
            /**
             * @description The current status of the Beneficiary <br> PENDING - Beneficiary is awaiting verification <br> ACTIVE - Beneficiary can be used in a Pay Out <br> BLOCKED - Beneficiary cannot be used in a Pay Out
             * @example ACTIVE
             */
            status?: string;
        };
        VirtualAccountBeneficiaryAddress: {
            /** @example 12 New Street */
            addressLine?: string;
            /** @example London */
            townName?: string;
            /** @example NE15 PLZ */
            postCode?: string;
            /**
             * @description Two-letter ISO 3166 country code
             * @example GB
             */
            country: string;
        };
        VirtualAccountBeneficiaryAccount: {
            /**
             * @description Three-letter ISO 4217 currency code
             * @example GBP
             */
            currency: string;
            /** @example Lloyds Bank */
            bankName?: string;
            /** @example WE12 ABC */
            bankAddress?: string;
            /**
             * @description Two-letter ISO 3166 country code
             * @example GB
             */
            bankCountry?: string;
            /**
             * @description The account identifications that identify the Beneficiary bank account.
             * @example [
             *   {
             *     "identification": "401016",
             *     "type": "SORT_CODE"
             *   },
             *   {
             *     "identification": "71518920",
             *     "type": "ACCOUNT_NUMBER"
             *   }
             * ]
             */
            accountIdentifications: components['schemas']['AccountIdentification'][];
        };
        VirtualAccountPaymentSource: {
            /**
             * @description Type of source for a payment. One of ACCOUNT or EXTERNAL
             * @example EXTERNAL
             */
            type: string;
            /**
             * @description Only present if type is ACCOUNT. Identifies the Virtual Account from which the payment was made
             * @example eb2ad083-a111-4143-8756-a3a3cef4031c
             */
            accountId?: string;
            /**
             * @description Only present if type is BENEFICIARY. Identifies the Virtual Account Beneficiary from which the payment was made
             * @example sd6ad034-a111-4143-8756-a3a3cef4045v
             */
            beneficiaryId?: string;
            /**
             * @description Only present if type is EXTERNAL. The account identifications that identify an external source
             * @example [
             *   {
             *     "identification": "401016",
             *     "type": "SORT_CODE"
             *   },
             *   {
             *     "identification": "71518920",
             *     "type": "ACCOUNT_NUMBER"
             *   }
             * ]
             */
            accountIdentifications?: components['schemas']['AccountIdentification'][];
        };
        VirtualAccountPaymentDestination: {
            /**
             * @description Type of destination for a payment. One of ACCOUNT, EXTERNAL or BENEFICIARY
             * @example EXTERNAL
             */
            type: string;
            /**
             * @description Only present if type is ACCOUNT. Identifies the Virtual Account to which the payment was made
             * @example eb2ad083-a111-4143-8756-a3a3cef4031c
             */
            accountId?: string;
            /**
             * @description Only present if type is EXTERNAL. The account identifications that identify an external destination
             * @example [
             *   {
             *     "identification": "401016",
             *     "type": "SORT_CODE"
             *   },
             *   {
             *     "identification": "71518920",
             *     "type": "ACCOUNT_NUMBER"
             *   }
             * ]
             */
            accountIdentifications?: components['schemas']['AccountIdentification'][];
            /**
             * @description Only present if type is BENEFICIARY. Unique id of the beneficiary
             * @example sd6ad034-a111-4143-8756-a3a3cef4045v
             */
            beneficiaryId?: string;
        };
        VirtualAccountTransferRequest: {
            amount: components['schemas']['Amount'] & Record<string, never>;
            /**
             * @description Reference to be associated with the transfer. This will be appear on the destination's bank statement
             * @example Ref 86543
             */
            reference: string;
            source: components['schemas']['VirtualAccountTransferSource'];
            destination: components['schemas']['VirtualAccountTransferDestination'];
        };
        VirtualAccountClientRequest: {
            type: components['schemas']['VirtualAccountClientType'];
            individual?: components['schemas']['VirtualAccountIndividualClient'];
            business?: components['schemas']['VirtualAccountBusinessClient'];
        };
        VirtualAccountClient: {
            /**
             * @description The id generated in the on-boarding process, it will be used as client-id for virtual accounts request
             * @example cf996ecc-8720-4bb3-8dbb-fe9018e0db12
             */
            id?: string;
            type?: components['schemas']['VirtualAccountClientType'];
            kycStatus?: components['schemas']['VirtualAccountKycStatus'];
            status?: components['schemas']['VirtualAccountClientStatus'];
            /** Format: date-time */
            createdDateTime?: string;
            individual?: components['schemas']['VirtualAccountIndividualClient'];
            business?: components['schemas']['VirtualAccountBusinessClient'];
        };
        VirtualAccountIndividualClient: {
            firstName: string;
            middleName?: string;
            lastName: string;
            address?: components['schemas']['VirtualAccountAddress'];
            /** Format: date */
            birthDate: string;
            email: string;
            phone?: string;
        };
        VirtualAccountBusinessClient: {
            name: string;
            type: components['schemas']['VirtualAccountClientBusinessType'];
            registrationNumber: string;
            registeredAddress: components['schemas']['VirtualAccountAddress'];
            tradingAddress?: components['schemas']['VirtualAccountAddress'];
            contactName: string;
            email: string;
            phone: string;
        };
        VirtualAccountAddress: {
            /**
             * @description __Mandatory__. AddressLine1 of the sub-client
             * @example 12 New Street
             */
            addressLine1: string;
            /**
             * @description __Optional__. AddressLine2 of the sub-client
             * @example Barcelona CA 08005
             */
            addressLine2?: string;
            /**
             * @description __Mandatory__. Town name of the sub-client
             * @example Barcelona
             */
            townName: string;
            /**
             * @description __Optional__. Address postcode of the sub-client
             * @example 08005
             */
            postCode?: string;
            /**
             * @description __Optional__. Country of the sub-client
             * @example ES
             */
            country: string;
        };
        /** @enum {string} */
        VirtualAccountClientType: 'INDIVIDUAL' | 'BUSINESS';
        /** @enum {string} */
        VirtualAccountClientBusinessType: 'SOLE_TRADER' | 'LIMITED_LIABILITY' | 'CHARITY' | 'PUBLIC_LIMITED_COMPANY' | 'ORDINARY_PARTNERSHIP' | 'LIMITED_PARTNERSHIP';
        VirtualAccountTransferSource: {
            /**
             * @description Identifies the Virtual Account from which the transfer was made
             * @example eb2ad083-a111-4143-8756-a3a3cef4031c
             */
            accountId: string;
        };
        VirtualAccountTransferDestination: {
            /**
             * @description Identifies the Virtual Account to which the transfer was made
             * @example eb2ad083-a111-4143-8756-a3a3cef4031c
             */
            accountId: string;
        };
        /** @enum {string} */
        VirtualAccountKycStatus: 'UNVERIFIED' | 'VERIFIED';
        /** @enum {string} */
        VirtualAccountClientStatus: 'PENDING' | 'ACTIVE' | 'SUSPENDED';
        VirtualAccountRefundRequest: {
            originalPayment: components['schemas']['VirtualAccountOriginalPayment'];
            amount?: components['schemas']['Amount'] & Record<string, never>;
            /**
             * @description Reason for the refund. Allowed values [REQUESTED_BY_CUSTOMER, DUPLICATE_PAYMENT, OTHER]
             * @example REQUESTED_BY_CUSTOMER
             */
            reason?: string;
            /**
             * Format: date
             * @description The date that the refund instruction will be executed. Must be in the present or future
             * @example 2022-10-04
             */
            paymentDate?: string;
            /**
             * @description Reference to be associated with the refund. This will appear on the beneficiary's bank statement
             * @example Invoice 1267765
             */
            reference?: string;
            /**
             * @description Indicates which account will be used for refund. Allowed value: SOURCE
             * @example SOURCE
             */
            refundTo: string;
            /**
             * @description __Conditional__. This field is required when refundTo is BENEFICIARY. Indicates if the refund is back to the original payer. Allowed value: true
             * @example true
             */
            refundToOriginalPayer?: boolean;
            /**
             * @description __Conditional__. This field is required when refundTo is SOURCE. Indicates the type of Beneficiary as either an INDIVIDUAL or BUSINESS.
             * @example INDIVIDUAL
             */
            beneficiaryType?: string;
            beneficiary?: components['schemas']['VirtualAccountBeneficiaryRequest'] & Record<string, never>;
        };
        VirtualAccountOriginalPayment: {
            paymentInitiationId?: string;
        };
        ApiListResponseOfVirtualAccountRefund: {
            meta?: components['schemas']['ResponseMeta'];
            links?: {
                next?: string;
            };
            data?: components['schemas']['VirtualAccountRefund'][];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        ApiResponseOfVirtualAccountRefund: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['VirtualAccountRefund'];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        VirtualAccountRefund: {
            /**
             * @description Unique id of the refund
             * @example za2ad0234-a333-5435-8787-a3a3cef4031c
             */
            id?: string;
            originalPayment?: components['schemas']['VirtualAccountOriginalPayment'];
            /**
             * @description The current state of the transaction <br> INITIATED - The transaction request is acknowledged and will not undergo validation checks <br> PENDING - Initial checks were successful and the payment is pending processing. This is primarily used for future dated payments that have not yet reached their payment date <br> PROCESSING - Initial checks succeeded and the transaction request is now being processed <br> COMPLETED - The transaction has been successfully processed (terminal status) <br> FAILED - An failure occured during transaction processing (terminal status)
             * @example INITIATED
             */
            status?: string;
            amount?: components['schemas']['Amount'] & Record<string, never>;
            /** @description List of issues relating to a FAILED status */
            issues?: components['schemas']['ErrorIssue'][];
            /**
             * @description The reason of the refund request
             * @example REQUESTED_BY_CUSTOMER
             */
            reason?: string;
            /**
             * Format: date
             * @description Date on which the refund instruction will be executed, that may be in the future
             * @example 2022-10-04
             */
            paymentDate?: string;
            /**
             * @description Reference to be associated with the refund. This will appear on the beneficiary's bank statement
             * @example Refund 123
             */
            reference?: string;
            /**
             * @description Indicates which account will be used for refund.
             * @example SOURCE
             */
            refundTo?: string;
            /**
             * @description Indicates if the refund is back to the original payer.
             * @example true
             */
            refundToOriginalPayer?: boolean;
            /**
             * @description Indicates the type of Beneficiary as either an INDIVIDUAL or BUSINESS
             * @example INDIVIDUAL
             */
            beneficiaryType?: string;
            /**
             * @description Unique id of the beneficiary to whom the payment will be made
             * @example sd6ad034-a111-4143-8756-a3a3cef4045v
             */
            beneficiaryId?: string;
            /**
             * Format: date-time
             * @description Date and time that the refund was created
             * @example 2022-04-24T00:30:19.951Z
             */
            createdDateTime?: string;
            /**
             * Format: date-time
             * @description Date and time that the refund was updated
             * @example 2022-04-24T00:30:19.951Z
             */
            updatedDateTime?: string;
        };
        /** @description Detailed information regarding the issue that was experienced during processing of the request */
        ErrorIssue: {
            /** @description Category of the issue */
            type: string;
            /** @description Code that uniquely identifies the type of issue */
            code: string;
            /** @description Identfies the parameter / property within the request (headers, query parameters or body) that the issue relates to. For headers and query parameters, it refers to the parameter name. For the body, it refers to the JSONPath of the property */
            parameter?: string;
            /** @description Human readable description of the issue that was experienced */
            message?: string;
            institutionError?: components['schemas']['InstitutionError'];
        };
        ErrorDetails: {
            /** @description Unique identifier of the request, used by Yapily for support purposes */
            tracingId: string;
            /**
             * Format: int32
             * @description Numeric HTTP status code associated with the error
             */
            code: number;
            /** @description Textual description of the HTTP status */
            status: string;
            /** @description Link to where further information regarding the error can be found */
            supportUrl?: string;
            /** @description Source of the error. This may be YAPILY, the INSTITUTION, or the USER */
            source?: string;
            /** @description List of issues relating to the error */
            issues?: components['schemas']['ErrorIssue'][];
        };
        ApiResponseOfVirtualAccountBeneficiary: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['VirtualAccountBeneficiary'];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        ApiListResponseOfVirtualAccountBeneficiary: {
            meta?: components['schemas']['ResponseListMeta'];
            links?: components['schemas']['Links'];
            data?: components['schemas']['VirtualAccountBeneficiary'][];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        ApiResponseOfVirtualAccountPayment: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['VirtualAccountPayment'];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        ApiResponseOfVirtualAccountPayInDetails: {
            meta?: components['schemas']['ResponseMeta'];
            links?: {
                [key: string]: string | undefined;
            };
            data?: components['schemas']['VirtualAccountPayInDetails'];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        ApiListResponseOfVirtualAccount: {
            meta?: components['schemas']['ResponseListMeta'];
            links?: components['schemas']['Links'];
            data?: components['schemas']['VirtualAccount'][];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        ApiResponseOfVirtualAccount: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['VirtualAccount'];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        ApiListResponseOfVirtualAccountPayment: {
            meta?: components['schemas']['ResponseListMeta'];
            links?: components['schemas']['Links'];
            data?: components['schemas']['VirtualAccountPayment'][];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        ApiResponseOfVirtualAccountClient: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['VirtualAccountClient'];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        ApiListResponseOfVirtualAccountClient: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['VirtualAccountClient'][];
            links?: components['schemas']['Links'];
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
        };
        Links: {
            self?: string;
            first?: string;
            last?: string;
            next?: string;
            previous?: string;
        };
        SweepingAuthorisationRequest: {
            /**
             * Format: uuid
             * @description This is the Yapily user identifier for the user returned by the create user step POST ../users
             */
            userId?: string;
            /** @description A client's own user reference. If the client wants to work with their own unique references for individual PSUs then they can use the applicationUserId property to provide that value. Where Yapily does not already have a Yapily userId that matches the supplied applicationUserId, then a new Yapily userId is created automatically and linked to the applicationUserId value.  Clients can then use either their own applicationUserId or the Yapily userId to reference the same user in future calls. */
            applicationUserId?: string;
            /** @description Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect. */
            forwardParameters?: string[];
            contextType?: components['schemas']['PaymentContextType'];
            /**
             * @description __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
             * @example yapily-mock
             */
            institutionId: string;
            /**
             * @description __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.
             * @example https://display-parameters.com
             */
            callback?: string;
            redirect?: components['schemas']['RedirectRequest'];
            /**
             * @description __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.
             * @example false
             */
            oneTimeToken?: boolean;
            controlParameters: components['schemas']['SweepingControlParameters'];
            initiationDetails: components['schemas']['InitiationDetails'];
            complianceData?: components['schemas']['ComplianceData'];
        };
        NonSweepingAuthorisationRequest: {
            /**
             * Format: uuid
             * @description This is the Yapily user identifier for the user returned by the create user step POST ../users
             */
            userId?: string;
            /** @description A client's own user reference. If the client wants to work with their own unique references for individual PSUs then they can use the applicationUserId property to provide that value. Where Yapily does not already have a Yapily userId that matches the supplied applicationUserId, then a new Yapily userId is created automatically and linked to the applicationUserId value.  Clients can then use either their own applicationUserId or the Yapily userId to reference the same user in future calls. */
            applicationUserId?: string;
            /** @description Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect. */
            forwardParameters?: string[];
            contextType?: components['schemas']['PaymentContextType'];
            /**
             * @description __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.
             * @example yapily-mock
             */
            institutionId: string;
            /**
             * @description __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.
             * @example https://display-parameters.com
             */
            callback?: string;
            redirect?: components['schemas']['RedirectRequest'];
            /**
             * @description __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.
             * @example false
             */
            oneTimeToken?: boolean;
            controlParameters: components['schemas']['NonSweepingControlParameters'];
            initiationDetails: components['schemas']['InitiationDetails'];
            complianceData?: components['schemas']['ComplianceData'];
        };
        SweepingAuthorisationResponse: {
            /** Format: uuid */
            id?: string;
            /**
             * Format: uuid
             * @description This is the Yapily user identifier for the user returned by the create user step POST ../users
             */
            userId?: string;
            /** @description A client's own user reference. If the client wants to work with their own unique references for individual PSUs then they can use the applicationUserId property to provide that value. Where Yapily does not already have a Yapily userId that matches the supplied applicationUserId, then a new Yapily userId is created automatically and linked to the applicationUserId value.  Clients can then use either their own applicationUserId or the Yapily userId to reference the same user in future calls. */
            applicationUserId?: string;
            /** @description The reference to the Institution which identifies which institution the authorisation request is sent to. */
            institutionId?: string;
            status?: components['schemas']['AuthorisationStatus'];
            /** Format: date-time */
            createdAt?: string;
            /** @description __Optional__. Used to granularly specify the set of features that the user will give their consent for when requesting access to their account information. Depending on the `Institution`, this may also populate a consent screen which list these scopes before the user authorises.<br><br>This endpoint accepts allow all [Financial Data Features](/guides/financial-data/features/#feature-list) that the `Institution` supports.To find out which scopes an `Institution` supports, check [GET Institution](./#get-institution). */
            featureScope?: components['schemas']['FeatureEnum'][];
            /** @description The `consent-token` containing the user's authorisation to make the payment request. */
            consentToken?: string;
            state?: string;
            /** Format: date-time */
            authorizedAt?: string;
            /** @description Identification of the consent at the Institution. */
            institutionConsentId?: string;
            authorisationUrl?: string;
            qrCodeUrl?: string;
            controlParameters?: components['schemas']['SweepingControlParameters'];
            payer?: components['schemas']['Payer'];
            initiationDetails?: components['schemas']['InitiationDetails'];
        };
        NonSweepingAuthorisationResponse: {
            /** Format: uuid */
            id?: string;
            /**
             * Format: uuid
             * @description This is the Yapily user identifier for the user returned by the create user step POST ../users
             */
            userId?: string;
            /** @description A client's own user reference. If the client wants to work with their own unique references for individual PSUs then they can use the applicationUserId property to provide that value. Where Yapily does not already have a Yapily userId that matches the supplied applicationUserId, then a new Yapily userId is created automatically and linked to the applicationUserId value.  Clients can then use either their own applicationUserId or the Yapily userId to reference the same user in future calls. */
            applicationUserId?: string;
            /** @description The reference to the Institution which identifies which institution the authorisation request is sent to. */
            institutionId?: string;
            status?: components['schemas']['AuthorisationStatus'];
            /** Format: date-time */
            createdAt?: string;
            /** @description __Optional__. Used to granularly specify the set of features that the user will give their consent for when requesting access to their account information. Depending on the `Institution`, this may also populate a consent screen which list these scopes before the user authorises.<br><br>This endpoint accepts allow all [Financial Data Features](/guides/financial-data/features/#feature-list) that the `Institution` supports.To find out which scopes an `Institution` supports, check [GET Institution](./#get-institution). */
            featureScope?: components['schemas']['FeatureEnum'][];
            /** @description The `consent-token` containing the user's authorisation to make the payment request. */
            consentToken?: string;
            state?: string;
            /** Format: date-time */
            authorizedAt?: string;
            institutionConsentId?: string;
            authorisationUrl?: string;
            qrCodeUrl?: string;
            controlParameters?: components['schemas']['NonSweepingControlParameters'];
            payer?: components['schemas']['Payer'];
            initiationDetails?: components['schemas']['InitiationDetails'];
        };
        ApiResponseOfSweepingAuthorisationResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['SweepingAuthorisationResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
            raw?: components['schemas']['RawResponse'][];
        };
        ApiResponseOfNonSweepingAuthorisationResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['NonSweepingAuthorisationResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
            raw?: components['schemas']['RawResponse'][];
        };
        /** @description Define the restrictions and limits for payment orders as part of Sweeping VRP consent */
        SweepingControlParameters: {
            /** @description __Mandatory__. Defines the authentication method(s) allowed in payment submission step. Allowed values are [SCA_REQUIRED, SCA_NOT_REQUIRED]. */
            psuAuthenticationMethods: string[];
            periodicLimits: components['schemas']['SweepingPeriodicLimits'][];
            /** @description __Mandatory__. Max amount that can be submitted per payment. */
            maxAmountPerPayment: components['schemas']['Amount'];
            /**
             * Format: date-time
             * @description __Optional__. Start date when the consent becomes valid.
             */
            validFrom?: string;
            /**
             * Format: date-time
             * @description __Optional__. End date when the consent expires and becomes invalid.
             */
            validTo?: string;
        };
        /** @description Define the restrictions and limits for payment orders as part of Non-Sweeping VRP consent */
        NonSweepingControlParameters: {
            /** @description __Mandatory__. Defines the authentication method(s) allowed in payment submission step. Allowed values are [SCA_REQUIRED, SCA_NOT_REQUIRED]. */
            psuAuthenticationMethods: string[];
            periodicLimits: components['schemas']['NonSweepingPeriodicLimits'][];
            /** @description __Mandatory__. Max amount that can be submitted per payment. */
            maxAmountPerPayment: components['schemas']['Amount'];
            /** @description __Optional__. Max cumulative amount that can be submitted under this consent. */
            maxCumulativeAmount?: components['schemas']['Amount'];
            /**
             * Format: int32
             * @description __Optional__. Max number of payments that can be submitted under this consent.
             */
            maxCumulativeNumberOfPayments?: number;
            /**
             * Format: date-time
             * @description __Optional__. Start date when the consent becomes valid.
             */
            validFrom?: string;
            /**
             * Format: date-time
             * @description __Optional__. End date when the consent expires and becomes invalid.
             */
            validTo?: string;
        };
        FundsAvailable: {
            /** @description __Mandatory__. Indicates whether funds are available or not. */
            fundsAvailable: boolean;
            /**
             * Format: date-time
             * @description __Mandatory__. Date and Time when the funds availability is checked.
             */
            fundsAvailableAt: string;
        };
        /** @description The fund confirmation object defining the details of the account and funds to be checked under the Variable Recurring Payment consent. */
        FundsConfirmationRequest: {
            /**
             * @description __Optional__. The payment reference or description. Limited to a maximum of 18 characters long.
             * @example Own Account Sweeping
             */
            reference?: string;
            paymentAmount: components['schemas']['Amount'];
        };
        FundsConfirmationResponse: {
            id?: string;
            /**
             * @description The payment reference or description. Limited to a maximum of 18 characters long.
             * @example Own Account Sweeping
             */
            reference?: string;
            paymentAmount: components['schemas']['Amount'];
            fundsAvailable: components['schemas']['FundsAvailable'];
        };
        ApiResponseOfFundsConfirmationResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['FundsConfirmationResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
            raw?: components['schemas']['RawResponse'][];
        };
        /** @description __Mandatory__. The payment initiation object defining the details of the payment under the Variable Recurring Payment consent. */
        InitiationDetails: {
            /**
             * @description __Optional__. The payment reference or description. Limited to a maximum of 18 characters long.
             * @example Own Account Sweeping
             */
            reference?: string;
            payer?: components['schemas']['Payer'];
            payee?: components['schemas']['Payee'];
        };
        /** @description __Conditional__. Information needed to complete compliance checks. Mandatory for Yapily Connect customers. */
        ComplianceData: {
            payer?: components['schemas']['ComplianceDataPayer'];
        };
        /** @description __Conditional__. Payer details required for compliance checks. */
        ComplianceDataPayer: {
            /**
             * @description The payer type. Allowed values: INDIVIDUAL, BUSINESS. The corresponding object must be included.
             * @example INDIVIDUAL
             */
            type: string;
            individual?: components['schemas']['ComplianceDataIndividual'];
            business?: components['schemas']['ComplianceDataBusiness'];
        };
        /** @description __Conditional__. Mandatory if the type is INDIVIDUAL. */
        ComplianceDataIndividual: {
            /**
             * @description This is the first and last name of your end user.
             * @example John Doe
             */
            name: string;
            /**
             * Format: date
             * @description This is the date of birth of your end user.
             * @example 2000-08-12
             */
            birthDate: string;
        };
        /** @description __Conditional__. Mandatory if the type is BUSINESS. */
        ComplianceDataBusiness: {
            /**
             * @description This is the registered company name of your end user.
             * @example Company LTD
             */
            name: string;
            /**
             * @description This is the registered company number of the business.
             * @example COM123NO
             */
            registrationNumber: string;
            registeredAddress: components['schemas']['ComplianceDataAddress'];
            tradingAddress?: components['schemas']['ComplianceDataAddress'];
        };
        /** @description This is the registered company or trading address of your end user. */
        ComplianceDataAddress: {
            /**
             * @description __Mandatory__. AddressLine1 of the business.
             * @example 123 Queens Street
             */
            addressLine1: string;
            /**
             * @description __Optional__. AddressLine2 of the business.
             * @example Unit 13
             */
            addressLine2?: string;
            /**
             * @description __Mandatory__. Town name of the business.
             * @example York
             */
            townName: string;
            /**
             * @description __Mandatory__. Post code of the business.
             * @example 12345
             */
            postCode: string;
            /**
             * @description __Mandatory__. Country of the business.
             * @example GB
             */
            country: string;
        };
        /** @description __Mandatory__. The payment submission object defining the details of the payment instruction to be executed under the Variable Recurring Payment. */
        SubmissionDetails: {
            /**
             * @description __Optional__. The payment reference or description. Limited to a maximum of 18 characters long.
             * @example Own Account Sweeping
             */
            reference?: string;
            payee: components['schemas']['Payee'];
            paymentAmount: components['schemas']['Amount'];
        };
        /** @description __Mandatory__. The payment request object defining the details of the payment for execution under the Variable Recurring Payment consent. */
        SubmissionRequest: {
            /**
             * @description __Mandatory__. A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.
             * @example 04ab4536gaerfc0e1f93c4f4
             */
            paymentIdempotencyId: string;
            /** @description __Mandatory__. Chosen authentication method for submission step. Allowed values are [SCA_REQUIRED, SCA_NOT_REQUIRED]. */
            psuAuthenticationMethod: string;
            contextType?: components['schemas']['PaymentContextType'];
            paymentAmount: components['schemas']['Amount'];
        };
        SubmissionResponse: {
            id?: string;
            paymentIdempotencyId?: string;
            institutionConsentId?: string;
            status?: components['schemas']['PaymentStatus'];
            statusDetails?: components['schemas']['PaymentStatusDetails'];
            initiationDetails: components['schemas']['InitiationDetails'];
            submissionDetails: components['schemas']['SubmissionDetails'];
            payer?: components['schemas']['Payer'];
            refundAccount?: components['schemas']['RefundAccount'];
            /** Format: date-time */
            expectedExecutionTime?: string;
            /** Format: date-time */
            expectedSettlementTime?: string;
        };
        ApiResponseOfSubmissionResponse: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['SubmissionResponse'];
            links?: {
                [key: string]: string | undefined;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            tracingId?: string;
            raw?: components['schemas']['RawResponse'][];
        };
        SweepingPeriodicLimits: {
            /** @description __Mandatory__. Maximum amount that can be specified in all payment instructions in a given period under this VRP consent. If the Alignment is Calendar, the limit is pro-rated in the first period to the remaining number of days. */
            totalMaxAmount: components['schemas']['Amount'];
            /** @description __Mandatory__. Frequency for which the payment limits are enforced. Allowed values are [DAILY, WEEKLY, FORTNIGHTLY, MONTHLY, YEARLY]. */
            frequency: string;
            /** @description __Mandatory__. Period alignment for which the payment limits are enforced. Allowed values are [CONSENT, CALENDAR]. If CONSENT, then period starts on consent creation date. If CALENDAR, then period lines up with the frequency e.g. WEEKLY period will begin at start of the week in question. */
            alignment: string;
        };
        NonSweepingPeriodicLimits: {
            /** @description __Mandatory__. Maximum amount that can be specified in all payment instructions in a given period under this VRP consent. If the Alignment is Calendar, the limit is pro-rated in the first period to the remaining number of days. */
            totalMaxAmount: components['schemas']['Amount'];
            /** @description __Mandatory__. Frequency for which the payment limits are enforced. Allowed values are [DAILY, WEEKLY, FORTNIGHTLY, MONTHLY, YEARLY]. */
            frequency: string;
            /** @description __Mandatory__. Period alignment for which the payment limits are enforced. Allowed values are [CONSENT, CALENDAR]. If CONSENT, then period starts on consent creation date. If CALENDAR, then period lines up with the frequency e.g. WEEKLY period will begin at start of the week in question. */
            alignment: string;
            /**
             * Format: int32
             * @description __Optional__. Max number of payments that can be submitted under this period.
             */
            maxNumberOfPayments?: number;
        };
        ApiListResponseOfRealTimeTransaction: {
            meta?: components['schemas']['ResponseMetaWithCount'];
            data?: components['schemas']['RealTimeTransaction'][];
            links?: {
                /** @description A cursor or link to the first page in the data set. */
                first?: string;
                /** @description A cursor or link to the previous page in the data set. */
                prev?: string;
                /** @description A cursor or link to the current page in the data set. */
                self?: string;
                /** @description A cursor or link to the next page in the data set. */
                next?: string;
                /** @description A cursor or link to the last page in the data set. */
                last?: string;
            };
            forwardedData?: components['schemas']['ResponseForwardedData'][];
            raw?: components['schemas']['RawResponse'][];
            tracingId?: string;
        };
        RealTimeTransaction: {
            id?: string;
            /** Format: date-time */
            date?: string;
            /** Format: date-time */
            bookingDateTime?: string;
            /** Format: date-time */
            valueDateTime?: string;
            status?: components['schemas']['TransactionStatusEnum'];
            transactionAmount?: components['schemas']['Amount'];
            grossAmount?: components['schemas']['Amount'];
            currencyExchange?: components['schemas']['CurrencyExchange'];
            chargeDetails?: components['schemas']['TransactionChargeDetails'];
            reference?: string;
            statementReferences?: components['schemas']['StatementReference'][];
            description?: string;
            transactionInformation?: string[];
            addressDetails?: components['schemas']['AddressDetails'];
            isoBankTransactionCode?: components['schemas']['IsoBankTransactionCode'];
            proprietaryBankTransactionCode?: components['schemas']['ProprietaryBankTransactionCode'];
            balance?: components['schemas']['TransactionBalance'];
            payeeDetails?: components['schemas']['Payee'];
            payerDetails?: components['schemas']['Payer'];
            merchant?: components['schemas']['Merchant'];
            supplementaryData?: Record<string, never>;
        };
        CreateHostedPaymentRequest: {
            /**
             * Format: uuid
             * @description __Conditional__. Yapily Identifier for the `User` returned by the create user step POST /users. You must provide either a `userId` or `applicationUserId`.
             */
            userId?: string;
            /** @description __Conditional__. Your own `User` reference. This field allows you to use your own unique references for individual users. Where the `User` reference doesn't have an associated Yapily `userId`, a new `userId` is created and linked to it. You must provide either a `userId` or `applicationUserId`. */
            applicationUserId?: string;
            institutionIdentifiers: components['schemas']['InstitutionIdentifiers'];
            userSettings?: components['schemas']['UserSettings'];
            /**
             * @description URL of your server to redirect the user after completion of the payment flow.
             * @example https://tpp-application.com
             */
            redirectUrl: string;
            paymentRequestDetails: components['schemas']['HostedPaymentRequestDetails'];
        };
        CreateHostedPaymentRequestLink: {
            /**
             * Format: uuid
             * @description __Conditional__. Yapily Identifier for the `User` returned by the create user step POST /users. You must either provide `userId` or `applicationUserId`.
             */
            userId?: string;
            /** @description __Conditional__. Your own `User` reference. If you want to work with their own unique references for individual PSUs then you can use the `applicationUserId` property to provide that value. Where Yapily does not already have a Yapily userId that matches the supplied `applicationUserId`, then a new Yapily userId is created automatically and linked to the `applicationUserId` value. You must either provide userId or `applicationUserId`. */
            applicationUserId?: string;
            institutionIdentifiers: components['schemas']['InstitutionIdentifiers'];
            userSettings?: components['schemas']['UserSettings'];
            /**
             * @description URL of your server to redirect the user after completion of the payment flow.
             * @example https://tpp-application.com
             */
            redirectUrl: string;
            /**
             * Format: date-time
             * @description The date and time that the authorisation expires. Must be between 10 minutes and 30 days in the future. If not specified, the authorisation URL will expire 10 minutes after creation.
             */
            authorisationExpiresAt?: string;
            paymentRequestDetails: components['schemas']['HostedPaymentRequestDetailsLink'];
        };
        /** @description Specifies the institution requirements for making the payment. Skips the bank selection screen in payment flow if the `institutionId` and `institutionCountryCode` are provided. */
        InstitutionIdentifiers: {
            /** @description Yapily identifier which identifies the `Institution` the payment request is sent to. */
            institutionId?: string;
            /**
             * @description 2 letter ISO Country code of the `Institution` the payment request is sent to.
             * @example GB
             */
            institutionCountryCode: string;
        };
        /** @description Specifies the institution selected for making the payment. */
        InstitutionIdentifiersResponse: {
            /** @description Yapily identifier which identifies the `Institution` the payment request is sent to. */
            institutionId?: string;
            /**
             * @description 2 letter ISO Country code of the `Institution` the payment request is sent to.
             * @example GB
             */
            institutionCountryCode?: string;
        };
        /** @description Specifies the language and location preferences of the user. */
        UserSettings: {
            /**
             * @description 2 letter ISO Language code which denotes the language preference for the `User`.
             * @example en
             */
            language?: string;
            /**
             * @description 2 letter ISO Country code which denotes the location preference for the `User`.
             * @example GB
             */
            location?: string;
        };
        /** @description Details of the payment. */
        HostedPaymentRequestDetails: {
            /**
             * @description A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.
             * @example 04ab4536gaerfc0e1f93c4f4
             */
            paymentIdempotencyId: string;
            /**
             * @description The payment reference or description. Limited to a maximum of 18 characters for UK institutions.
             * @example Bill payment
             */
            reference?: string;
            contextType?: components['schemas']['PaymentContextType'];
            type: components['schemas']['PaymentType'];
            payee: components['schemas']['Payee'];
            payer?: components['schemas']['Payer'];
            amountDetails: components['schemas']['HostedAmountDetails'];
            /**
             * Format: date
             * @description The date that the payment is due. Displayed to the end user in the payment summary screen.
             */
            paymentDueDate?: string;
        };
        /** @description Details of the payment. */
        HostedPaymentResponseDetails: {
            /**
             * @description A unique identifier provided to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.
             * @example 04ab4536gaerfc0e1f93c4f4
             */
            paymentIdempotencyId?: string;
            /**
             * @description The payment reference or description. Limited to a maximum of 18 characters for UK institutions.
             * @example Bill payment
             */
            reference?: string;
            contextType?: components['schemas']['PaymentContextTypeResponse'];
            type?: components['schemas']['PaymentTypeResponse'];
            payee?: components['schemas']['PayeeDetailsResponse'];
            payer?: components['schemas']['PayerDetailsResponse'];
            amountDetails?: components['schemas']['AmountDetailsResponse'];
            /**
             * Format: date
             * @description The date that the payment is due.
             */
            paymentDueDate?: string;
        };
        HostedPaymentRequestDetailsLink: {
            /**
             * @description The payment reference or description. Limited to a maximum of 18 characters for UK institutions.
             * @example Bill payment
             */
            reference?: string;
            contextType?: components['schemas']['PaymentContextTypeResponse'];
            type?: components['schemas']['PaymentTypeResponse'];
            payee?: components['schemas']['PayeeDetailsResponse'];
            payer?: components['schemas']['PayerDetailsResponse'];
            amountDetails?: components['schemas']['AmountDetailsResponse'];
            /**
             * Format: date
             * @description The date that the payment is due. Displayed to the end user in the payment summary screen.
             */
            paymentDueDate?: string;
        };
        /** @description The payment amount and currency */
        HostedAmountDetails: {
            /**
             * @description The payment amount
             * @example 10.5
             */
            amountToPay: number;
            /**
             * @description The [ISO 4217](https://www.xe.com/iso4217.php) currency code
             * @example GBP
             */
            currency: string;
        };
        HostedPaymentRequestResponse: {
            /**
             * Format: uuid
             * @description Unique Id of the payment request.
             */
            paymentRequestId?: string;
            /**
             * Format: uuid
             * @description Unique Id for the `User` assigned by Yapily.
             */
            userId?: string;
            /** @description Your reference to the `User`. */
            applicationUserId?: string;
            /**
             * Format: uuid
             * @description Unique Id of the `Application` the user is associated with.
             */
            applicationId?: string;
            institutionIdentifiers?: components['schemas']['InstitutionIdentifiersResponse'];
            userSettings?: components['schemas']['UserSettings'];
            /**
             * @description URL of payment server to redirect the user after completion of the payment flow.
             * @example https://tpp-application.com
             */
            redirectUrl?: string;
            paymentRequestDetails?: components['schemas']['HostedPaymentResponseDetails'];
            /** @description The URL of Hosted UI page for the applicationId which initiates the user journey for the payment. <br> URL would be appended with authToken, applicationId and userSettings. */
            hostedUrl?: string;
            /** @description The JWT Token signed by the certificate-vault using Yapily's keys. */
            authToken?: string;
            /**
             * Format: date-time
             * @description The date and time at which the payment was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The date and time at which the auth Token will expire.
             */
            authorisationExpiresAt?: string;
            /** @description Current status of the payment request. <br> Possible Values: <br> ACTIVE <br> INACTIVE */
            status?: string;
        };
        /** @description The phase of the payment. */
        HostedPaymentPhase: {
            /** @description The name of the hosted payment process phase. Allowed values are : <ul> <li> INITIATED  -  Payment process initiated </li><li> DECLINED  -  Payment process failed and will not proceed further </li><li> INSTITUTION_SUBMITTED  -  Payment institution submitted </li><li> EMBEDDED_CREDENTIAL_REQUESTED  -  For embedded banks, a UI element to collect user credentials was displayed </li><li> AUTHORISATION_INITIATED  -  All details required for payment initiation have been collected </li><li> VALIDATION_COMPLETED  -  The payment payload was validated successfully </li><li> AUTHORISATION_CREATED  -  Payment authorisation request created with Institution </li><li> EMBEDDED_CODE_REQUESTED  -  For embedded banks, a UI element to collect SCA for initiated consent was displayed </li><li> EMBEDDED_TYPE_REQUESTED  -  For embedded banks, a UI element to allow the user to select their preferred SCA method for this consent authorisation was displayed  </li><li> EMBEDDED_DECOUPLED_AUTHORISATION  -  For embedded banks, decoupled authoirisation was initiated by the bank </li><li> EMBEDDED_CODE_COLLECTED  -  For embedded banks, SCA code was collected for consent authorisation </li><li> EMBEDDED_TYPE_SELECTED  -  For embedded banks, preferred SCA method was selected for consent authorisation </li><li> CONSENT_POLLING_STARTED  -  We start polling the bank for consent authorisation status </li><li> CONSENT_POLLING_ENDED  -  We finish polling the bank for consent authorisation status </li><li> AUTHORISED  -  Payment authorisation completed </li><li> AUTHORISATION_FAILED  -  Payment authorisation failed and will not proceed further </li><li> AUTHORISATION_REJECTED  -  Payment authorisation rejected and will not proceed further </li><li> SUBMITTED  -  Payment execution created and submitted to Institution </li><li> ACCEPTED  -  Payment execution accepted by Institution and awaiting settlement </li><li> REJECTED  -  Payment or Authorisation request rejected by Institution and will not proceed further </li><li> SETTLEMENT_COMPLETED  -  Payment settlement completed </li><li> STATUS_POLLING_STARTED  -  Payment status polling started </li><li> STATUS_POLLING_ENDED  -  Payment status polling ended </li><li> MERCHANT_ACKNOWLEDGED  -  Payment acknowledgement received from merchant </li><li> FINISHED  -  Payment process completed </li> </ul> */
            phaseName?: string;
            /**
             * Format: date-time
             * @description The date and time when phase of the hosted payment was inserted.
             */
            phaseCreatedAt?: string;
        };
        /** @description The status of the payment. */
        HostedPaymentStatusDetails: {
            status?: components['schemas']['PaymentStatus'];
            /**
             * Format: date-time
             * @description Date and time the status was updated.
             */
            statusUpdateDate?: string;
            isoStatus?: components['schemas']['HostedPaymentIsoStatus'];
        };
        /** @description The ISO status of the payment. */
        HostedPaymentIsoStatus: {
            /**
             * @description The ISO 20022 `PaymentStatusCode`. One of : <br> ACSC <br> ACCC <br> ACCP  <br> ACSP <br> ACTC <br> ACWC <br> ACWP <br> ACFC <br> RCVD <br> PART <br> PATC <br> PDNG <br> RJCT <br> CANC
             * @example ACSC
             */
            code?: string;
            /**
             * @description The full name of the ISO 20022 `PaymentStatusCode`.
             * @example AcceptedCreditSettlementCompleted
             */
            name?: string;
        };
        ApiResponseOfGetHostedPaymentRequest: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['HostedPaymentDetails'];
        };
        HostedPaymentDetails: {
            /**
             * Format: uuid
             * @description The unique ID of the payment request.
             */
            paymentRequestId?: string;
            /**
             * Format: uuid
             * @description The Unique Identifier for the `User` assigned by Yapily.
             */
            userId?: string;
            /** @description Your reference to the `User`. */
            applicationUserId?: string;
            /**
             * Format: uuid
             * @description The Unique Identifier of the `Application` the user is associated with.
             */
            applicationId?: string;
            institutionIdentifiers?: components['schemas']['InstitutionIdentifiersResponse'];
            userSettings?: components['schemas']['UserSettings'];
            /**
             * @description URL of your server to redirect the user after completion of the payment flow.
             * @example https://tpp-application.com
             */
            redirectUrl?: string;
            paymentRequestDetails?: components['schemas']['HostedPaymentRequestDetailsLink'];
            /**
             * Format: date-time
             * @description The date and time at which the payment request was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description The date and time at which the auth Token will expire.
             */
            authorisationExpiresAt?: string;
            /** @description Current status of the payment request. <br> Possible values: <br> ACTIVE <br> INACTIVE */
            status?: string;
            /** @description Payments that have been initiated as part of this request */
            payments?: components['schemas']['HostedPayment'][];
        };
        HostedPayment: {
            /**
             * Format: uuid
             * @description The Unique Identifier of the payment.
             */
            paymentId?: string;
            /**
             * Format: uuid
             * @description The Unique Identifier of the payment created using Yapily hosted application.
             */
            hostedPaymentId?: string;
            /**
             * Format: uuid
             * @description The Unique Identifier of the consent.
             */
            consentId?: string;
            institutionIdentifiers?: components['schemas']['InstitutionIdentifiersResponse'];
            /** @description The phase reached by the payment and its timestamp. */
            phases?: components['schemas']['HostedPaymentPhase'][];
            /** @description Details of the payment status. */
            statusDetails?: components['schemas']['HostedPaymentStatusDetails'][];
            /** @description The Unique Identifier of the payment created with the `Institution`. */
            institutionPaymentId?: string;
            /** @description The Unique Identifier provided by TPP in the Payment request to identify the payment. */
            paymentLifecycleId?: string;
            /**
             * @description A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.
             * @example 04ab4536gaerfc0e1f93c4f4
             */
            paymentIdempotencyId?: string;
            /**
             * @description The payment reference or description. Limited to a maximum of 18 characters for UK institutions.
             * @example Bill payment
             */
            reference?: string;
            contextType?: components['schemas']['PaymentContextTypeResponse'];
            type?: components['schemas']['PaymentTypeResponse'];
            payee?: components['schemas']['PayeeDetailsResponse'];
            payer?: components['schemas']['PayerDetailsResponse'];
            amount?: components['schemas']['AmountDetailsResponse'];
        };
        ApiResponseOfCreateHostedPaymentRequest: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['HostedPaymentRequestResponse'];
        };
        ApiResponseOfCreateHostedPaymentRequestLink: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['HostedPaymentRequestResponse'];
        };
        /**
         * @example {
         *   "meta": {
         *     "tracingId": "661471ddb4344113a2d185b861cb3dcf"
         *   },
         *   "data": [
         *     {
         *       "institutionId": "mock-sandbox",
         *       "institutionCountryCode": "GB",
         *       "endpointPath": "/payments",
         *       "endpointMethod": "POST",
         *       "paymentType": "DOMESTIC_PAYMENT",
         *       "request": {
         *         "headers": {
         *           "title": "Header",
         *           "type": "object",
         *           "properties": {
         *             "psuID": {
         *               "title": "PSU Id",
         *               "type": "string",
         *               "description": ""
         *             }
         *           }
         *         },
         *         "body": {
         *           "title": "Payment Request",
         *           "required": [
         *             "payee",
         *             "amount",
         *             "paymentIdempotencyId",
         *             "type"
         *           ],
         *           "type": "object",
         *           "properties": {
         *             "paymentIdempotencyId": {
         *               "title": "Payment Idempotency Id",
         *               "pattern": "^.{1,35}$",
         *               "type": "string",
         *               "description": "Id for the payment"
         *             },
         *             "type": {
         *               "enum": [
         *                 "DOMESTIC_PAYMENT"
         *               ],
         *               "title": "Payment Type",
         *               "type": "string",
         *               "description": "type of the payment"
         *             },
         *             "contextType": {
         *               "default": "OTHER",
         *               "enum": [
         *                 "BILL",
         *                 "GOODS",
         *                 "SERVICES",
         *                 "OTHER",
         *                 "PERSON_TO_PERSON"
         *               ],
         *               "title": "Context Type",
         *               "type": "string",
         *               "description": "__Optional__. The payment context code. This defaults to `OTHER` if not specified."
         *             },
         *             "reference": {
         *               "title": "Reference",
         *               "pattern": "^.{1,18}$",
         *               "type": "string",
         *               "description": "__Mandatory__. The payment reference or description. Limited to a maximum of 18 characters long.",
         *               "example": "Bill payment"
         *             },
         *             "payee": {
         *               "title": "Payee",
         *               "required": [
         *                 "accountIdentifications",
         *                 "name"
         *               ],
         *               "type": "object",
         *               "properties": {
         *                 "name": {
         *                   "title": "Name",
         *                   "pattern": "^.{1,18}$",
         *                   "type": "string",
         *                   "description": "__Mandatory__. The account holder name of the beneficiary.",
         *                   "example": "Jane Doe"
         *                 },
         *                 "accountIdentifications": {
         *                   "title": "Account Identifications",
         *                   "type": "array",
         *                   "items": {
         *                     "required": [
         *                       "identification",
         *                       "type"
         *                     ],
         *                     "type": "object",
         *                     "properties": {
         *                       "type": {
         *                         "title": "Account Identification Type",
         *                         "type": "string",
         *                         "description": "__Mandatory__. Used to describe the format of the account.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on when to specify each type."
         *                       },
         *                       "identification": {
         *                         "title": "Account Identification",
         *                         "type": "string",
         *                         "description": "__Mandatory__. The value associated with the account identification type.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on the format of the values."
         *                       }
         *                     }
         *                   },
         *                   "description": "__Mandatory__. The account identifications that identify the `Payee` bank account."
         *                 },
         *                 "address": {
         *                   "title": "Address",
         *                   "type": "object",
         *                   "properties": {
         *                     "addressLines": {
         *                       "title": "Address Lines",
         *                       "type": "array",
         *                       "items": {
         *                         "title": "Address Line",
         *                         "type": "string"
         *                       },
         *                       "description": "__Optional__. The address line of the address"
         *                     },
         *                     "streetName": {
         *                       "title": "Street Name",
         *                       "type": "string",
         *                       "description": "__Optional__. The street name of the address"
         *                     },
         *                     "buildingNumber": {
         *                       "title": "Building Number",
         *                       "type": "string",
         *                       "description": "__Optional__. The building number of the address"
         *                     },
         *                     "postCode": {
         *                       "title": "Postcode",
         *                       "type": "string",
         *                       "description": "__Optional__. The post code of the address"
         *                     },
         *                     "townName": {
         *                       "title": "Town",
         *                       "type": "string",
         *                       "description": "__Optional__. The town name of the address"
         *                     },
         *                     "county": {
         *                       "title": "County",
         *                       "type": "array",
         *                       "items": {
         *                         "type": "string"
         *                       },
         *                       "description": "__Optional__. The list of counties for the address"
         *                     },
         *                     "country": {
         *                       "title": "Country",
         *                       "type": "string",
         *                       "description": "__Conditional__. The 2-letter country code for the address. <br><br>An `Institution` may require you to specify the `country` when used in the context of the `Payee` to be able to make a payment"
         *                     },
         *                     "department": {
         *                       "title": "Department",
         *                       "type": "string",
         *                       "description": "__Optional__. The department for the address"
         *                     },
         *                     "subDepartment": {
         *                       "title": "Sub-department",
         *                       "type": "string",
         *                       "description": "__Optional__. The sub-department for the address"
         *                     },
         *                     "addressType": {
         *                       "enum": [
         *                         "BUSINESS",
         *                         "CORRESPONDENCE",
         *                         "DELIVERY_TO",
         *                         "MAIL_TO",
         *                         "PO_BOX",
         *                         "POSTAL",
         *                         "RESIDENTIAL",
         *                         "STATEMENT",
         *                         "UNKNOWN"
         *                       ],
         *                       "title": "Address Type",
         *                       "type": "string",
         *                       "description": "__Optional__. The type of address"
         *                     }
         *                   },
         *                   "description": "__Conditional__. The address of the `Payee` or `Payer`."
         *                 }
         *               },
         *               "description": "__Mandatory__. Details of the beneficiary [person or business]."
         *             },
         *             "payer": {
         *               "title": "Payer",
         *               "required": [
         *                 "accountIdentifications"
         *               ],
         *               "type": "object",
         *               "properties": {
         *                 "accountIdentifications": {
         *                   "title": "Account Identifications",
         *                   "type": "array",
         *                   "items": {
         *                     "required": [
         *                       "identification",
         *                       "type"
         *                     ],
         *                     "type": "object",
         *                     "properties": {
         *                       "type": {
         *                         "enum": [
         *                           "IBAN"
         *                         ],
         *                         "title": "Account Identification Type",
         *                         "type": "string",
         *                         "description": "__Mandatory__. Should be IBAN only."
         *                       },
         *                       "identification": {
         *                         "title": "Account Identification",
         *                         "pattern": "DE\\d{20}",
         *                         "type": "string",
         *                         "description": "__Mandatory__. The IBAN value associated with the account identity"
         *                       }
         *                     }
         *                   },
         *                   "description": "__Mandatory__. The account identifications that identify the `Payer` bank account."
         *                 },
         *                 "address": {
         *                   "title": "Address",
         *                   "type": "object",
         *                   "properties": {
         *                     "addressLines": {
         *                       "title": "Address Lines",
         *                       "type": "array",
         *                       "items": {
         *                         "title": "Address Line",
         *                         "type": "string"
         *                       },
         *                       "description": "__Optional__. The address line of the address"
         *                     },
         *                     "streetName": {
         *                       "title": "Street Name",
         *                       "type": "string",
         *                       "description": "__Optional__. The street name of the address"
         *                     },
         *                     "buildingNumber": {
         *                       "title": "Building Number",
         *                       "type": "string",
         *                       "description": "__Optional__. The building number of the address"
         *                     },
         *                     "postCode": {
         *                       "title": "Postcode",
         *                       "type": "string",
         *                       "description": "__Optional__. The post code of the address"
         *                     },
         *                     "townName": {
         *                       "title": "Town",
         *                       "type": "string",
         *                       "description": "__Optional__. The town name of the address"
         *                     },
         *                     "county": {
         *                       "title": "County",
         *                       "type": "array",
         *                       "items": {
         *                         "type": "string"
         *                       },
         *                       "description": "__Optional__. The list of counties for the address"
         *                     },
         *                     "country": {
         *                       "title": "Country",
         *                       "type": "string",
         *                       "description": "__Conditional__. The 2-letter country code for the address. <br><br>An `Institution` may require you to specify the `country` when used in the context of the `Payee` to be able to make a payment"
         *                     },
         *                     "department": {
         *                       "title": "Department",
         *                       "type": "string",
         *                       "description": "__Optional__. The department for the address"
         *                     },
         *                     "subDepartment": {
         *                       "title": "Sub-department",
         *                       "type": "string",
         *                       "description": "__Optional__. The sub-department for the address"
         *                     },
         *                     "addressType": {
         *                       "enum": [
         *                         "BUSINESS",
         *                         "CORRESPONDENCE",
         *                         "DELIVERY_TO",
         *                         "MAIL_TO",
         *                         "PO_BOX",
         *                         "POSTAL",
         *                         "RESIDENTIAL",
         *                         "STATEMENT",
         *                         "UNKNOWN"
         *                       ],
         *                       "title": "Address Type",
         *                       "type": "string",
         *                       "description": "__Optional__. The type of address"
         *                     }
         *                   },
         *                   "description": "__Conditional__. The address of the `Payee` or `Payer`."
         *                 }
         *               }
         *             },
         *             "amount": {
         *               "title": "Amount",
         *               "required": [
         *                 "amount",
         *                 "currency"
         *               ],
         *               "type": "object",
         *               "properties": {
         *                 "amount": {
         *                   "title": "Amount",
         *                   "minimum": 0,
         *                   "type": "number",
         *                   "description": "__Mandatory__. The monetary value"
         *                 },
         *                 "currency": {
         *                   "title": "Currency",
         *                   "pattern": "^[A-Z]{3,3}$",
         *                   "type": "string",
         *                   "description": "__Mandatory__. The [ISO 4217](https://www.xe.com/iso4217.php) currency code"
         *                 }
         *               },
         *               "description": "__Mandatory__. Monetary Amount."
         *             },
         *             "paymentDateTime": {
         *               "type": "string",
         *               "description": "__Optional__, If present date should be greater than or equal to current date",
         *               "format": "date-time"
         *             }
         *           },
         *           "description": "Domestic payment request schema"
         *         }
         *       }
         *     }
         *   ]
         * }
         */
        ApiListResponseOfPaymentConstraints: {
            meta?: components['schemas']['ResponseListMeta'];
            data?: components['schemas']['PaymentConstraintsResponse'][];
        };
        PaymentConstraintsResponse: {
            /**
             * @description The id to represent the `Institution`.
             * @example modelo-sandbox
             */
            institutionId: string;
            /**
             * @description 2 letter ISO Country code of the `Institution`.
             * @example GB
             */
            institutionCountryCode?: string;
            /** @description Define the applicable API end point. */
            endpointPath?: string;
            /** @description Https Method for the endpoint. */
            endpointMethod?: string;
            paymentType: components['schemas']['PaymentTypeOfConstraints'];
            request: components['schemas']['RequestConstraints'];
        };
        /** @description Object defining the constraints rules applicable for a given requests. */
        RequestConstraints: {
            headers?: components['schemas']['Schema'];
            body: components['schemas']['Schema'];
        };
        /**
         * @example {
         *   "meta": {
         *     "tracingId": "a43049c1dbc04d6f8c8e2dfdc523217a"
         *   },
         *   "data": [
         *     {
         *       "institutionId": "mock-sandbox",
         *       "institutionCountryCode": "GB",
         *       "endpointPath": "/account-auth-requests",
         *       "endpointMethod": "POST",
         *       "request": {
         *         "headers": {
         *           "title": "Header",
         *           "type": "object",
         *           "properties": {
         *             "psuID": {
         *               "title": "PSU Id",
         *               "type": "string",
         *               "description": "__Mandatory__. The psu id"
         *             }
         *           }
         *         },
         *         "body": {
         *           "required": [
         *             "institutionId"
         *           ],
         *           "type": "object",
         *           "properties": {
         *             "userUuid": {
         *               "title": "User UUID",
         *               "type": "string",
         *               "format": "uuid"
         *             },
         *             "institutionId": {
         *               "title": "Institution Identifier",
         *               "type": "string",
         *               "description": "__Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.",
         *               "example": "yapily-mock"
         *             },
         *             "oneTimeToken": {
         *               "title": "One Time Token",
         *               "type": "boolean",
         *               "description": "__Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-with-an-ott-optional) for more information.",
         *               "example": false
         *             },
         *             "callback": {
         *               "title": "Callback",
         *               "type": "string",
         *               "description": "__Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/pages/knowledge/yapily-concepts/callback_url/#using-a-callback-optional) for more information.",
         *               "example": "https://display-parameters.com"
         *             },
         *             "accountRequest": {
         *               "title": "Account Request",
         *               "type": "object",
         *               "properties": {
         *                 "transactionFrom": {
         *                   "title": "Transaction From Date",
         *                   "type": "string",
         *                   "description": "__Optional__. Used to specify the lower bound on when to pull transaction. This should be declared when accessing transaction older than 90 days for banks in the [CBI Globe](https://docs.yapily.com/pages/knowledge/open-banking/cbi_globe/).",
         *                   "format": "date-time"
         *                 },
         *                 "transactionTo": {
         *                   "title": "Transaction To Date",
         *                   "type": "string",
         *                   "description": "__Optional__. When performing a request using the consent, this is the latest date of transaction records that can be retrieved.",
         *                   "format": "date-time"
         *                 },
         *                 "expiresAt": {
         *                   "title": "Expires At",
         *                   "type": "string",
         *                   "description": "__Optional__. Used to set a hard date for when the user's associated `Consent` will expire.<br><br>**Note**: If this supported by the bank, specifying this is property is opting out of having a long-lived consent that can be perpetually re-authorised by the user. This will add an `expiresAt` field on the `Consent` object which will render it unusable after this date.<br><br>**Note**: This is not supported by every `Institution`. In such case, the request will not fail but the property will be ignored and the created `Consent` will not have an expiry date.",
         *                   "format": "date-time"
         *                 },
         *                 "accountIdentifiers": {
         *                   "title": "Account Info",
         *                   "required": [
         *                     "accountIdentification"
         *                   ],
         *                   "type": "object",
         *                   "properties": {
         *                     "accountId": {
         *                       "type": "string",
         *                       "description": "__Conditional__. Unique identifier of the account.",
         *                       "example": "500000000000000000000001"
         *                     },
         *                     "accountIdentification": {
         *                       "title": "Account Identifications",
         *                       "required": [
         *                         "identification",
         *                         "type"
         *                       ],
         *                       "type": "object",
         *                       "properties": {
         *                         "type": {
         *                           "enum": [
         *                             "SORT_CODE",
         *                             "ACCOUNT_NUMBER",
         *                             "IBAN",
         *                             "BBAN",
         *                             "BIC",
         *                             "PAN",
         *                             "MASKED_PAN",
         *                             "MSISDN",
         *                             "BSB",
         *                             "NCC",
         *                             "ABA",
         *                             "ABA_WIRE",
         *                             "ABA_ACH",
         *                             "EMAIL",
         *                             "ROLL_NUMBER",
         *                             "BLZ",
         *                             "IFS",
         *                             "CLABE",
         *                             "CTN",
         *                             "BRANCH_CODE",
         *                             "VIRTUAL_ACCOUNT_ID"
         *                           ],
         *                           "title": "Account Identification Type",
         *                           "type": "string",
         *                           "description": "__Mandatory__. Used to describe the format of the account.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on when to specify each type.",
         *                           "example": "SORT_CODE"
         *                         },
         *                         "identification": {
         *                           "title": "Account Identification",
         *                           "type": "string",
         *                           "description": "__Mandatory__. The value associated with the account identification type.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on the format of the values.",
         *                           "example": "401016"
         *                         }
         *                       }
         *                     }
         *                   },
         *                   "description": "__Conditional__. Used to create a request for the balance of the account specified. Once the user authorises the request, only the balance can be obtained by executing [GET Account Balances](./#get-account-balances).<br><br> This can be specified in conjunction with `accountIdentifiersForTransaction` to generate a `Consent` that can both access the accounts balance and transactions."
         *                 },
         *                 "accountIdentifiersForTransaction": {
         *                   "type": "array",
         *                   "items": {
         *                     "required": [
         *                       "accountIdentification"
         *                     ],
         *                     "type": "object",
         *                     "properties": {
         *                       "accountId": {
         *                         "type": "string",
         *                         "description": "__Conditional__. Unique identifier of the account.",
         *                         "example": "500000000000000000000001"
         *                       },
         *                       "accountIdentification": {
         *                         "title": "Account Identifications",
         *                         "required": [
         *                           "identification",
         *                           "type"
         *                         ],
         *                         "type": "object",
         *                         "properties": {
         *                           "type": {
         *                             "enum": [
         *                               "SORT_CODE",
         *                               "ACCOUNT_NUMBER",
         *                               "IBAN",
         *                               "BBAN",
         *                               "BIC",
         *                               "PAN",
         *                               "MASKED_PAN",
         *                               "MSISDN",
         *                               "BSB",
         *                               "NCC",
         *                               "ABA",
         *                               "ABA_WIRE",
         *                               "ABA_ACH",
         *                               "EMAIL",
         *                               "ROLL_NUMBER",
         *                               "BLZ",
         *                               "IFS",
         *                               "CLABE",
         *                               "CTN",
         *                               "BRANCH_CODE",
         *                               "VIRTUAL_ACCOUNT_ID"
         *                             ],
         *                             "title": "Account Identification Type",
         *                             "type": "string",
         *                             "description": "__Mandatory__. Used to describe the format of the account.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on when to specify each type.",
         *                             "example": "SORT_CODE"
         *                           },
         *                           "identification": {
         *                             "title": "Account Identification",
         *                             "type": "string",
         *                             "description": "__Mandatory__. The value associated with the account identification type.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on the format of the values.",
         *                             "example": "401016"
         *                           }
         *                         }
         *                       }
         *                     }
         *                   },
         *                   "description": "__Conditional__. Used to create a request for the transactions of the account specified. Once the user authorises the request, only the transactions can be obtained by executing [GET Account Transactions](./#get-account-transactions). <br><br>This can be specified in conjunction with `accountIdentifiersForBalance` to generate a `Consent` that can both access the accounts balance and transactions."
         *                 },
         *                 "accountIdentifiersForBalance": {
         *                   "type": "array",
         *                   "items": {
         *                     "required": [
         *                       "accountIdentification"
         *                     ],
         *                     "type": "object",
         *                     "properties": {
         *                       "accountId": {
         *                         "type": "string",
         *                         "description": "__Conditional__. Unique identifier of the account.",
         *                         "example": "500000000000000000000001"
         *                       },
         *                       "accountIdentification": {
         *                         "title": "Account Identifications",
         *                         "required": [
         *                           "identification",
         *                           "type"
         *                         ],
         *                         "type": "object",
         *                         "properties": {
         *                           "type": {
         *                             "enum": [
         *                               "SORT_CODE",
         *                               "ACCOUNT_NUMBER",
         *                               "IBAN",
         *                               "BBAN",
         *                               "BIC",
         *                               "PAN",
         *                               "MASKED_PAN",
         *                               "MSISDN",
         *                               "BSB",
         *                               "NCC",
         *                               "ABA",
         *                               "ABA_WIRE",
         *                               "ABA_ACH",
         *                               "EMAIL",
         *                               "ROLL_NUMBER",
         *                               "BLZ",
         *                               "IFS",
         *                               "CLABE",
         *                               "CTN",
         *                               "BRANCH_CODE",
         *                               "VIRTUAL_ACCOUNT_ID"
         *                             ],
         *                             "title": "Account Identification Type",
         *                             "type": "string",
         *                             "description": "__Mandatory__. Used to describe the format of the account.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on when to specify each type.",
         *                             "example": "SORT_CODE"
         *                           },
         *                           "identification": {
         *                             "title": "Account Identification",
         *                             "type": "string",
         *                             "description": "__Mandatory__. The value associated with the account identification type.<br><br> See [Account Identification Combinations](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/intro-to-payment-execution/#account-identifications-combinations) for more information on the format of the values.",
         *                             "example": "401016"
         *                           }
         *                         }
         *                       }
         *                     }
         *                   },
         *                   "description": "__Conditional__. Used to create a request for the transactions of the account specified. Once the user authorises the request, only the transactions can be obtained by executing [GET Account Transactions](./#get-account-transactions). <br><br>This can be specified in conjunction with `accountIdentifiersForBalance` to generate a `Consent` that can both access the accounts balance and transactions."
         *                 },
         *                 "featureScope": {
         *                   "title": "Feature Scope",
         *                   "type": "array",
         *                   "items": {
         *                     "type": "string"
         *                   },
         *                   "description": "Used to describe what functions are supported by the associated `Institution`"
         *                 }
         *               },
         *               "description": "Account authorisation request schema"
         *             }
         *           },
         *           "description": "The request body containing an `AccountAuthorisationRequest` json payload"
         *         }
         *       }
         *     }
         *   ]
         * }
         */
        ApiListResponseOfDataConstraints: {
            meta?: components['schemas']['ResponseMeta'];
            data?: components['schemas']['DataConstraintsResponse'][];
        };
        DataConstraintsResponse: {
            /**
             * @description The id to represent the `Institution`.
             * @example modelo-sandbox
             */
            institutionId: string;
            /**
             * @description 2 letter ISO Country code of the `Institution`.
             * @example GB
             */
            institutionCountryCode?: string;
            /** @description Define the applicable API end point. */
            endpointPath?: string;
            /** @description Https Method for the endpoint. */
            endpointMethod?: string;
            request: components['schemas']['RequestConstraints'];
        };
        /** @enum {string} */
        SchemaType: 'array' | 'boolean' | 'integer' | 'number' | 'object' | 'string';
        Schema: {
            title?: string;
            maximum?: number;
            exclusiveMaximum?: number;
            minimum?: number;
            exclusiveMinimum?: number;
            /** Format: regex */
            pattern?: string;
            maxItems?: number;
            minItems?: number;
            uniqueItems?: boolean;
            required?: string[];
            enum?: Record<string, never>[];
            type?: components['schemas']['SchemaType'];
            contains?: components['schemas']['Schema'];
            not?: components['schemas']['Schema'];
            if?: components['schemas']['Schema'];
            then?: components['schemas']['Schema'];
            else?: components['schemas']['Schema'];
            allOf?: components['schemas']['Schema'][];
            oneOf?: components['schemas']['Schema'][];
            anyOf?: components['schemas']['Schema'][];
            items?: components['schemas']['Schema'];
            properties?: {
                [key: string]: components['schemas']['Schema'] | undefined;
            };
            description?: string;
            format?: string;
            default?: Record<string, never>;
            example?: Record<string, never>;
            /** @description dependentRequired keyword is used to satisfy dependency between fields */
            dependentRequired?: {
                [key: string]: string[] | undefined;
            };
            $defs?: {
                [key: string]: components['schemas']['Schema'] | undefined;
            };
            $ref?: string;
            'x-yapily-annotations'?: {
                /** Format: date-time */
                lastUpdatedAt?: string;
            };
            'x-yapily-validations'?: {
                /** Format: duration */
                maxDurationFromNow?: string;
            };
        };
    };
    responses: {
        /** @description ok */
        200: never;
        /** @description Bad Request. */
        400: {
            content: {
                'application/json': components['schemas']['ApiErrorResponse'];
            };
        };
        /** @description Unauthorised. Credentials are missing or invalid */
        401: {
            content: {
                'application/json': components['schemas']['401VirtualAccountsApiErrorResponse'];
            };
        };
        /** @description Forbidden. Permission to access this endpoint is not granted. */
        403: {
            content: {
                'application/json': components['schemas']['403VirtualAccountsApiErrorResponse'];
            };
        };
        /** @description Not Found. Resource requested is not found. */
        404: {
            content: {
                'application/json': components['schemas']['404VirtualAccountsApiErrorResponse'];
            };
        };
        /** @description A failure occurred during an interaction with a third party provider. */
        424: {
            content: {
                'application/json': components['schemas']['424VirtualAccountsApiErrorResponse'];
            };
        };
        /** @description Unexpected Error. */
        500: {
            content: {
                'application/json': components['schemas']['500VirtualAccountsApiErrorResponse'];
            };
        };
    };
    parameters: {
        /** @description Unique identifier of the event type (for which notifications will be sent). */
        EventTypeId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type external = Record<string, never>;
export interface operations {
    updatePreAuthoriseAccountConsent: {
        /**
         * Update Account Pre-authorisation
         * @description Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to access account data. <br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow. <br><br>Features: <ul><li>`INITIATE_ACCOUNT_REQUEST`</li><li>`INITIATE_PRE_AUTHORISATION`</li></ul>
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header: {
                consent: string;
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['AccountAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfAccountAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    initiateAccountRequest: {
        /**
         * Create Account Authorisation
         * @description Used to initiate the authorisation process and direct users to the login screen of their financial institution in order to give consent to access account data.<br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_ACCOUNT_REQUEST`
         */
        parameters?: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['AccountAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfAccountAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    reAuthoriseAccount: {
        /**
         * Re-authorise Account Consent
         * @description Used to prompt the account holder for continued access to their financial data. This endpoint should be used when a `Consent` that was previously `AUTHORIZED` can no longer be used to retrieve data.<br><br>See [Re-Authorisation](https://docs.yapily.com/pages/key-concepts/account-data/account-consents/#re-authorisation) for more information.
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header: {
                consent: string;
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfAccountAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getAccounts: {
        /**
         * Get Accounts
         * @description Returns all accounts and balances for the end user associated with the presented consent token.<br><br>Feature: `ACCOUNTS`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header: {
                consent: string;
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['AccountApiListResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getAccount: {
        /**
         * Get Account
         * @description Returns the account and balance information for a user's specified account.<br><br>Feature: `ACCOUNT`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header: {
                consent: string;
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            path: {
                accountId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfAccount'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getAccountBalances: {
        /**
         * Get Account Balances
         * @description Returns the balance for the end user associated with the presented consent token.<br><br>Feature: `ACCOUNT_BALANCES`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header: {
                consent: string;
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            path: {
                accountId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfBalances'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getBeneficiaries: {
        /**
         * Get Account Beneficiaries
         * @description Returns all the beneficiaries of a user's account.<br><br>Feature: `ACCOUNT_BENEFICIARIES`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            header: {
                consent: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            path: {
                accountId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfBeneficiary'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getAccountDirectDebits: {
        /**
         * Get Account Direct Debits
         * @description Returns the list of direct debits for an account.<br><br>Feature: `ACCOUNT_DIRECT_DEBITS`
         */
        parameters: {
            /** @description __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000. */
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                limit?: number;
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            header: {
                consent: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            path: {
                accountId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfDirectDebitResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getAccountPeriodicPayments: {
        /**
         * Get Account Periodic Payments
         * @description Returns the list of periodic payments (standing orders in the UK) for an account.<br><br>Feature: `ACCOUNT_PERIODIC_PAYMENTS`
         */
        parameters: {
            /** @description __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000. */
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                limit?: number;
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            header: {
                consent: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            path: {
                accountId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfPaymentResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getAccountScheduledPayments: {
        /**
         * Get Account Scheduled Payments
         * @description Returns the list of scheduled payments for an account.<br><br>Feature: `ACCOUNT_SCHEDULED_PAYMENTS`
         */
        parameters: {
            /** @description __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000. */
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                limit?: number;
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            header: {
                consent: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            path: {
                accountId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfPaymentResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getStatements: {
        /**
         * Get Account Statements
         * @description Returns the list of statements for an account.<br><br>Feature: `ACCOUNT_STATEMENTS`
         */
        parameters: {
            /** @description __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). */
            /** @description __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). */
            /** @description __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000. */
            /** @description __Optional__. Sort transaction records by date ascending with 'date' or descending with '-date'. The default sort order is descending */
            /** @description __Optional__. The number of transaction records to be skipped. Used primarily with paginated results. */
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                from?: string;
                before?: string;
                limit?: number;
                sort?: components['schemas']['SortEnum'];
                offset?: number;
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            header: {
                consent: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            path: {
                accountId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfAccountStatement'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getStatement: {
        /**
         * Get Account Statement
         * @description Returns a statement for an account.<br><br>Feature: `ACCOUNT_STATEMENT`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request. */
            header: {
                consent: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            /** @description __Mandatory__. The statement Id of the statement file. */
            path: {
                accountId: string;
                statementId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfAccountStatement'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getStatementFile: {
        /**
         * Get Account Statement File
         * @description Returns a PDF file of a statement for an account.<br><br>Feature: `ACCOUNT_STATEMENT_FILE`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            header: {
                consent: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            /** @description __Mandatory__. The statement Id of the statement file. */
            path: {
                accountId: string;
                statementId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/pdf': string;
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getTransactions: {
        /**
         * Get Account Transactions
         * @description Returns the account transactions for an account.<br><br>Feature: `ACCOUNT_TRANSACTIONS`
         */
        parameters: {
            /** @description __Optional__. Acceptable value: `categorisation`. When set, will include enrichment data in the transactions returned. <br><br>Enrichment data is optional, e.g. when 'categorisation' enrichment data is requested, the enrichment response will include categorisation data and merchant name, only if it can be evaluated from the transaction. This service is limited for UK institution transactions currently. */
            /** @description __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). */
            /** @description __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). */
            /** @description __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000. */
            /** @description __Optional__. Sort transaction records by date ascending with 'date' or descending with '-date'. The default sort order is descending */
            /** @description __Optional__. The number of transaction records to be skipped. Used primarily with paginated results. */
            /** @description __Optional__. This property is not currently in use. */
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                with?: string[];
                from?: string;
                before?: string;
                limit?: number;
                sort?: components['schemas']['SortEnum'];
                offset?: number;
                cursor?: string;
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header: {
                consent: string;
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            path: {
                accountId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfTransaction'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createBulkPaymentAuthorisation: {
        /**
         * Create Bulk Payment Authorisation
         * @description Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_BULK_PAYMENT`
         */
        parameters?: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['BulkPaymentAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPaymentAuthorisationRequestResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createBulkPayment: {
        /**
         * Create Bulk Payment
         * @description Creates a bulk payment after obtaining the user's authorisation. <br><br>Feature: `CREATE_BULK_PAYMENT`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header: {
                consent: string;
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['BulkPaymentRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPaymentResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getCategories: {
        /**
         * Get Categories
         * @description Used to retrieve the list of categories returned by the Yapily Categorisation engine for a given locale. <br><br>See [Data Enrichment](https://docs.yapily.com/pages/key-concepts/account-data/data-enrichment/intro-to-data-enrichment/) for more information.
         */
        parameters: {
            /** @description __Mandatory__. The 2 letter country code e.g. 'GB'. */
            path: {
                country: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfCategory'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createConsentWithCode: {
        /**
         * Exchange OAuth2 Code
         * @description Used to obtain a Yapily Consent object containing the `consentToken` once the user has authenticated and you have an OAuth2 authorisation code `auth-code` and state `auth-state`.
         */
        requestBody: {
            content: {
                'application/json': components['schemas']['ConsentAuthCodeRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['Consent'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getConsentBySingleAccessConsent: {
        /**
         * Exchange One Time Token
         * @description Exchange a One-time-token for the consent token
         */
        requestBody: {
            content: {
                'application/json': components['schemas']['OneTimeTokenRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['Consent'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getConsents: {
        /**
         * Get Consents
         * @description Used to retrieve all the consents created for each user within an application
         */
        parameters?: {
            /** @description __Optional__. Filter records based on the list of `applicationUserId` users provided. */
            /** @description __Optional__. Filter records based on the list of `userUuid` users provided. */
            /** @description __Optional__. Filter records based on the list of `Institution` provided. */
            /** @description __Optional__. Filter records based on the list of `Consent` [statuses](https://docs.yapily.com/api/reference/#operation/getConsents!c=200&path=data/status&t=response). */
            /** @description __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). */
            /** @description __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). */
            /** @description __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000. */
            /** @description __Optional__. The number of transaction records to be skipped. Used primarily with paginated results. */
            query?: {
                'filter[applicationUserId]'?: string[];
                'filter[userUuid]'?: string[];
                'filter[institution]'?: string[];
                'filter[status]'?: string[];
                from?: string;
                before?: string;
                limit?: number;
                offset?: number;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfConsent'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getConsentById: {
        /**
         * Get Consent
         * @description Get consent using the consent Id
         */
        parameters: {
            /** @description __Mandatory__. The consent Id of the `Consent` to update. */
            path: {
                consentId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfConsent'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    delete: {
        /**
         * Delete Consent
         * @description Delete a consent using the consent Id
         */
        parameters: {
            /** @description __Optional__. Whether to force the deletion. */
            query?: {
                forceDelete?: boolean;
            };
            /** @description __Mandatory__. The consent Id of the `Consent` to update. */
            path: {
                consentId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfConsentDeleteResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    extendConsent: {
        /**
         * Extend Consent
         * @description Used to indicate to Yapily that reconfirmation has occurred for a given Consent, and to update lastUpdatedAt and reconfirmBy for that Consent. Returns the Consent.
         */
        parameters: {
            /** @description __Mandatory__. The consent Id of the `Consent` to update. */
            path: {
                consentId: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['ExtendConsentRequest'];
            };
        };
        responses: {
            /** @description Created */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfConsent'];
                };
            };
            /** @description Error Response. The supplied lastConfirmedAt date, Consent type, or Consent status is invalid. */
            400: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
        };
    };
    initiateEmbeddedAccountRequest: {
        /**
         * Create Embedded Account Authorisation
         * @description Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_ACCOUNT_REQUEST` feature in order to obtain the the user's authorisation to access their account information. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`
         */
        parameters?: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['EmbeddedAccountAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfEmbeddedAccountAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    updateEmbeddedAccountRequest: {
        /**
         * Update Embedded Account Authorisation
         * @description Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to access the user's financial data. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
            /** @description __Mandatory__. The consent Id of the `Consent` to update. */
            path: {
                consentId: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['EmbeddedAccountAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfEmbeddedAccountAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createEmbeddedBulkPaymentAuthorisation: {
        /**
         * Create Embedded Bulk Payment Authorisation
         * @description Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_BULK_PAYMENT` feature in order to obtain the the user's authorisation for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`
         */
        parameters?: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['BulkPaymentEmbeddedAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    updateEmbeddedBulkPaymentAuthorisation: {
        /**
         * Update Embedded Bulk Payment Authorisation
         * @description Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
            /** @description __Mandatory__. The consent Id of the `Consent` to update. */
            path: {
                consentId: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['BulkPaymentEmbeddedAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createEmbeddedPaymentAuthorisation: {
        /**
         * Create Embedded Payment Authorisation
         * @description Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT` feature in order to obtain the the user's authorisation for a payment.<br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`
         */
        parameters?: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['PaymentEmbeddedAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    updateEmbeddedPaymentAuthorisation: {
        /**
         * Update Embedded Payment Authorisation
         * @description Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a payment. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
            /** @description __Mandatory__. The consent Id of the `Consent` to update. */
            path: {
                consentId: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['PaymentEmbeddedAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getFeatureDetails: {
        /**
         * Get Features
         * @description Used to retrieve all features available from Yapily. Each `Institution` supports a one, many or all of these features and can be seen in the features field of the `Institution` object.<br><br>Note: Every `Institution` does not necessarily support every feature. To see which features are available for a particular Institution, use either the [Get Institutions](https://docs.yapily.com/api/reference/#operation/getInstitutions) or [Get Institution](https://docs.yapily.com/api/reference/#operation/getInstitution) endpoint and check the features array within the `Institution` payload.
         */
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfFeatureDetails'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getIdentity: {
        /**
         * Get Identity
         * @description Returns the identity information for an account.<br><br>Feature: `IDENTITY`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            header: {
                consent: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfIdentity'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getInstitutions: {
        /**
         * Get Institutions
         * @description Used to retrieve all `Institutions` within an application
         */
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfInstitution'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getInstitution: {
        /**
         * Get Institution
         * @description Used to retrieves details of a specific `Institution` within an application
         */
        parameters: {
            /** @description __Mandatory__. The Yapily institution Id for the `Institution`. */
            path: {
                institutionId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['Institution'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getApplicationMe: {
        /**
         * Get Application Self
         * @description Get the information about the institutions configured in your application
         */
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['Application'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    updatePaymentAuthorisation: {
        /**
         * Update Payment Pre-authorisation
         * @description Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to initiate a payment. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            header: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
                consent: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['PaymentAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPaymentAuthorisationRequestResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createPaymentAuthorisation: {
        /**
         * Create Payment Authorisation
         * @description Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a payment. This endpoint is used to initiate all the different payment listed below. Based on the type of payment you wish to make, you may be required to provide specific properties in [PaymentRequest](https://docs.yapily.com/api/reference/#operation/createPaymentAuthorisation!path=paymentRequest&t=request). First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/reference/#operation/getInstitution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`INITIATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>
         */
        parameters?: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['PaymentAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPaymentAuthorisationRequestResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createPayment: {
        /**
         * Create Payment
         * @description Creates a payment after obtaining the user's authorisation. <br><br>Features:<ul><li>`CREATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`CREATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`CREATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`CREATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`CREATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`CREATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`CREATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header: {
                consent: string;
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['PaymentRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPaymentResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getPayments: {
        /**
         * Get Payment Details
         * @description Returns the details of a payment. <br><br>Most commonly used to check for payment status updates. <br><br>Feature: `EXISTING_PAYMENTS_DETAILS`
         */
        parameters: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header: {
                consent: string;
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
            /** @description __Mandatory__. The payment Id of the payment. */
            path: {
                paymentId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPaymentResponses'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createPreAuthorisationRequest: {
        /**
         * Create Pre-authorisation
         * @description Used to initiate the pre-authorisation process for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature to authenticate the user. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`
         */
        parameters?: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['PreAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPreAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createPaymentPreAuthorisationRequest: {
        /**
         * Create Payment Pre-authorisation
         * @description Used to initiate the pre-authorisation process for payments for CBI Globe institutions that contain the `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS` feature to authenticate the user. <br><br>Feature: `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS`
         */
        parameters?: {
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                raw?: boolean;
            };
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required. */
            header?: {
                'psu-ip-address'?: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['PaymentPreAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfPreAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getUsers: {
        /**
         * Get Users
         * @description Get all the users configured in your application
         */
        parameters?: {
            /** @description __Optional__. Filter records based on the list of `applicationUserId` users provided. */
            query?: {
                'filter[applicationUserId]'?: string[];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApplicationUser'][];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    addUser: {
        /**
         * Create User
         * @description Create a new user in your application
         */
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['NewApplicationUser'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApplicationUser'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getUser: {
        /**
         * Get User
         * @description Get a specific user using the user UUID
         */
        parameters: {
            /** @description __Mandatory__. The Yapily generated UUID for the user. */
            path: {
                userUuid: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApplicationUser'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    deleteUser: {
        /**
         * Delete User
         * @description Delete a user from your application along with any sub-resources (including consent resources on institution APIs if they exist)
         */
        parameters: {
            /** @description __Mandatory__. The Yapily generated UUID for the user. */
            path: {
                userUuid: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfUserDeleteResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createProfileConsent: {
        /**
         * Create Profile Consent
         * @description Used to add a consent to a `Financial Profile` for a `User`.  The response is asynchronous, returned with pending status, while retrieval of financial data is commenced.  There is a limit of 10,000 transactions for enrichment.
         */
        parameters: {
            /** @description __Mandatory__. The `consent-token` obtained from the original authorisation. */
            header: {
                consent: string;
            };
            /** @description __Mandatory__. The Yapily generated UUID for the user. */
            path: {
                userUuid: string;
            };
        };
        responses: {
            /** @description A successful response, returning a ApiResponseOfFinancialProfileAuthorisationResponse. */
            201: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfFinancialProfileAuthorisationResponse'];
                };
            };
            /** @description Bad Request.  Returned if the userUuid is not a valid UUID. */
            400: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Either authentication credentials were not supplied, or they were invalid. */
            401: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Not Found.  Returned if the userUuid is not found for the `Application`. */
            404: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getProfileConsent: {
        /**
         * Get Profile Consent
         * @description Used to retrieve a specific ProfileConsent for a User.
         */
        parameters: {
            /** @description __Mandatory__. The Yapily generated UUID for the user. */
            /** @description __Mandatory__. The ID of the ProfileConsent */
            path: {
                userUuid: string;
                profileConsentId: string;
            };
        };
        responses: {
            /** @description A successful response, returning a ApiResponseOfFinancialProfileConsent. */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfFinancialProfileConsent'];
                };
            };
            /** @description Bad Request.  Returned if the userUuid is not a valid UUID. */
            400: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Either authentication credentials were not supplied, or they were invalid. */
            401: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Not Found.  Returned if the userUuid or ProfileConsent is not found for the `Application`. */
            404: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    deleteProfileConsent: {
        /**
         * Delete Profile Consent
         * @description Used to delete a `ProfileConsent` for a `User`. This will remove the consent and all associated financial data from the 'Financial Profile'.
         */
        parameters: {
            /** @description __Mandatory__. The Yapily generated UUID for the user. */
            /** @description __Mandatory__. The ID of the ProfileConsent */
            path: {
                userUuid: string;
                profileConsentId: string;
            };
        };
        responses: {
            /** @description The ProfileConsent was deleted. */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfFinancialProfileConsentRemoveResponse'];
                };
            };
            /** @description Bad Request.  Returned if the userUuid is not a valid UUID. */
            400: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Either authentication credentials were not supplied, or they were invalid. */
            401: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Not Found.  Returned if the userUuid or ProfileConsent is not found for the `Application`. */
            404: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getUserProfile: {
        /**
         * Get Transaction Groups
         * @description Used to retrieve a `TransactionGroups` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.
         */
        parameters: {
            /** @description __Mandatory__. The Yapily generated UUID for the user. */
            path: {
                userUuid: string;
            };
        };
        responses: {
            /** @description A successful response, returning a ApiResponseOfFinancialProfile. */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfFinancialProfile'];
                };
            };
            /** @description Bad Request.  Returned if the userUuid is not a valid UUID. */
            400: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Either authentication credentials were not supplied, or they were invalid. */
            401: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Not Found.  Returned if the userUuid is not found for the `Application`. */
            404: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getBalancePrediction: {
        /**
         * Get Predicted Balances
         * @description Used to retrieve a `Balance Prediction Profile` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.
         */
        parameters: {
            /** @description __Mandatory__. The Yapily generated UUID for the user. */
            path: {
                userUuid: string;
            };
        };
        responses: {
            /** @description A successful response, returning a Balance Prediction Profile. */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfFinancialProfileBalancePrediction'];
                };
            };
            /** @description Bad Request.  Returned if the userUuid is not a valid UUID. */
            400: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Either authentication credentials were not supplied, or they were invalid. */
            401: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Not Found.  Returned if the userUuid is not found for the `Application`, or data not found for the userUuid. */
            404: {
                content: {
                    'application/json': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getEventSubscriptions: {
        /**
         * Get Event Subscriptions
         * @description Get all event subscriptions that your application is subscribed to
         */
        responses: {
            /** @description Event subscriptions for the application */
            200: {
                content: {
                    'application/json': components['schemas']['ApiListResponseOfEventSubscriptionResponse'];
                };
            };
            /** @description Unauthorized */
            401: never;
        };
    };
    createEventSubscription: {
        /**
         * Create Event Subscription
         * @description Used to subscribe to notifications relating to a specified event type.
         */
        requestBody: {
            content: {
                'application/json': components['schemas']['EventSubscriptionRequest'];
            };
        };
        responses: {
            /** @description Event subscription created successfully */
            201: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfEventSubscriptionResponse'];
                };
            };
            /** @description Bad request for missing required properties */
            400: never;
            /** @description Unauthorized */
            401: never;
            /** @description Event subscription already exist for the application */
            409: never;
        };
    };
    getEventSubscriptionById: {
        /**
         * Get Event Subscription
         * @description Used to get details of your subscription to a specified event type.
         */
        responses: {
            /** @description Event subscription data found */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfEventSubscriptionResponse'];
                };
            };
            /** @description Unauthorized */
            401: never;
            /** @description Event subscription not found */
            404: never;
        };
    };
    deleteEventSubscriptionById: {
        /**
         * Delete Event Subscription
         * @description Used to unsubscribe to notifications relating to a specified event type.
         */
        responses: {
            /** @description Event subscription deleted successfully */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfEventSubscriptionDeleteResponse'];
                };
            };
            /** @description Unauthorized */
            401: never;
            /** @description Event subscription not found */
            404: never;
        };
    };
    getVirtualAccountBeneficiaries: {
        /**
         * Get List Of Beneficiaries
         * @description Gets the list of beneficiaries (individual or business account) to which a Pay Out can be made.
         */
        parameters: {
            /** @description __Optional__. Data required to provide pagination */
            query?: {
                cursor?: string;
            };
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiListResponseOfVirtualAccountBeneficiary'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    createVirtualAccountBeneficiary: {
        /**
         * Create Beneficiary
         * @description Create a new beneficiary (individual or business account) to which a Pay Out can be made. The beneficiary can be used from any virtual account that is held
         */
        parameters: {
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['VirtualAccountBeneficiaryRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountBeneficiary'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            /** @description Conflict with another beneficiary with same account identifications */
            409: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountBeneficiary'];
                };
            };
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    getVirtualAccountBeneficiary: {
        /**
         * Get Beneficiary
         * @description Get the details of a specific beneficiary (individual or business account) to which a Pay Out can be made from its id.
         */
        parameters: {
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
            /** @description __Mandatory__. The Id of the requested beneficiary. */
            path: {
                beneficiaryId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountBeneficiary'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            /** @description Not Found. Requested beneficiary is not found. */
            404: {
                content: {
                    'application/json': components['schemas']['404VirtualAccountsApiErrorResponse'];
                };
            };
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    deleteVirtualAccountBeneficiary: {
        /**
         * Delete Beneficiary
         * @description Delete a specific beneficiary (individual or business account)
         */
        parameters: {
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
            /** @description __Mandatory__. The Id of the beneficiary that will be deleted */
            path: {
                beneficiaryId: string;
            };
        };
        responses: {
            /** @description OK */
            200: never;
            401: components['responses']['401'];
            403: components['responses']['403'];
            /** @description Not Found. Requested beneficiary is not found */
            404: {
                content: {
                    'application/json': components['schemas']['ApiErrorResponse'];
                };
            };
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    getVirtualAccounts: {
        /**
         * Get Accounts
         * @description Retrieve a list of all virtual accounts held
         */
        parameters: {
            /** @description __Optional__. Filter accounts based on reference provided in order to help with identification of the account */
            /** @description __Optional__. Filter accounts based on three-letter ISO 4217 currency code */
            /** @description __Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED */
            /** @description __Optional__. Data required to provide pagination */
            query?: {
                nickname?: string;
                currency?: string;
                status?: string;
                cursor?: string;
            };
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiListResponseOfVirtualAccount'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    createVirtualAccount: {
        /**
         * Create Account
         * @description Create a new virtual account
         */
        parameters: {
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['VirtualAccountRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccount'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    createVirtualAccountPayOut: {
        /**
         * Create Pay Out
         * @description Initiate a payment from a specified virtual account to a previously added beneficiary using any of the schemes that it supports <br> When subscribed to virtualAccount.payOut.status notifications, further updates on payment processing status will be delivered asynchronously
         */
        parameters: {
            /**
             * @description Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied
             * @example a346fe67-1d81-4ccd-8409-bf9d6c07980f
             */
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'idempotency-key': string;
                'client-id': string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['VirtualAccountPayOutRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountPayment'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    getVirtualAccountById: {
        /**
         * Get Account
         * @description Get the details of a specific account using its Id
         */
        parameters: {
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
            /** @description __Mandatory__. The Id of the account. */
            path: {
                accountId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccount'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            /** @description Not Found. Resource requested is not found. */
            404: {
                content: {
                    'application/json': components['schemas']['404VirtualAccountsApiErrorResponse'];
                };
            };
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    updateVirtualAccountById: {
        /**
         * Update Account
         * @description Update the details of a specific account using its Id
         */
        parameters: {
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
            /** @description __Mandatory__. The Id of the account. */
            path: {
                accountId: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['UpdateVirtualAccountRequest'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccount'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            /** @description Not Found. Resource requested is not found. */
            404: {
                content: {
                    'application/json': components['schemas']['404VirtualAccountsApiErrorResponse'];
                };
            };
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    getVirtualAccountPayments: {
        /**
         * Get Payments
         * @description Retrieve a list of virtual account payments
         */
        parameters: {
            /**
             * @description __Optional__. Filter payments based on accountId
             * @example eb2ad083-a111-4143-8756-a3a3cef4031c
             */
            /**
             * @description __Optional__. Filter payments based on the createdDateTime
             * @example 2022-04-24T00:30:19.951Z
             */
            /**
             * @description __Optional__. Filter payments based on the createdDateTime
             * @example 2022-04-24T00:30:19.951Z
             */
            /**
             * @description __Optional__. Filter payments based on the payment status. One of INITIATED, PENDING, PROCESSING, COMPLETED, FAILED
             * @example [
             *   "INITIATED",
             *   "COMPLETED"
             * ]
             */
            /**
             * @description __Optional__. Filter payments based on the payment type. One of PAY_IN, PAY_OUT, RETURN_IN, RETURN_OUT
             * @example [
             *   "PAY_IN",
             *   "PAY_OUT"
             * ]
             */
            /** @description __Optional__. Data required to provide pagination */
            query?: {
                accountId?: string;
                createdDateTimeFrom?: string;
                createdDateTimeTo?: string;
                status?: string[];
                type?: string[];
                cursor?: string;
            };
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiListResponseOfVirtualAccountPayment'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    getPaymentsById: {
        /**
         * Get Payment
         * @description Get the details of a specific payment using its Id
         */
        parameters: {
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
            /** @description __Mandatory__. The id of the payment */
            path: {
                id: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountPayment'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            /** @description Not Found. Requested payment is not found. */
            404: {
                content: {
                    'application/json': components['schemas']['404VirtualAccountsApiErrorResponse'];
                };
            };
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    createVirtualAccountTransfer: {
        /**
         * Create Virtual Account Transfer
         * @description Create a transfer between two virtual accounts
         */
        parameters: {
            /**
             * @description Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied
             * @example a346fe67-1d81-4ccd-8409-bf9d6c07980f
             */
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'idempotency-key': string;
                'client-id': string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['VirtualAccountTransferRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountPayment'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            /** @description Forbidden. Permission to access this endpoint is not granted. */
            403: {
                content: {
                    'application/json': components['schemas']['ApiErrorResponse'];
                };
            };
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    getPayInDetails: {
        /**
         * Get Pay-In Details
         * @description Get the details of a pay-in transaction
         */
        parameters: {
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
            /**
             * @description Uniquely identifies a transaction
             * @example 8b66abb5-5412-4454-aa7b-4e693ada6321
             */
            path: {
                paymentId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountPayInDetails'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            /** @description Not Found. Requested beneficiary is not found. */
            404: {
                content: {
                    'application/json': components['schemas']['404VirtualAccountsApiErrorResponse'];
                };
            };
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    getVirtualAccountClients: {
        /**
         * Get List of Virtual Account Clients
         * @description Get Virtual Account Clients (individual or business client).
         */
        parameters: {
            /**
             * @description __Optional__.  Filter clients based on client type. One of BUSINESS or INDIVIDUAL
             * @example BUSINESS
             */
            /**
             * @description __Optional__.  Filter clients based on client status. One of ACTIVE, PENDING or SUSPENDED
             * @example ACTIVE
             */
            /** @description __Optional__. Data required to provide pagination */
            query?: {
                type?: string;
                status?: string;
                cursor?: string;
            };
            /**
             * @description __Mandatory__. This must be your master client-id (and not one associated with one of your clients)
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiListResponseOfVirtualAccountClient'];
                };
            };
            /** @description Bad Request */
            400: {
                content: {
                    'application/json': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Unauthorised. Credentials are missing or invalid */
            401: {
                content: {
                    'application/json': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Forbidden. Permission to access this endpoint is not granted. */
            403: {
                content: {
                    'application/json': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description A failure occured during interaction with a third party provider */
            424: {
                content: {
                    'application/json': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Unexpected Error */
            500: {
                content: {
                    'application/json': components['schemas']['ApiErrorResponse'];
                };
            };
        };
    };
    createVirtualAccountClient: {
        /**
         * Create Virtual Account Client
         * @description Create a new virtual account client (individual or business client). Available for clients who have direct onboarding permissions only. Please contact your CSM to enquire about access
         */
        parameters: {
            /**
             * @description __Mandatory__. This must be your master client-id (and not one associated with one of your clients)
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['VirtualAccountClientRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountClient'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    getVirtualAccountRefunds: {
        /**
         * Get list of refunds
         * @description Retrieve a list of refunds
         */
        parameters: {
            /**
             * @description __Optional__. Filter refunds based on unique ID of the original payment
             * @example PDC_29bd8528-9b6f-4b6e-a963-9382944dc830
             */
            /**
             * @description __Optional__.  Filter refunds based on refund status. One of INITIATED, SCHEDULED, PROCESSING, COMPLETED, FAILED
             * @example PROCESSING
             */
            /**
             * @description __Optional__.  Filter to get refunds created on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ)
             * @example 2023-01-13T16:41:51.136085Z
             */
            /**
             * @description __Optional__.  Filter to get refunds created on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ)
             * @example 2023-02-13T16:41:51.136085Z
             */
            /**
             * @description __Optional__. Encoded pagination cursor to fetch next page
             * @example cGF5bWVudEluaXRpYXRpb25JZD1QRENfMjliZDg1MjgtOWI2Zi00YjZlLWE5NjMtOTM4Mjk0NGRjODMwJnN0YXR1cz1GQUlMRUQmY3JlYXRlZERhdGVUaW1lRnJvbT0yMDIzLTAxLTEzVDE2OjQxOjUxLjEzNjA4NVomY3JlYXRlZERhdGVUaW1lVG89MjAyMy0wMi0xMFQxODo0Mjo1MS4xMzYwODVaJnBvaW50ZXI9MjAyMy0wMS0xM1QxNjo0MTo1MS4xMzYwODU=
             */
            query?: {
                paymentInitiationId?: string;
                status?: string;
                createdDateTimeAfter?: string;
                createdDateTimeBefore?: string;
                cursor?: string;
            };
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiListResponseOfVirtualAccountRefund'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    createVirtualAccountRefund: {
        /**
         * Create Refund
         * @description Create a refund for a payment received into a virtual account. Funds are returned to the source account. When subscribed to `virtualAccount.refund.status` notifications, updates on the refund status are delivered asynchronously.
         */
        parameters: {
            /**
             * @description Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied
             * @example a346fe67-1d81-4ccd-8409-bf9d6c07980f
             */
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'idempotency-key': string;
                'client-id': string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['VirtualAccountRefundRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountRefund'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    getVirtualAccountRefundById: {
        /**
         * Get Refund By Id
         * @description Get the details of a refund by its ID
         */
        parameters: {
            /**
             * @description The customer or sub-customer ID. Identifies the customer to perform the request for
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
            /** @description __Mandatory__. The id of the refund */
            path: {
                id: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountRefund'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    getVirtualAccountClientById: {
        /**
         * Get a Virtual Account Client by ID
         * @description Get a Virtual Account Client using its ID. Restricted to applications with direct onboarding permissions only
         */
        parameters: {
            /**
             * @description __Mandatory__. This must be your master client-id (and not one associated with one of your clients)
             * @example 5a7294ab-6b7d-4681-835a-f9b9775c75db
             */
            header: {
                'client-id': string;
            };
            /** @description __Mandatory__. The ID of the client. */
            path: {
                clientId: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': components['schemas']['ApiResponseOfVirtualAccountClient'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            404: components['responses']['404'];
            424: components['responses']['424'];
            500: components['responses']['500'];
        };
    };
    createSweepingAuthorisation: {
        /**
         * Create Sweeping Variable Recurring Payment Authorisation
         * @description Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for Sweeping Variable Recurring Payments. The request would return an Authorization URL and an Identifier for the consent created at the Institution. First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/#get-institution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_SWEEPING`</li></ul>
         */
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['SweepingAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfSweepingAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
        };
    };
    createNonSweepingAuthorisation: {
        /**
         * Create Non-Sweeping Variable Recurring Payment Authorisation
         * @description Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for Non-Sweeping Variable Recurring Payments. The request would return an Authorization URL and an Identifier for the consent created at the Institution. First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/#get-institution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_NONSWEEPING`</li></ul>
         */
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['NonSweepingAuthorisationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfNonSweepingAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
        };
    };
    createVrpPayment: {
        /**
         * Create Variable Recurring Payment
         * @description Creates a Variable Recurring Payment transaction after obtaining the user's authorisation.<br><br>Features:<ul><li>`CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_SWEEPING`</li><li>`CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_NONSWEEPING`</li></ul>
         */
        parameters: {
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            header: {
                consent: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['SubmissionRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfSubmissionResponse'];
                };
            };
            /** @description Error Response */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
        };
    };
    getSweepingVrpConsentById: {
        /**
         * Get Sweeping Variable Recurring Payment Consent Details
         * @description Get Sweeping Variable Recurring Payments consent details using the consent Id
         */
        parameters: {
            /** @description __Mandatory__. The consent Id of the `Variable Recurring Payments Consent` to retrieve. */
            path: {
                consentId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfSweepingAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
        };
    };
    getNonSweepingVrpConsentById: {
        /**
         * Get Non-Sweeping Variable Recurring Payment Consent Details
         * @description Get Non-Sweeping Variable Recurring Payments consent details using the consent Id
         */
        parameters: {
            /** @description __Mandatory__. The consent Id of the `Variable Recurring Payments Consent` to retrieve. */
            path: {
                consentId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfNonSweepingAuthorisationResponse'];
                };
            };
            /** @description Error Response */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
        };
    };
    createVrpFundsConfirmation: {
        /**
         * Confirm Funds for Variable Recurring Payment
         * @description Confirms whether there are available funds on the Payer account to execute a Variable Recurring Payment after obtaining the user's authorisation. <br><br>Features:<ul><li>`VARIABLE_RECURRING_PAYMENT_FUNDS_CONFIRMATION`</li></ul>
         */
        parameters: {
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            header: {
                consent: string;
            };
        };
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['FundsConfirmationRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfFundsConfirmationResponse'];
                };
            };
            /** @description Error Response */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
        };
    };
    getVrpPaymentDetails: {
        /**
         * Get Variable Recurring Payment Details
         * @description Get Variable Recurring Payment details using the Payment Id
         */
        parameters: {
            /** @description __Mandatory__. The consent token containing the user's authorisation to make the `Variable Recurring Payments` request. */
            header: {
                consent: string;
            };
            /** @description __Mandatory__. The Payment Id of the `Variable Recurring Payments` to retrieve. */
            path: {
                paymentId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfSubmissionResponse'];
                };
            };
            /** @description Error Response */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiErrorResponse'];
                };
            };
        };
    };
    getRealTimeTransactions: {
        /**
         * Get Real Time Account Transactions
         * @description Used to get the account transactions for an account in real time with cursor pagination<br><br>Feature: `ACCOUNT_TRANSACTIONS`
         */
        parameters: {
            /** @description __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). */
            /** @description __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). */
            /** @description __Optional__. The cursor token supplied by a previous call. The cursor represents a location in the data set. */
            /** @description __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>. */
            query?: {
                from?: string;
                before?: string;
                cursor?: string;
                raw?: boolean;
            };
            /**
             * @description __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
             * @example {consentToken}
             */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required. */
            /** @description __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required. */
            header: {
                consent: string;
                'psu-id'?: string;
                'psu-corporate-id'?: string;
                'psu-ip-address'?: string;
            };
            /** @description __Mandatory__. The account Id of the user's bank account. */
            path: {
                accountId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfRealTimeTransaction'];
                };
            };
            /** @description Error Response */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createHostedPaymentRequest: {
        /**
         * Create Hosted payment request
         * @description Used to initiate a payment request using Yapily Hosted Pages.
         */
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['CreateHostedPaymentRequest'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfCreateHostedPaymentRequest'];
                };
            };
            /** @description Bad Request */
            400: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Unauthorized. Credentials are missing or invalid */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Unexpected Error */
            500: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    createHostedPaymentRequestLink: {
        /**
         * Create Pay By Link
         * @description Used to created a long lived payment request for Pay By Link
         */
        requestBody: {
            content: {
                'application/json;charset=UTF-8': components['schemas']['CreateHostedPaymentRequestLink'];
            };
        };
        responses: {
            /** @description Created */
            201: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfCreateHostedPaymentRequestLink'];
                };
            };
            /** @description Bad Request */
            400: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Unauthorized. Credentials are missing or invalid */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Unexpected Error */
            500: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getHostedPaymentRequest: {
        /**
         * Get Hosted payment request
         * @description Used to get details of a payment request
         */
        parameters: {
            /** @description Unique Identifier of the payment request */
            path: {
                paymentRequestId: string;
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseOfGetHostedPaymentRequest'];
                };
            };
            /** @description Unauthorized */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Not Found */
            404: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Unexpected Error */
            500: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Error Response */
            default: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getPaymentConstraintsRulesByInstitution: {
        /**
         * Get Payment Constraints Rules
         * @description Retrieve institution specific constraints for payment authorisation and submission requests
         */
        parameters: {
            /** @description Unique Id(s) of the `Institution`(s) to retrieve the Payment Constraints for. Multiple institutionIds need to be separated by `,` */
            /** @description Country code of the `Institution`(s). Ensure that the country code matches the respective institutionIds; any mismatch will result in an HTTP 404 error response. */
            /** @description Type of payment to retrieve payment constraints for */
            /** @description The path on the API that is associated with the operation for which constraints are to be retrieved */
            /** @description The HTTP method that is associated with the operation for which constraints are to be retrieved */
            query: {
                institutionIds: string[];
                institutionCountryCode: string;
                paymentType: 'DOMESTIC_PAYMENT' | 'DOMESTIC_INSTANT_PAYMENT' | 'DOMESTIC_VARIABLE_RECURRING_PAYMENT' | 'DOMESTIC_SCHEDULED_PAYMENT' | 'DOMESTIC_PERIODIC_PAYMENT' | 'INTERNATIONAL_PAYMENT' | 'INTERNATIONAL_SCHEDULED_PAYMENT' | 'INTERNATIONAL_PERIODIC_PAYMENT' | 'BULK_PAYMENT';
                endpointPath?: string;
                endpointMethod?: 'POST' | 'PATCH' | 'PUT' | 'GET' | 'DELETE';
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfPaymentConstraints'];
                };
            };
            /** @description Bad Request. */
            400: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Either authentication credentials were not supplied, or they were invalid. */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Not Found. */
            404: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Unexpected Error */
            500: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
    getAccountConstraintsRulesByInstitution: {
        /**
         * Get Data Constraints Rules
         * @description Get Data Constraints Rules against an Institution for Account Authorisation requests
         */
        parameters: {
            /** @description Unique Id(s) of the `Institution`(s) to retrieve the Data Constraints for. Multiple institutionIds need to be separated by `,` */
            /** @description Country code of the `Institution`(s). Ensure that the country code matches the respective institutionIds; any mismatch will result in an HTTP 404 error response. */
            /** @description The path on the API that is associated with the operation for which constraints are to be retrieved */
            /** @description The HTTP method that is associated with the operation for which constraints are to be retrieved */
            query: {
                institutionIds: string[];
                institutionCountryCode: string;
                endpointPath?: string;
                endpointMethod?: 'POST' | 'PATCH' | 'PUT' | 'GET' | 'DELETE';
            };
        };
        responses: {
            /** @description Ok */
            200: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiListResponseOfDataConstraints'];
                };
            };
            /** @description Bad Request. */
            400: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Either authentication credentials were not supplied, or they were invalid. */
            401: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Not Found. */
            404: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
            /** @description Unexpected Error */
            500: {
                content: {
                    'application/json;charset=UTF-8': components['schemas']['ApiResponseError'];
                };
            };
        };
    };
}
